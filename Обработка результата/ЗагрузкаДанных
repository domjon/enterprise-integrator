 Перем МетаданныеФормы 	Экспорт;
Перем ФормаВыбораТипа;
Перем ТекущаяНастройка 	Экспорт;	//Структура (СтрокаОбработки,Позиция)
Перем ТаблицаСвойств;

Перем мИмяПКО;						//Имя ПКО должнобыть уникальным, поэтому сохраняем предыдущее чтобы в случае чего к нему вернутся
Перем мСтрокиКоллекции	Экспорт;  	//Массив строк табличной части дерева, которые загружались в табличную часть объекта
Перем мМассивИзмененных	Экспорт;	//Массив измененных, созданных объектов.
Перем мМетаданные;                  //Объект метаданных для доступа к измерениям регистра

////////////////////////////////////////////////////////////////////////////////
//ОБЪЯЗАТЕЛЬНЫЕ ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

//Возврашает структуру, которая описывает,
//поведение обработки в рамках групповой обработки
Функция ПолучитьСвойстваОбработки() Экспорт
	СтруктураСвойств=Новый Структура;
	СтруктураСвойств.Вставить("Действие"				,ДействиеПеретаскивания.Копирование); 	//Действие при назначении обработки
		//ДействиеПеретаскивания.Отмена 		- обработку нельзя использовать в таблице выбраннх обработок те обработка не предназначена для пакетной обработки 
		//ДействиеПеретаскивания.Копирование  	- обработку необходимо настраивать 
		//ДействиеПеретаскивания.Перемещение  	- обработка уже настроена ее нужнно просто добавить
	ДоступныеТипы		= ПараметрыОкружения.ВсеНаборыЗаписей;
	ДоступныеТипы		= Новый ОписаниеТипов(ДоступныеТипы,ПараметрыОкружения.ВсеОбъекты.Типы());	
	МассивПростыхТипов 	= Новый Массив;
	МассивПростыхТипов.Добавить(Тип("Булево"));
	МассивПростыхТипов.Добавить(Тип("Строка"));
	МассивПростыхТипов.Добавить(Тип("Число"));
	МассивПростыхТипов.Добавить(Тип("Дата"));
    ДоступныеТипы		= Новый ОписаниеТипов(ДоступныеТипы,МассивПростыхТипов);
	
	СтруктураСвойств.Вставить("Типы"					,Новый ОписаниеТипов(ДоступныеТипы,ПараметрыОкружения.ВсеСсылки.Типы(),Перечисления.ТипВсеСсылки().Типы()));
	СтруктураСвойств.Вставить("Функция"					,Истина); //обработка возвращает значения
	//Капитан очевидность
	СтруктураСвойств.Вставить("Картинка"				,КартинкаЗаголовка);
	СтруктураСвойств.Вставить("ИспользоватьНастройки"	,(СтруктураСвойств.Действие=ДействиеПеретаскивания.Копирование));
	СписокВложенных=Новый СписокЗначений;
	СписокВложенных.Добавить("ОбменДанными.Загрузка","ОбменДанными.Загрузка",Истина);
	СписокВложенных.Добавить("Записать","Записать",Истина);
	СтруктураСвойств.Вставить("РекомендуемыеВложенные"	,СписокВложенных);
	Возврат  СтруктураСвойств;
КонецФункции	

// Выполняет обработку объектов.
//
// Параметры:
//  Параметры				-<Структура>. Структура доступных параметров
//  Объект					-<Произвльный>. Обрабатываемый объект, тип в соотвествии со свойствами обработки
//	ТекущиеДанные			-<СтрокаТабличнойЧасти>. Строка табличной части.
//	ДополнительныеСтроки    -<Массив>. Массив дополнительных строк, которые были обработаны текущей обработкой
//
Функция ВыполнитьОбработку(Параметры=Неопределено,Объект=Неопределено,ТекущиеДанные=Неопределено, ДополнительныеСтроки = Неопределено) Экспорт
	Если ТекущаяНастройка.Свойство("СтрокаОбработки") Тогда
		мСтрокиКоллекции	= Неопределено;
		мМассивИзмененных	= Новый Массив;
		СтрокиЗагружаемыхОбъектов =  Дерево.Строки.НайтиСтроки(Новый Структура("ЭтоТаблица,ЗагружатьТолькоПоСсылке",Истина,Ложь),Истина);	
		Для Каждого ЗагружаемыйОбъект ИЗ СтрокиЗагружаемыхОбъектов Цикл
			Если Не ЗагружаемыйОбъект.Уровень()	= 1 Тогда
				Продолжить;
			КонецЕсли;
			зПолучитьОбъект(ЭтаФорма,ЗагружаемыйОбъект,Параметры,Объект,ТекущиеДанные);
		КонецЦикла;
		//дополним массив дополнительных строк строками коллекции, чтобы не обрабатывать при следующем проходе
		Если ТипЗнч(мСтрокиКоллекции) = Тип("Массив") Тогда
			ДополнительныеСтроки	= вСоединить(ДополнительныеСтроки,мСтрокиКоллекции);
		КонецЕсли;
		Возврат мМассивИзмененных;
	КонецЕсли;	
КонецФункции // ВыполнитьОбработку()

//Загружает текущую настройку
//
Процедура ЗагрузитьНастройку() Экспорт
	Если ТекущаяНастройка.Свойство("СтрокаОбработки") Тогда
		Если ТипЗнч(ТекущаяНастройка.СтрокаОбработки.Настройка)	= Тип("ДеревоЗначений") Тогда
			Дерево	=  ТекущаяНастройка.СтрокаОбработки.Настройка.Скопировать();
			//Добавляем колонки которых раньше могло и не быть
			Если Дерево.Колонки.Найти("СопоставлятьОбъекты") = Неопределено Тогда
				Дерево.Колонки.Добавить("СопоставлятьОбъекты", Новый ОписаниеТипов("Булево"));			
			КонецЕсли;
			Если Дерево.Колонки.Найти("ТаблицаСопоставления") = Неопределено Тогда
				Дерево.Колонки.Добавить("ТаблицаСопоставления");			
			КонецЕсли;
			вОчиститьКэш();
		КонецЕсли;
	КонецЕсли;	
КонецПроцедуры

//Функция возращает типы возможных возвращаемых значений
//
Функция ПолучитьТипВозрЗначений() Экспорт
	ОписаниеТипов=Новый ОписаниеТипов();
	ИспользуемыеТаблицы	= Дерево.Строки.НайтиСтроки(Новый Структура("Использовать,ЭтоТаблица",Истина,Истина),Истина);
	МассивТипов=Новый Массив;
	Для Каждого Строка ИЗ ИспользуемыеТаблицы Цикл
		Если ТипЗнч(Строка.Тип) = Тип("ОписаниеТипов") Тогда
			Если вОписаниеТиповПересекаются(ПараметрыОкружения.ВсеСсылки,Строка.Тип) Тогда
				//Получим объектный тип, а не ссылочный - именно он возвращается
				Если СтрЧислоВхождений(Строка.ПолноеИмя,".")=1 Тогда
					ОписаниеТипов=Новый ОписаниеТипов(ОписаниеТипов,СтрЗаменить(Строка.ПолноеИмя,".","Объект."));
				КонецЕсли;
			Иначе
				ОписаниеТипов=Новый ОписаниеТипов(ОписаниеТипов,Строка.Тип.Типы());
			КонецЕсли;	
		КонецЕсли;	
	КонецЦикла;	
	Возврат ОписаниеТипов;	
КонецФункции

//Формирует алгоритм на встроенном языке, отражающий суть данной обработки
//
Функция СформироватьАлгоритм() Экспорт 
	стрАлгоритм="";
	Возврат стрАлгоритм; 
КонецФункции

///////////////////////////////////////////////////////////////////////////////
// ВСПОМОГАТЕЛЬНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

//Сохраняет текущую настройку
//Параметры:
//	ЗапрашиватьСохранение	-<Булево>. Определеяет необходимость вопроса.
//
функция вСохранитьНастройку(ЗапрашиватьСохранение = Ложь)
	Если Модифицированность Тогда
		Если ЗапрашиватьСохранение Тогда
			Ответ = Вопрос("Сохранить изменения?", РежимДиалогаВопрос.ДаНетОтмена);
			Если Ответ = КодВозвратаДиалога.Отмена Тогда
				Возврат Неопределено;				
			ИначеЕсли Ответ = КодВозвратаДиалога.Нет Тогда
				Возврат Ложь;
			КонецЕсли;
		КонецЕсли;	
	КонецЕсли;
	Если Не вНастройкаКорректна() Тогда
		Возврат Неопределено;	
	КонецЕсли;
	СобытиеОтладки=Формы.Отладка.ДобавитьСобытие("Сохранение настройки","Конструктор");
	Попытка;								
	    вОчиститьКэш();
		вОпределитьКлючевыеКолонки();
		ТекущаяНастройка.СтрокаОбработки.Настройка	= Дерево.Скопировать();
		ТекущаяНастройка.СтрокаОбработки.Функция	= (ПолучитьТипВозрЗначений().Типы().Количество()>0);
		Модифицированность	= Ложь;
		ВладелецФормы.Модифицированность	= Истина;
	Исключение
		Формы.Отладка.ЗавершитьСобытие(СобытиеОтладки,"ОченьВажное",ИнформацияОбОшибке().Описание);
		ВызватьИсключение "Не удалось сохранить настройку";
	КонецПопытки;
	Формы.Отладка.ЗавершитьСобытие(СобытиеОтладки);	
	Возврат Истина;
КонецФункции

//Проверят на корректность настройку
//Параметры:
//	Нет.
//Возвращаемое значение:
//	Булево	
Функция вНастройкаКорректна()
	//1. Должна быть, как минимум одна строка загружаемая не по ссылке.
	ЕстьЧтоЗагружать = Ложь;
	СтрокиЗагружаемыхОбъектов =  Дерево.Строки.НайтиСтроки(Новый Структура("ЭтоТаблица,ЗагружатьТолькоПоСсылке",Истина,Ложь),Истина);	
	Для Каждого ЗагружаемыйОбъект ИЗ СтрокиЗагружаемыхОбъектов Цикл
		Если ЗагружаемыйОбъект.Уровень() = 1 Тогда
			ЕстьЧтоЗагружать = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Если Не ЕстьЧтоЗагружать Тогда
		Предупреждение("Должен существовать хотя бы один объект загружаемыей явно(НЕ по ссылке)",20,"Сохранение настройки");
		Возврат Ложь;
	КонецЕсли;	
	
	//2. Проверка на зацикливание
	ВозможноЗацикливание = Ложь;
	СтрокиЗагружаемыхОбъектов =  Дерево.Строки.НайтиСтроки(Новый Структура("ЭтоТаблица,Использовать",Истина,Истина),Истина);	
	Для Каждого ЗагружаемыйОбъект ИЗ СтрокиЗагружаемыхОбъектов Цикл
		Если Не ЗагружаемыйОбъект.Уровень()	= 1 Тогда
			Продолжить;
		КонецЕсли;
		СтруктураЗацикливания	= вЗацикливание(ЗагружаемыйОбъект,ЗагружаемыйОбъект);
		Если СтруктураЗацикливания.Возможно Тогда
			Сообщить(СтруктураЗацикливания.Путь,СтатусСообщения.Важное);
			Предупреждение("Настроки образуют бесконечный цикл в ПКО",20,"Сохранение настройки");
			Возврат Ложь;
		КонецЕсли;	
	КонецЦикла;

	//3. Проверка на полную очистку регистров
	СтрокиЗагружаемыхОбъектов_Замещать =  Дерево.Строки.НайтиСтроки(Новый Структура("ЭтоТаблица,НеЗамещать",Истина,Ложь),Истина);
	Для Каждого ЗамещаемыйОбъект ИЗ СтрокиЗагружаемыхОбъектов_Замещать Цикл
		Если ЗамещаемыйОбъект.Уровень() = 1 И вОписаниеТиповПересекаются(ПараметрыОкружения.ВсеНаборыЗаписей,ЗамещаемыйОбъект.Тип) Тогда
			//это РС, у котрого не указана галочка не замещать
			Если ЗамещаемыйОбъект.Свойства.НайтиСтроки(Новый Структура("Использовать,Поиск",Истина,Истина)).Количество()=0 Тогда
				Сообщить("У ПКО """+ЗамещаемыйОбъект.Представление+""" набора записей не используется поиск, и в тоже время не установлен признак ""Не замещать"".
				|Данная настройка полностью очистит регистр.",СтатусСообщения.Важное);
			КонецЕсли;	
		КонецЕсли;
	КонецЦикла;
	Возврат Истина;
КонецФункции

//Проверяет на зацикливание ПКО
//Параметры:
//	ПКО 		- <СтрокаДереваЗначений>. ПКО для которого проверяется зачикливание
//	ИсходноеПКО - <СтрокаДереваЗначений>. Строка достижение которой, является фактом зацикливания.
//	Путь		- <Строка>. Путь для образования Цикла
Функция вЗацикливание(ПКО,ИсходноеПКО,Путь="")
	СтруктураЗацикливания = Новый Структура("Возможно,Путь",Ложь);
	ОбработкаПрерыванияПользователя();
	Если ПустаяСтрока(Путь) Тогда
		Путь = ПКО.Представление;
	Иначе 
		Путь = Путь+" -> "+ПКО.Представление;
		Если  ПКО = ИсходноеПКО Тогда
			СтруктураЗацикливания.Возможно 	= Истина;
			СтруктураЗацикливания.Путь		= Путь;
			Возврат СтруктураЗацикливания;
		КонецЕсли;	
	КонецЕсли;	
	СтрокиПоиска = ПКО.Свойства.НайтиСтроки(Новый Структура("Использовать,Поиск",Истина,Истина));
	Для Каждого СтрокаПоиска ИЗ  СтрокиПоиска Цикл
		Если вНеобходимоОбращениеКПКО(СтрокаПоиска) Тогда
			СтруктураЗацикливания = вЗацикливание(вПолучитьПКО(СтрокаПоиска),ИсходноеПКО,Путь+"("+СтрокаПоиска.ИмяПараметра+")");
			Если СтруктураЗацикливания.Возможно Тогда
				Прервать;
			КонецЕсли;	
		КонецЕсли;	
	КонецЦикла;
	Возврат СтруктураЗацикливания;
КонецФункции

//Функция для совместимости с формой выбора типа
//Параметры:
//	Строка	-<Неопределено>.
//	Текст	-<Строка>. Текст который необходимо сохранить.
Процедура УстановитьСтр(Строка,Текст) Экспорт
	Если ТипЗнч(Строка)= Тип("СтрокаТаблицыЗначений") Тогда
		Если СтрДлина(Текст)>1000 Тогда
			Строка.ЗначениеПараметра=Лев(Текст,1000);
			Строка.ЗначениеСтр=Сред(Текст,1001);
		Иначе
			Строка.ЗначениеПараметра=Текст;
			//очишем та как при получении будем складывать
			Строка.ЗначениеСтр="";
		КонецЕсли;	
	Иначе	
		ЗначениеПараметра=Текст;
	КонецЕсли;	
КонецПроцедуры

///Функция для совместимости с формой выбора типа
//Параметры:
//	Строка	-<Неопределено>
//Вовзращаемое занчение:
//	Текст неограниченной длинны
Функция ПолучитьСтр(Строка)Экспорт
	Если ТипЗнч(Строка)= Тип("СтрокаТаблицыЗначений") Тогда
		Возврат ""+Строка(Строка.ЗначениеПараметра)+Строка.ЗначениеСтр	
    Иначе
		Возврат ЗначениеПараметра;	
	КонецЕсли;	
КонецФункции	

//Задает имя переменной(ЗначениеПараметра) основываясь на позиции текущей обработки
//
Процедура вЗадатьИмяпеременнойНаОсновеПозиции()
	Если ТекущаяНастройка.Свойство("Позиция") Тогда
		//для настройки определена позиция поэтой некоторые ограничения в форме
		ЗначениеПараметра	= "ТекущиеДанные."+ТекущаяНастройка.Позиция.Колонка.Имя;
	КонецЕсли;		
Конецпроцедуры	

//Получает образец объекта для подсказки переменной
Функция вПолучитьОбразецОбъекта(Параметры)
	Если ТекущаяНастройка.Свойство("Позиция") Тогда
		Возврат Владелецформы.вПолучитьТекущийОбъект(ТекущаяНастройка.Позиция);
	Иначе
		Результат = вЗначениеВКоллекцию(вПолучитьЯвныйОбъектОбработки(Параметры));
		Если Не Результат=Неопределено Тогда
			Возврат Результат[0];
		КонецЕсли;	
	КонецЕсли;	
КонецФункции

//Получает объект обработки указанный явно в форме, может быть как ссвлончого типа так,
//так и вычисляемое выражение
//Параметры:
//	Параметры	- <Структура>. Структура параметров.		
Функция вПолучитьЯвныйОбъектОбработки(Параметры)
	Если ТипЗнч(ЗначениеПараметра) = Тип("Строка") Тогда
		Попытка
			Значение	= вВычислитьЗначение(Новый Структура("Выражение",ЗначениеПараметра),Параметры);
			Возврат Значение;
		Исключение
			Возврат ЗначениеПараметра;
		КонецПопытки;	
	Иначе
		Возврат ЗначениеПараметра; 
	КонецЕсли;
КонецФункции	

//Процедура загружате дерево метаданных
//Параметры:
//	Нет.
Процедура вЗагрузитьДерево()
	СвойстваОбработки	= ПолучитьСвойстваОбработки();
	вСоздатьГруппыОбъектовМетаданных(Дерево);
	//уберем типы которые обработка не использует
	ЛишниеМетаданные	= Новый Массив;
	Для Каждого ГруппаОбъектов ИЗ Дерево.Строки Цикл
		Если Не вОписаниеТиповПересекаются(СвойстваОбработки.Типы,ГруппаОбъектов.Тип) Тогда
			ЛишниеМетаданные.Добавить(ГруппаОбъектов);		
		КонецЕсли;	
	КонецЦикла;	
	Для Каждого СтрокаДЗ ИЗ ЛишниеМетаданные Цикл
		Дерево.Строки.Удалить(СтрокаДЗ);	
	КонецЦикла;	
КонецПроцедуры

//Загружает свойства объекта метаданных
//Параметры:
//	Строка	- <СтрокаДереваЗначений>. Строка объекта метаданных
//
Процедура вЗагрузитьСвойства(Строка)
	Если ТипЗнч(Строка) = Тип("СтрокаДереваЗначений") Тогда
		СписокСвойств	= вПолучитьСвойстваОбъектаМетаданных(Строка);
		Для Каждого Свойство ИЗ СписокСвойств Цикл
			Если Не Свойство.Пометка Тогда
				НовоеСвойство 					= Свойства.Добавить();			
				НовоеСвойство.ИмяПараметра		= Свойство.Представление;
				НовоеСвойство.ОграничениеТипа	= Свойство.Значение;
			КонецЕсли;	
		КонецЦикла;
	    ВладелецФормы.ЗагрузитьСвойства(Строка);
	КонецЕсли;	
КонецПроцедуры	

//Формирует дополнительную структуру параметров для формы выбора типа, для объектов ТЧ
//
Функция вСформироватьСтруктуруДляФормыВыбораТипа()
	ТекДанные=ЭлементыФормы.Свойства.ТекущиеДанные;
	СтруктураДопПараметров=Новый Структура();
	СтруктураДопПараметров.Вставить("ТекущиеДанные",ТекДанные);
	СтруктураДопПараметров.Вставить("ОграничениеТипа",ТекДанные.ОграничениеТипа);
	СтруктураДопПараметров.Вставить("ДоступныеСтруктуры",Новый Структура);
	СтруктураПараметров = ВладелецФормы.вПолучитьСтруктуруПараметров();
	//СтруктураПараметров.Удалить(ТекДанные.ИмяПараметра);	
		СтруктураДопПараметров.ДоступныеСтруктуры.Вставить("Параметры",СтруктураПараметров);
	Если ТекущаяНастройка.Свойство("Позиция") Тогда
		СтруктураДопПараметров.ДоступныеСтруктуры.Вставить("ТекущиеДанные",	ВладелецФормы.вПолучитьТекущиеДанные());
		СтруктураДопПараметров.ДоступныеСтруктуры.Вставить("Объект",		вПолучитьОбразецОбъекта(СтруктураПараметров));
	КонецЕсли;
	ПКО =  ЭлементыФормы.Дерево.ТекущаяСтрока;
	ПКС =  ЭлементыФормы.Свойства.ТекущаяСтрока;
	Если Не ПКО = Неопределено И Не ПКС = Неопределено Тогда
		ЭтоСсылочныйТип		= вОписаниеТиповПересекаются(ПКО.Тип,ПараметрыОкружения.ВсеСсылки);
		Если ПКО.Уровень()>1 Тогда
			//Доступна переменная CтрокаТЧ
			Для Каждого Элемент ИЗ СтрокуВСписок(ПКО.ПолноеИмя,".") Цикл
				ИмяКолекции	=Элемент.Значение;
			КонецЦикла;
			Образец = ПКО.Свойства[0].ОграничениеТипа.ПривестиЗначение(); //в первой строке всегда ссылка
			Если Не Образец =Неопределено Тогда
				Попытка
					ТЧ	= Образец[ИмяКолекции];
					СтруктураСтроки = Новый Структура();
					Для Ном =0 ПО Свойства.Индекс(ПКС)-1 Цикл   //только свойства выше текущего
						Колонка = ПКО.Свойства[Ном];
						Если Колонка.Использовать Тогда
							СтруктураСтроки.Вставить(Колонка.ИмяПараметра,Колонка.ОграничениеТипа.ПривестиЗначение(Колонка.ЗначениеПараметра));		
						КонецЕсли;	
					КонецЦикла;
					Если ТЧ.Количество()>0 Тогда
						ЗаполнитьЗначенияСвойств(СтруктураСтроки,ТЧ[0]);
					КонецЕсли;	
					СтруктураДопПараметров.ДоступныеСтруктуры.Вставить("СтрокаТЧ",СтруктураСтроки);
				Исключение
				КонецПопытки;	
			КонецЕсли;
		ИначеЕсли Не ЭтоСсылочныйТип Тогда
			//Доступная переменная Запись
			СтруктураЗаписи = Новый Структура();
			Для Ном =0 ПО Свойства.Индекс(ПКС)-1 Цикл    //только свойства выше текущего
				Колонка = ПКО.Свойства[Ном];
				Если Колонка.Использовать Тогда
					СтруктураЗаписи.Вставить(Колонка.ИмяПараметра,Колонка.ОграничениеТипа.ПривестиЗначение(Колонка.ЗначениеПараметра));		
				КонецЕсли;	
			КонецЦикла;
			СтруктураДопПараметров.ДоступныеСтруктуры.Вставить("Запись",СтруктураЗаписи);
		КонецЕсли;
	КонецЕсли;	
	Возврат СтруктураДопПараметров; 	
КонецФункции

//Устанавливает признак использования для всех родителей в дереве
//Параметры:
//	СтрокаДЗ - <СтрокаДереваЗначений>	
Процедура вОбновитьПризнакИспользования(СтрокаДЗ)
	Если СтрокаДЗ.ЭтоТаблица 
		И ТипЗнч(СтрокаДЗ.Свойства) = Тип("ТаблицаЗначений") Тогда
		СтрокаДЗ.Использовать	= (СтрокаДЗ.Свойства.Найти(Истина,"Использовать")<>Неопределено);
		Если НЕ СтрокаДЗ.Использовать Тогда
			СтрокаДЗ.Использовать	= (СтрокаДЗ.Строки.Найти(Истина,"Использовать",Ложь)<>Неопределено);			
		КонецЕсли;;	
	Иначе
		СтрокаДЗ.Использовать	= (СтрокаДЗ.Строки.Найти(Истина,"Использовать",Ложь)<>Неопределено);			
	КонецЕсли;	
КонецПроцедуры

//Устанавливает доступность элементов управления
//
Процедура вУстановитьДостпностьЭлементовУправления()
	Если ТекущаяНастройка.Свойство("Позиция") Тогда
    	ЭлементыФормы.КоманднаяПанель.Кнопки.Сохранить.Доступность	= Истина;	
	КонецЕсли;	
КонецПроцедуры 

//Функция возвращает список значений, содержаших строки дерева значений в своствах которого упоминается имя ПКО
//Параметры:
//	ИмяПКО 	-<Строка>. Имя ПКО.
Функция вПолучитьСписокСсылокНаПКО(ИмяПКО)
	СписокСсылок =  Новый СписокЗначений;
	СтрокиТаблиц = Дерево.Строки.НайтиСтроки(Новый Структура("ЭтоТаблица",Истина), Истина);
	Для Каждого СтрокаТаблица Из СтрокиТаблиц Цикл
		Если ТипЗнч(СтрокаТаблица.Свойства) =  Тип("ТаблицаЗначений") Тогда
			Если Не СтрокаТаблица.Свойства.Найти(ИмяПКО,"ПКО") = Неопределено Тогда
				Структура	= Новый Структура("Значение,Картинка",СтрокаТаблица.Тип, Новый Картинка);
				СформироватьКартинкуНаОсновеТипов(Структура);
				СписокСсылок.Добавить(СтрокаТаблица,СтрокаТаблица.ПолноеИмя,,Структура.Картинка);	
			КонецЕсли;	
		КонецЕсли;	
	КонецЦикла;	
	Возврат СписокСсылок;
КонецФункции

//Заполняет новое правило конвертации объектов
//Параметры:
//	СтрокаПКО 	- <СтрокаДереваЗначений>. Строка в дереве.
//	Тип			- <Тип>. Тип правила объекта.
Процедура вЗаполнитьНовоеПКО(СтрокаПКО,Тип)
	мОбъект=Метаданные.НайтиПоТипу(Тип);
	Если Не мОбъект=Неопределено Тогда
		СтрокаПКО.Имя 						= СтрокаПКО.Родитель.Имя + "." + мОбъект.Имя;
		СтрокаПКО.ПолноеИмя					= мОбъект.ПолноеИмя();
		СтрокаПКО.Представление 			= мОбъект.Представление();
		СтрокаПКО.Картинка 					= СтрокаПКО.Родитель.КартинкаЭлементов;
		СтрокаПКО.ЭтоТаблица				= Истина;
		СтрокаПКО.Назначение				= "Основная";
		СтрокаПКО.Тип						= СоздатьОписаниеТиповНаОсновеКолекции(Тип);
		СтрокаПКО.ЗагружатьТолькоПоСсылке   = вСодержитТип(ПараметрыОкружения.ВсеСсылки,Тип);
		
		ДеревоПриАктивизацииСтроки(ЭлементыФормы.Дерево);
		
		Если ТекущаяНастройка.Свойство("Позиция") Тогда
			//Добавим коллекции
			СтруктураОграничений 	= Новый Структура("СписокСвойств",	Новый СписокЗначений);
			СтруктураОграничений.СписокСвойств.Добавить("ТабличныеЧасти");
			СтруктураОграничений.СписокСвойств.Добавить("ВидыСубконто");
			СтруктураОграничений.СписокСвойств.Добавить("БазовыеВидыРасчета");
			СтруктураОграничений.СписокСвойств.Добавить("ВедущиеВидыРасчета");
			СтруктураОграничений.СписокСвойств.Добавить("ВытесняющиеВидыРасчета");
			ПолучитьСвойствоОбъектаМД("ТабличныеЧасти",			мОбъект,СтрокаПКО,50,	51,	СтруктураОграничений);
			ПолучитьСвойствоОбъектаМД("ВидыСубконто",			мОбъект,СтрокаПКО,45,	5,	СтруктураОграничений);
			ПолучитьСвойствоОбъектаМД("БазовыеВидыРасчета",		мОбъект,СтрокаПКО,64,	5,	СтруктураОграничений);
			ПолучитьСвойствоОбъектаМД("ВедущиеВидыРасчета",		мОбъект,СтрокаПКО,64,	5,	СтруктураОграничений);
			ПолучитьСвойствоОбъектаМД("ВытесняющиеВидыРасчета",	мОбъект,СтрокаПКО,64,	5,	СтруктураОграничений);
		КонецЕсли;	
	КонецЕсли;
КонецПроцедуры	

//Функция определяет необходима ли загрузка свойства из ПКО, или же значений своства указано явно
//Параметры:
//	ПКС				-<СтрокаТаблицыЗначений> ПКС объекта
//  Параметры		-<Структура>. Структура доступных параметров
//  Объект			-<Произвльный>. Обрабатываемый объект, тип в соотвествии со свойствами обработки
//	ТекущиеДанные	-<СтрокаТаблицыЗначений>. Строка таблицы результатов запроса.
//Возвращаемое значение:
//	Булево.
Функция вНеобходимоОбращениеКПКО(ПКС, Параметры = Неопределено, Объект= Неопределено, ТекущиеДанные = Неопределено) Экспорт
	Если ПустаяСтрока(ПКС.ПКО) Тогда
		Возврат Ложь;	
	Иначе
		Возврат Не ЗначениеЗаполнено(ПКС.ЗначениеПараметра);
	КонецЕсли;	
КонецФункции

//Получает ПКО для текущего ПКС
//Параметры
//	ПКС	- <СтрокаТаблицыЗначений>. Текущее ПКС, для которого мы получаем ПКО	
Функция вПолучитьПКО(ПКС) Экспорт
	ПКО	= Дерево.Строки.Найти(ПКС.ПКО,"Представление",Истина);
	Если  ПКО = Неопределено Тогда
		ВызватьИсключение "Не найдено ПКО """+ПКС.ПКО+""" для ПКС -"+ПКС.ИмяПараметра;
	Иначе
		Возврат ПКО
	КонецЕсли;	
КонецФункции	


//Очищает кэш
//
Процедура вОчиститьКэш() Экспорт //Вызываем из вложенной таблицы
	СтрокиТаблиц	= Дерево.Строки.НайтиСтроки(Новый Структура("ЭтоТаблица",Истина),Истина);	
	Для Каждого СтрокаТаблицы ИЗ  СтрокиТаблиц Цикл
		СтрокаТаблицы.Кэш	= Новый ТаблицаЗначений;
		СтрокаТаблицы.Кэш.Колонки.Добавить("Ключ", Новый ОписаниеТипов("Строка"));
		СтрокаТаблицы.Кэш.Колонки.Добавить("Значение");
	КонецЦикла;	
КонецПроцедуры

//Определяет ключевые колонки обрабатываемой таблицы. 
//Ключевыеми колонками счтается те колонки таблицы, кокторые используется в полях поиска.
//
Процедура вОпределитьКлючевыеКолонки() Экспорт //Вызываем из вложенной таблицы
	СобытиеОтладки=Формы.Отладка.ДобавитьСобытие("Определение ключевых колонок для загружаемых типов","Конструктор");
	Попытка;								
		СтрокиЗагружаемыхОбъектов =  Дерево.Строки.НайтиСтроки(Новый Структура("ЭтоТаблица",Истина),Истина);	
		Для Каждого ПКО ИЗ СтрокиЗагружаемыхОбъектов Цикл
			Если Не ПКО.Уровень()	= 1 ИЛИ НЕ вОписаниеТиповПересекаются(ПараметрыОкружения.ВсеСсылки,ПКО.Тип) Тогда
				Продолжить;
			КонецЕсли;
			Структура = вПолучитьКлючевыеКолонки(ПКО);
			ПКО.КлючевыеКолонки.Очистить();
			//Заполняем список значений
			Для Каждого Элемент ИЗ Структура Цикл
				ПКО.КлючевыеКолонки.Добавить(Элемент.Ключ);			
			КонецЦикла;	
		КонецЦикла;
	Исключение
		Формы.Отладка.ЗавершитьСобытие(СобытиеОтладки,"ОченьВажное",ИнформацияОбОшибке().Описание);
		ВызватьИсключение "Не удалось определить ключевые колонки";
	КонецПопытки;
	Формы.Отладка.ЗавершитьСобытие(СобытиеОтладки);	
КонецПроцедуры

//Получает ключевые колонки для ПКО
//Параметры:
//	ПКО - <СтрокаДереваЗначений>. Загружаемый объект
//Возвращаемое значение:
//	Структура, в качестве ключей колонки
Функция вПолучитьКлючевыеКолонки(ПКО)  Экспорт
	Перем RegExp;
	Структура	= Новый Структура;
	//Формируем строку содержащую выражения поиска используемое в ПКО
	ВыражениеПоиска	= "";
	СтрокиПоиска =  ПКО.Свойства.НайтиСтроки(Новый Структура("Использовать,Поиск",Истина,Истина));
	Для Каждого СтрокаПоиска ИЗ СтрокиПоиска Цикл
		Если вНеобходимоОбращениеКПКО(СтрокаПоиска) Тогда
			Для Каждого КлючеваКолонка Из  вПолучитьКлючевыеКолонки(вПолучитьПКО(СтрокаПоиска)) Цикл
				Структура.Вставить(КлючеваКолонка.Ключ);		
			КонецЦикла;	
		ИначеЕсли СтрокаПоиска.ЭтоВыражение Тогда	
			ВыражениеПоиска	= ВыражениеПоиска +	 Символы.ПС	+ ПолучитьСтр(СтрокаПоиска);		
		КонецЕсли;	
	КонецЦикла;	
	//Находим имена колонок используемых в выражениях
	Если Не ПустаяСтрока(ВыражениеПоиска) Тогда
		Если RegExp = Неопределено Тогда
			RegExp 	= Новый COMОбъект("VBScript.RegExp");
			RegExp.IgnoreCase 	= Истина;
			RegExp.MultiLine 	= Истина;
			RegExp.Global 		= Истина;
			RegExp.Pattern 		= "ТекущиеДанные\.([А-Я_A-Z0-9]*)"; //ШАБЛОН РЕГУЛЯНОГО ВЫРАЖЕНИЯ
		КонецЕсли;
		Вхождения 	= RegExp.Execute(ВыражениеПоиска);
		Для Каждого Вхождение из Вхождения Цикл
			Структура.Вставить(Вхождение.SubMatches(0));		
		КонецЦикла;
	КонецЕсли;
	Возврат Структура;
КонецФункции	

//Формирует строковое представление ключа кэша, на основе параметров
//Параметры:
//	ПКО				- <СтрокаДереваЗначений>
//  Объект			- <Произвльный>. Обрабатываемый объект, тип в соотвествии со свойствами обработки
//	ТекущиеДанные	- <СтрокаТаблицыЗначений>. Строка таблицы результатов запроса.
//
Функция вПолучитьПредставлениеКлюча(ПКО, Объект,ТекущиеДанные) Экспорт
	Если вОписаниеТиповПересекаются(СоздатьОписаниеТиповНаОсновеКолекции(ТипЗнч(Объект)),ПараметрыОкружения.ВсеОбъекты) Тогда
		Представление		= ЗначениеВСтрокуВнутр(Объект.Ссылка);
	Иначе
		Представление		= ЗначениеВСтрокуВнутр(Объект);
	КонецЕсли;	

	Для Каждого Элемент ИЗ ПКО.КлючевыеКолонки Цикл
		Если (Не ТекущиеДанные = Неопределено) 
			И (Не ТекущиеДанные.Владелец().Колонки.Найти(Элемент.Значение) = Неопределено) Тогда
			Представление	= Представление + ЗначениеВСтрокуВнутр(ТекущиеДанные[Элемент.Значение]);	
		КонецЕсли;	
	КонецЦикла;	
	Возврат Представление;
КонецФункции	
	
//Создает новый объект для ПКО
//Параметры:
//	ПКО	- <СтрокаДереваЗначений>
//  Параметры		-<Структура>. Структура доступных параметров
//  Объект			-<Произвльный>. Обрабатываемый объект, тип в соотвествии со свойствами обработки
//	ТекущиеДанные	-<СтрокаТаблицыЗначений>. Строка таблицы результатов запроса.
//	СтрокаТЧ		-<СтрокаТабличнойЧасти>. Новая строка табличной части
//Возвращаемое значение.
//	<ПроизвольноеЗначение>. Созданный объект
Функция вСоздатьНовыйОбъект(ПКО, Параметры, Объект, ТекущиеДанные, СтрокаТЧ, Запись) Экспорт
	СобытиеОтладки=Формы.Отладка.ДобавитьСобытие("Создание нового объекта(набора записей) ПКО """+ПКО.Представление+"""","Конструктор");
	Попытка
		НовыйОбъет 	= Неопределено;
		ИмяОбъекта	= "";
		//определим имя коллекции
		Для Каждого Элемент ИЗ СтрокуВСписок(ПКО.Имя,".") Цикл
			ИмяОбъекта	=Элемент.Значение;
		КонецЦикла;
		Если Не ПустаяСтрока(ИмяОбъекта) Тогда 
			Если 	вОписаниеТиповПересекаются(ПКО.Тип,Справочники.ТипВсеСсылки())
				ИЛИ вОписаниеТиповПересекаются(ПКО.Тип,ПланыВидовХарактеристик.ТипВсеСсылки()) Тогда	
				//Это справочник, ПВХ перед созданием нужно определить является ли он группой
				ПКС_Группа 	=  ПКО.Свойства.НайтиСтроки(Новый Структура("Использовать,ИмяПараметра",Истина,"ЭтоГруппа"));
				ЭтоГруппа	= Ложь;
				Если ПКС_Группа.Количество()>0 Тогда
					ЭтоГруппа = зПолучитьЗначениеПКС(ЭтаФорма, ПКС_Группа[0],Параметры, Объект, ТекущиеДанные, СтрокаТЧ, Запись);		
				КонецЕсли;
				Если 	вОписаниеТиповПересекаются(ПКО.Тип,Справочники.ТипВсеСсылки()) Тогда
					НовыйОбъект	= ?(ЭтоГруппа,Справочники[ИмяОбъекта].СоздатьГруппу(),Справочники[ИмяОбъекта].СоздатьЭлемент());
				Иначе
					НовыйОбъект	= ?(ЭтоГруппа,ПланыВидовХарактеристик[ИмяОбъекта].СоздатьГруппу(),ПланыВидовХарактеристик[ИмяОбъекта].СоздатьЭлемент());
				КонецЕсли;	
			ИначеЕсли вОписаниеТиповПересекаются(ПКО.Тип,Документы.ТипВсеСсылки()) Тогда
				НовыйОбъект = Документы[ИмяОбъекта].СоздатьДокумент();
            ИначеЕсли вОписаниеТиповПересекаются(ПКО.Тип,ПланыОбмена.ТипВсеСсылки()) Тогда
				НовыйОбъект = ПланыОбмена[ИмяОбъекта].СоздатьУзел();
		 	ИначеЕсли вОписаниеТиповПересекаются(ПКО.Тип,ПланыСчетов.ТипВсеСсылки()) Тогда
				НовыйОбъект = ПланыСчетов[ИмяОбъекта].СоздатьСчет();
			ИначеЕсли вОписаниеТиповПересекаются(ПКО.Тип,ПланыВидовРасчета.ТипВсеСсылки()) Тогда
				НовыйОбъект = ПланыВидовРасчета[ИмяОбъекта].СоздатьВидРасчета();
			ИначеЕсли вОписаниеТиповПересекаются(ПКО.Тип,БизнесПроцессы.ТипВсеСсылки()) Тогда
				НовыйОбъект = БизнесПроцессы[ИмяОбъекта].СоздатьБизнесПроцесс();
			ИначеЕсли вОписаниеТиповПересекаются(ПКО.Тип,Задачи.ТипВсеСсылки()) Тогда
				НовыйОбъект = Задачи[ИмяОбъекта].СоздатьЗадачу();
			Иначе	
				//Наборы записей
				Если ПКО.Родитель.Представление = "РегистрыСведений" Тогда
                	НовыйОбъект = РегистрыСведений[ИмяОбъекта].СоздатьНаборЗаписей();
				ИначеЕсли 	ПКО.Родитель.Представление = "РегистрыНакопления" Тогда
					НовыйОбъект = РегистрыНакопления[ИмяОбъекта].СоздатьНаборЗаписей();
				ИначеЕсли 	ПКО.Родитель.Представление = "РегистрыБухгалтерии" Тогда
					НовыйОбъект = РегистрыБухгалтерии[ИмяОбъекта].СоздатьНаборЗаписей();
				ИначеЕсли 	ПКО.Родитель.Представление = "РегистрыРасчета" Тогда
					НовыйОбъект = РегистрыРасчета[ИмяОбъекта].СоздатьНаборЗаписей();
				КонецЕсли;
				//НовыйОбъект.Добавить(); //добавляем запись в набор
	        КонецЕсли;
		КонецЕсли;	
	Исключение
		Формы.Отладка.ЗавершитьСобытие(СобытиеОтладки,"ОченьВажное",ИнформацияОбОшибке().Описание);
		ВызватьИсключение "Не удалось создать новый объект(набор записей)";
	КонецПопытки;
	Формы.Отладка.ЗавершитьСобытие(СобытиеОтладки);
	Возврат НовыйОбъект; 
КонецФункции


//Процедура создает при необходимости новый код, номер для объекта
//Параметры:
//	ПКО		- <СтрокаДереваЗначений>. Строка правила конвертации объекта
//	Объект	- <Произвольный>. Изменяемый объект
//
Процедура ПровестиГенерациюКодаНомераПриНеобходимости(ПКО,Объект) Экспорт
	
	Если Не ПКО.ГенерироватьНовыйНомерИлиКодЕслиНеУказан Тогда
		//Если номер не нужно генерировать, 
		//или не в режиме обмена данными то ничего не нужно делать... платформа сама все сгенерирует
		Возврат;
	КонецЕсли;
	
	// по типу документа смотрим заполнен кол или номер
	Если вОписаниеТиповПересекаются(ПКО.Тип,Документы.ТипВсеСсылки())
		ИЛИ вОписаниеТиповПересекаются(ПКО.Тип,БизнесПроцессы.ТипВсеСсылки())
		ИЛИ вОписаниеТиповПересекаются(ПКО.Тип,Задачи.ТипВсеСсылки()) Тогда
		
		Если НЕ ЗначениеЗаполнено(Объект.Номер) Тогда
			
			Объект.УстановитьНовыйНомер();
			
		КонецЕсли;
		
	ИначеЕсли вОписаниеТиповПересекаются(ПКО.Тип,Справочники.ТипВсеСсылки())
		ИЛИ вОписаниеТиповПересекаются(ПКО.Тип,ПланыВидовХарактеристик.ТипВсеСсылки())
		ИЛИ вОписаниеТиповПересекаются(ПКО.Тип,ПланыОбмена.ТипВсеСсылки()) Тогда
		
		Если НЕ ЗначениеЗаполнено(Объект.Код) Тогда
			
			Объект.УстановитьНовыйКод();
			
		КонецЕсли;	
		
	КонецЕсли;
	
КонецПроцедуры

//Процедура выполняет поиск строк возможной коллекции объекта. 
//К коллекции будут отностися все отмеченные строки табличной части, у которых значение объекта одинаково
//Параметры
//	ТекущиеДанные	-<СтрокаТаблицыЗначений>. Строка таблицы результатов запроса.
Процедура вПолучитьСтрокиКоллекции(ТекущиеДанные) Экспорт
	Если мСтрокиКоллекции = Неопределено Тогда
		Если ТекущаяНастройка.Свойство("Позиция") Тогда
			ИмяКолонки			= ТекущаяНастройка.Позиция.Колонка.Имя;
			мСтрокиКоллекции	= ПолучитьСтроки(ТекущиеДанные.Владелец(),Истина,,,Новый Структура(ИмяКолонки,ТекущиеДанные[ИмяКолонки]));
		КонецЕсли;	
	КонецЕсли;	
КонецПроцедуры	

//Функция определяет режим записи объекта 
//Параметры:
//	ПКО		- <СтрокаДереваЗначений>. Строка правила конвертации объекта
//Возвращаемое значение:
//	Булево признак незавимого режима записи
Функция вРежимЗаписиНезависимый(ПКО) Экспорт
	Если ПКО.Уровень()=1 И ПКО.Тип.Типы().Количество()>0 Тогда
		ЭтоСсылочныйТип		= вОписаниеТиповПересекаются(ПКО.Тип,ПараметрыОкружения.ВсеСсылки);
		Если ЭтоСсылочныйТип Тогда
			Возврат Истина;
		Иначе
			Если ПКО.Родитель.Представление = "РегистрыСведений" Тогда
				МД = Метаданные.НайтиПоТипу(ПКО.Тип.Типы()[0]);
				Если Не Мд	= Неопределено Тогда
					Возврат (МД.РежимЗаписи	= Метаданные.СвойстваОбъектов.РежимЗаписиРегистра.Независимый);
				Иначе
					Возврат Ложь;
				КонецЕсли;
			Иначе
				Возврат Ложь;
			КонецЕсли;	
		КонецЕсли;	
	Иначе
		Возврат Ложь;
	КонецЕсли;	
КонецФункции

//Процедура устанавливает обязательные отборы для свойств объекта
//Параметры:
//	ПКО		- <СтрокаДереваЗначений>. Строка правила конвертации объекта
//
Процедура вУстановитьОбязательныеОтборы(ПКО)
	МассивСвойств  = Новый Массив;
	ЭтоСсылочныйТип		= вОписаниеТиповПересекаются(ПКО.Тип,ПараметрыОкружения.ВсеСсылки);
	//для ригистров установим отбор по регистратору, это объязательный отбор для наборов
	Если Не ЭтоСсылочныйТип Тогда
		Если вРежимЗаписиНезависимый(ПКО) Тогда
			Возврат;
			МД = Метаданные.НайтиПоТипу(ПКО.Тип.Типы()[0]);
			Если Не МД	= Неопределено Тогда
				Для Каждого Измерение ИЗ МД.Измерения Цикл
					МассивСвойств.Добавить(Измерение.Имя);		
				КонецЦикла;	
			КонецЕсли;	
		Иначе	
			МассивСвойств.Добавить("Регистратор");	
		КонецЕсли;	
	КонецЕсли;
	//установим пометки
	Для Каждого Свойство ИЗ МассивСвойств Цикл
    	СтрокаСвойства	= ПКО.Свойства.Найти(Свойство,"ИмяПараметра");
		Если Не СтрокаСвойства	= Неопределено Тогда
			СтрокаСвойства.Поиск = Истина;	
		КонецЕсли;
	КонецЦикла;	
КонецПроцедуры	

//Процедура устанавливает обязательные свойства, без которых неполучится создть объект (набор записей)
//Параметры:
//	ПКО		- <СтрокаДереваЗначений>. Строка правила конвертации объекта
//
Процедура вУстановитьОбязательныеСвойства(ПКО)
	МассивСвойств  = Новый Массив;
	ЭтоСсылочныйТип		= вОписаниеТиповПересекаются(ПКО.Тип,ПараметрыОкружения.ВсеСсылки);
	Если ЭтоСсылочныйТип Тогда
		Если Документы.ТипВсеСсылки().СодержитТип(ПКО.Тип.Типы()[0]) Тогда
			МассивСвойств.Добавить("Дата");
		КонецЕсли;	
	Иначе
		//Это регистр
		МД = Метаданные.НайтиПоТипу(ПКО.Тип.Типы()[0]);
		Если Не МД	= Неопределено Тогда
			Для Каждого Измерение ИЗ МД.Измерения Цикл
				Если Измерение.ЗапрещатьНезаполненныеЗначения Тогда
					МассивСвойств.Добавить(Измерение.Имя);
				КонецЕсли;	
			КонецЦикла;	
		КонецЕсли;
		Если Не вРежимЗаписиНезависимый(ПКО) Тогда
			МассивСвойств.Добавить("Регистратор");
			Если вОписаниеТиповПересекаются(ПКО.Тип,ПараметрыОкружения.РегистрыНакопления) Тогда
				МассивСвойств.Добавить("Период");
			КонецЕсли;	
		Иначе
			Если Не МД	= Неопределено Тогда
				Если Не МД.ПериодичностьРегистраСведений = Метаданные.СвойстваОбъектов.ПериодичностьРегистраСведений.Непериодический Тогда
					МассивСвойств.Добавить("Период");
				КонецЕсли;	
			КонецЕсли;	
		КонецЕсли;	
	КонецЕсли;
	
	//установим пометки
	Для Каждого Свойство ИЗ МассивСвойств Цикл
    	СтрокаСвойства	= ПКО.Свойства.Найти(Свойство,"ИмяПараметра");
		Если Не СтрокаСвойства	= Неопределено Тогда
			СтрокаСвойства.Использовать = Истина;	
		КонецЕсли;
	КонецЦикла;	
КонецПроцедуры

//Процедура проверят наличие ключа
//
Процедура ПроверитьКлюч(Элемент = Неопределено)
	Если Не GetHASPObject() = Неопределено Тогда
		ЭлементыФормы.ПанельЗащиты.Видимость							= Ложь;
	Иначе
		ЭлементыФормы.ПанельЗащиты.Видимость							= Истина;
	КонецЕсли;	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ, ВЫЗЫВАЕМЫЕ ИЗ ЭЛЕМЕНТОВ ФОРМЫ

//Открываем форму выбора типа
//
Процедура ОбъектыОбработкиНачалоВыбора(Элемент, СтандартнаяОбработка)
	СтруктураДопПараметров = ВладелецФормы.вСформироватьСтруктуруДляФормыВыбораТипа(Элемент,ПолучитьСвойстваОбработки(),ТекущаяНастройка);
	ФормаВыбораТипа.НачалоВыбора(Элемент, СтандартнаяОбработка, СтруктураДопПараметров);
	ОбъектыОбработкиПриИзменении(Элемент);
КонецПроцедуры

//Вызывается при изменеии значения объекта
//
Процедура ОбъектыОбработкиПриИзменении(Элемент)
	Если ТекущаяНастройка.Свойство("Позиция") Тогда
		//проверим соотвестиве введеного значению текущей позиции
		НоваяПозиция	= ВладелецФормы.вСкорректироватьКолонкуПозиции(ТекущаяНастройка.Позиция,ЗначениеПараметра);
		Если НоваяПозиция=Неопределено Тогда
			Предупреждение("Введена неверная переменная",20);
		ИначеЕсли Не НоваяПозиция.Колонка = ТекущаяНастройка.Позиция.Колонка Тогда
			//выбрана новая позиция отличная от текущей
			СвойстваОбработки	= ПолучитьСвойстваОбработки();
			Если ВладелецФормы.вПозицияДоступнаДляОбработки(НоваяПозиция,СвойстваОбработки.Типы) Тогда
				ИмяНастройки=ТекущаяНастройка.Позиция.Строка[ТекущаяНастройка.Позиция.Колонка.Данные];
				ВладелецФормы.вИзменитьПозициюОбработки(ИмяНастройки,НоваяПозиция,ТекущаяНастройка.Позиция);
				ТекущаяНастройка.Вставить("Позиция",НоваяПозиция);
			Иначе
				Предупреждение("Данная обработка не может использоваться в текущей позиции(расположении).
				|Выберите другую ""колонку"".",20);
			КонецЕсли;	
		КонецЕсли;
		вЗадатьИмяпеременнойНаОсновеПозиции();
	КонецЕсли;
	СформироватьКартинкуДляВыражения(Элемент);
КонецПроцедуры

//Настройку в корзину
//
Процедура ОбъектыОбработкиОчистка(Элемент, СтандартнаяОбработка)
	ФормаВыбораТипа.Очистка(Элемент, СтандартнаяОбработка,Новый Структура("ТекущиеДанные",Новый Структура("ЭтоВыражение,ЗначениеПараметра",(ТипЗнч(Элемент.Значение)=Тип("Строка")),ЗначениеПараметра)));
	//Очистим позицию
	Если ТекущаяНастройка.Свойство("Позиция") Тогда
		ВладелецФормы.вОчиститьПозициюОбработки(ТекущаяНастройка.Позиция);
		ТекущаяНастройка.Удалить("Позиция");
	КонецЕсли;
	СформироватьКартинкуДляВыражения(Элемент);
КонецПроцедуры

//Открываем значение
//
Процедура ОбъектыОбработкиОткрытие(Элемент, СтандартнаяОбработка)
	СтруктураДопПараметров = ВладелецФормы.вСформироватьСтруктуруДляФормыВыбораТипа(Элемент,ПолучитьСвойстваОбработки(),ТекущаяНастройка);
	ФормаВыбораТипа.Открытие(Элемент, СтандартнаяОбработка, СтруктураДопПараметров);
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ ТАБЛИЧНОГО ПОЛЯ ТАБЛИЧНОГО ПОЛЯ ДЕРЕВО

//Загружаем свойства
//
Процедура ДеревоПриАктивизацииСтроки(Элемент)
	ТекущиеДанные					= Элемент.ТекущиеДанные;
	ЭлементыФормы.Панель.Видимость	= ТекущиеДанные.ЭтоТаблица;
    ЭлементыФормы.Надпись.Видимость	= Истина;
	ЭлементыФормы.Надпись1.Видимость= Ложь;
	ЭтоСсылочныйТип					= вОписаниеТиповПересекаются(ТекущиеДанные.Тип,ПараметрыОкружения.ВсеСсылки);
	
	Если ЭлементыФормы.Панель.Видимость Тогда
		Если ТекущиеДанные.Уровень()=1 Тогда
			Если ТекущиеДанные.Тип.Типы().Количество() = 0 Тогда
				ЭлементыФормы.Панель.Видимость	= Ложь;
				ЭлементыФормы.Надпись.Видимость	= Ложь;
				ЭлементыФормы.Надпись1.Видимость= Истина;
				Возврат;
			КонецЕсли;
			мМетаданные	= Метаданные.НайтиПоТипу(ТекущиеДанные.Тип.Типы()[0]);	
		Иначе	
			мМетаданные	= Неопределено;
		КонецЕсли;	
		Если ТекущиеДанные.Свойства=Неопределено Тогда
			ТекущиеДанные.Свойства	= ТаблицаСвойств.Скопировать();
		КонецЕсли;
		Свойства				= ТекущиеДанные.Свойства;
        Если Свойства.Количество()=0 Тогда
			вЗагрузитьСвойства(ТекущиеДанные);	
		КонецЕсли;
		
		вУстановитьОбязательныеОтборы(ТекущиеДанные);
	КонецЕсли;
	ЭлементыФормы.Панель.Страницы[1].Видимость 		=  (ТекущиеДанные.Уровень()=1);
	ЭлементыФормы.Панель.Страницы[2].Видимость 		=  (ТекущиеДанные.Уровень()=1);
	
	НезависимыйРежимЗаписи							=  вРежимЗаписиНезависимый(ТекущиеДанные);
	ЭлементыФормы.Свойства.Колонки.Поиск.Видимость	=  вРежимЗаписиНезависимый(ТекущиеДанные);  //для незавимых РС нужно оставить возможность выбирать, оставлять для ссылок не cool (ЭтоСсылочныйТип)
	Если НезависимыйРежимЗаписи Тогда
		ЭлементыФормы.НеСоздаватьОбъектВПриемникеЕслиНеНайденПоПолямПоиска.Заголовок = "Не создавать новый объект если он НЕ найден";		
	Иначе
		ЭлементыФормы.НеСоздаватьОбъектВПриемникеЕслиНеНайденПоПолямПоиска.Заголовок = "Не создавать новый объект(запись)";		
	КонецЕсли;	

	//уберем доступность других элементов формы на закладке настройки
	ЭлементыФормы.ГенерироватьНовыйНомерИлиКодЕслиНеУказан.Доступность 	= ЭтоСсылочныйТип;
	ЭлементыФормы.СопоставлятьОбъекты.Доступность 						= ЭтоСсылочныйТип;
	ЭлементыФормы.ОткрытьТаблицуСопоставления.Доступность 				= ЭтоСсылочныйТип;
	ЭлементыФормы.ПоказатьСсылкиНаПКО.Доступность 						= ЭтоСсылочныйТип;
	ЭлементыФормы.ЗагружатьТолькоПоСсылке.Доступность 					= ЭтоСсылочныйТип;
	ЭлементыФормы.ИнфНадпись.Доступность 								= ЭтоСсылочныйТип;
	//ЭлементыФормы.НеСоздаватьОбъектВПриемникеЕслиНеНайденПоПолямПоиска.Доступность	= ЭлементыФормы.Свойства.Колонки.Поиск.Видимость;
КонецПроцедуры

//Выделим не использованные строки
//
Процедура ДеревоПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	Если Не ДанныеСтроки.Использовать Тогда
		ОформлениеСтроки.ЦветТекста	= Новый Цвет(124,119,108);	
	КонецЕсли;
КонецПроцедуры

//Разрешим изменять только строки 1 уровня
//
Процедура ДеревоПередНачаломИзменения(Элемент, Отказ)
	Если Не Элемент.ТекущиеДанные.Уровень() = 1  Тогда
		Отказ = Истина;
	Иначе
		мИмяПКО = Элемент.ТекущиеДанные.Представление;
	КонецЕсли;
КонецПроцедуры

//Добавлем только на 1 уровень
//
Процедура ДеревоПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель)
	Если Родитель = Неопределено ИЛИ Не Родитель.Уровень() = 0 Тогда 
		Отказ =Истина;
	КонецЕсли;	
КонецПроцедуры

//Разрешаем удалять только с 1 уровня
//
Процедура ДеревоПередУдалением(Элемент, Отказ)
	Отказ = (Элемент.ТекущиеДанные.Уровень()<>1);
	Если Не Отказ Тогда
		СписокСсылок	= вПолучитьСписокСсылокНаПКО(Элемент.ТекущиеДанные.Представление);
		Если СписокСсылок.Количество()>0 Тогда
			Если Вопрос("На данное ПКО имеются ссылки. Ссылки будут очищены. 
				|Продолжить?",РежимДиалогаВопрос.ОКОтмена)= КодВозвратаДиалога.ОК Тогда
				Для Каждого Ссылка ИЗ СписокСсылок Цикл
					Строки = Ссылка.Значение.Свойства.НайтиСтроки(Новый Структура("ПКО",Элемент.ТекущиеДанные.Представление));
					Для Каждого Строка ИЗ Строки Цикл
						Строка.ПКО	= "";	
					КонецЦикла;	
				КонецЦикла;	
			Иначе
				Отказ = Истина;
			КонецЕсли;	
		КонецЕсли;		
	КонецЕсли;	
КонецПроцедуры

//Откроем окно диалого для выбора добавляемого типа
//
Процедура ДеревоПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если НоваяСтрока И Не Копирование Тогда
		//свормируем список типов и выберем из него нужное занчение
		СписокТипов	= Новый СписокЗначений;
		Если Элемент.ТекущиеДанные.Родитель.Тип.Типы().Количество()>0 Тогда
			//получим картинку
			ПервыйТип	= Элемент.ТекущиеДанные.Родитель.Тип.Типы()[0];
			Структура	= Новый Структура("Значение,Картинка",СоздатьОписаниеТиповНаОсновеКолекции(ПервыйТип), Новый Картинка);
			СформироватьКартинкуНаОсновеТипов(Структура);
		КонецЕсли;	
		Для Каждого Тип ИЗ Элемент.ТекущиеДанные.Родитель.Тип.Типы() Цикл
			мОбъект=Метаданные.НайтиПоТипу(Тип);
			Если Не мОбъект=Неопределено Тогда
				СписокТипов.Добавить(Тип,мОбъект.Имя,,Структура.Картинка);
			КонецЕсли;	
		КонецЦикла;
		СписокТипов.СортироватьПоПредставлению(НаправлениеСортировки.Возр);
		ВыбранныйЭлемент = СписокТипов.ВыбратьЭлемент("Выберите нужный тип данных");
		Если Не ВыбранныйЭлемент	= Неопределено Тогда
			вЗаполнитьНовоеПКО(Элемент.ТекущиеДанные,ВыбранныйЭлемент.Значение);	
		Иначе
			Элемент.ТекущиеДанные.Родитель.Строки.Удалить(Элемент.ТекущиеДанные);
		КонецЕсли;	
	КонецЕсли;
	Если Копирование Тогда
		Элемент.ТекущиеДанные.Свойства=ЗначениеИзСтрокиВнутр(ЗначениеВстрокуВнутр(Элемент.ТекущиеДанные.Свойства));	
	КонецЕсли;	
КонецПроцедуры

//Проверим имя на уникальность
//
Процедура ДеревоПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	Если Не ОтменаРедактирования Тогда
		Если Не ВладелецФормы.вИмяУникально(Дерево,"Представление",Элемент.ТекущиеДанные.Представление) Тогда
			Предупреждение("Имя ПКО не уникально!",20);
			Отказ	= Истина;
			Если Не НоваяСтрока Тогда
				Элемент.ТекущиеДанные.Представление	= мИмяПКО;
			КонецЕсли;
		Иначе
			Если Не НоваяСтрока Тогда
				//изменим имя у выбранных настроек
				СписокСсылок	= вПолучитьСписокСсылокНаПКО(мИмяПКО);
				Для Каждого Ссылка ИЗ СписокСсылок Цикл
					Строки = Ссылка.Значение.Свойства.НайтиСтроки(Новый Структура("ПКО",мИмяПКО));
					Для Каждого Строка ИЗ Строки Цикл
						Строка.ПКО	= Элемент.ТекущиеДанные.Представление;	
					КонецЦикла;	
				КонецЦикла;	
			КонецЕсли;	
		КонецЕсли;	
	КонецЕсли;	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ ТАБЛИЧНОГО ПОЛЯ ТАБЛИЧНОГО ПОЛЯ СВОЙСТВА

// Обработчик изменения флажка "ЭтоВыражение"
//
Процедура ПараметрыПриИзмененииФлажка(Элемент, Колонка)
	Если Колонка.ДанныеФлажка= "Использовать" Тогда
		СтрокаДЗ	= ЭлементыФормы.Дерево.ТекущиеДанные;
		вОбновитьПризнакИспользования(СтрокаДЗ);
		Если СтрокаДЗ.Уровень()=1 И ЭлементыФормы.Свойства.ТекущиеДанные.Использовать Тогда
			вУстановитьОбязательныеСвойства(СтрокаДЗ);
		КонецЕсли;	
		Пока Не СтрокаДЗ.Родитель=Неопределено Цикл
			СтрокаДЗ=СтрокаДЗ.Родитель;
			вОбновитьПризнакИспользования(СтрокаДЗ);
		КонецЦикла;	
	Иначе	
		ФормаВыбораТипа.ПриИзмененииФлажка(Элемент, Колонка, вСформироватьСтруктуруДляФормыВыбораТипа());
	КонецЕсли;	
КонецПроцедуры // ПараметрыПриИзмененииФлажка()

Процедура ПараметрыПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	Структура=Новый Структура("Значение,Картинка",ДанныеСтроки.ОграничениеТипа, Новый Картинка);
	СформироватьКартинкуНаОсновеТипов(Структура);
	ОформлениеСтроки.Ячейки.ИмяПараметра.Картинка					= Структура.Картинка;
	ОформлениеСтроки.Ячейки.ИмяПараметра.ОтображатьКартинку			= Истина;
	Если ДанныеСтроки.ЭтоВыражение Тогда
		СформироватьКартинкуДляВыражения(ОформлениеСтроки.Ячейки.ЗначениеПараметра);
		ОформлениеСтроки.Ячейки.ЗначениеПараметра.ОтображатьКартинку	= Истина;
	КонецЕсли;	
	Если Не ДанныеСтроки.Использовать Тогда
		ОформлениеСтроки.ЦветТекста	= Новый Цвет(124,119,108);	
	КонецЕсли;
	Если ДанныеСтроки.Поиск Тогда
		ОформлениеСтроки.Шрифт = Новый Шрифт(ОформлениеСтроки.Шрифт,,,Истина);			
	КонецЕсли;
	ТекущиеДанные = ЭлементыФормы.Дерево.ТекущиеДанные;
	Если Не ТекущиеДанные = Неопределено И ТекущиеДанные.Уровень()=1 Тогда
		Если вОписаниеТиповПересекаются(ПараметрыОкружения.ВсеНаборыЗаписей,ТекущиеДанные.Тип)Тогда
			//Для регистров искать разрещим только по измерениям
			Если Не мМетаданные	= Неопределено Тогда
				ОформлениеСтроки.Ячейки.Поиск.ОтображатьФлажок	= (мМетаданные.Измерения.Найти(ДанныеСтроки.ИмяПараметра)	<> Неопределено); 	
			КонецЕсли;	
		КонецЕсли;
	КонецЕсли;	
КонецПроцедуры

Процедура ПараметрыЗначениеПараметраНачалоВыбора(Элемент, СтандартнаяОбработка)
	ФормаВыбораТипа.НачалоВыбора(Элемент, СтандартнаяОбработка, вСформироватьСтруктуруДляФормыВыбораТипа());
КонецПроцедуры

Процедура ПараметрыЗначениеПараметраОткрытие(Элемент, СтандартнаяОбработка)
	ФормаВыбораТипа.Открытие(Элемент, СтандартнаяОбработка,	вСформироватьСтруктуруДляФормыВыбораТипа());
КонецПроцедуры

Процедура ПараметрыЗначениеПараметраОчистка(Элемент, СтандартнаяОбработка)
	ФормаВыбораТипа.Очистка(Элемент, СтандартнаяОбработка,Новый Структура("ТекущиеДанные",ЭлементыФормы.Свойства.ТекущиеДанные));
КонецПроцедуры

//По ограничениею типов подберем нужное ПКО
//
Процедура СвойстваПКОНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	ОграничениеТипа	= ЭлементыФормы.Свойства.ТекущиеДанные.ОграничениеТипа;
	Если вОписаниеТиповПересекаются(ПараметрыОкружения.ВсеСсылки,ОграничениеТипа) Тогда
		СтандартнаяОбработка = Ложь;
		СписокВыбора = Новый СписокЗначений;
		СтрокиТаблиц = Дерево.Строки.НайтиСтроки(Новый Структура("ЭтоТаблица",Истина),Истина);
		Для Каждого СтрокаТаблица ИЗ СтрокиТаблиц Цикл
			Если вОписаниеТиповПересекаются(ОграничениеТипа,СтрокаТаблица.Тип) Тогда
				Структура=Новый Структура("Значение,Картинка",СтрокаТаблица.Тип, Новый Картинка);
				СформироватьКартинкуНаОсновеТипов(Структура);
				СписокВыбора.Добавить(СтрокаТаблица.Представление,СтрокаТаблица.Представление,,Структура.Картинка);
			КонецЕсли;	
		КонецЦикла;
		Если СписокВыбора.Количество()>0 Тогда
			Действие = "Создать новое ПКО";
			//Добавим возможность создавать новое правило даже если уже есть такого типа
			СписокВыбора.Добавить(Действие,Действие,,ПолучитьОбщуюКартинку("Новый"));
			
			Элемент.Значение = ВыбратьИзСписка(СписокВыбора,Элемент);
			Для Каждого Строка Из Дерево.Строки Цикл
				Если вОписаниеТиповПересекаются(ОграничениеТипа,Строка.Тип) Тогда
					Если Элемент.Значение = Действие Тогда
						НовоеПКО =  Строка.Строки.Добавить();
						вЗаполнитьНовоеПКО(НовоеПКО,ОграничениеТипа.Типы()[0]);
						НовоеПКО.Представление  = НовоеПКО.Представление+"_"+ЭлементыФормы.Свойства.ТекущиеДанные.ИмяПараметра;
						Элемент.Значение 		= НовоеПКО.Представление;
						Прервать;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;	
		ИначеЕсли ОграничениеТипа.Типы().Количество()=1 Тогда
			Если Вопрос("Создать новое Правило Конвертации Объекта?",РежимДиалогаВопрос.ДаНет)=КодВозвратаДиалога.Да Тогда
				//Вначале определим родителя
				Для Каждого Строка Из Дерево.Строки Цикл
					Если вОписаниеТиповПересекаются(ОграничениеТипа,Строка.Тип) Тогда
						НовоеПКО =  Строка.Строки.Добавить();
						вЗаполнитьНовоеПКО(НовоеПКО,ОграничениеТипа.Типы()[0]);
						Элемент.Значение = НовоеПКО.Представление;
						Прервать;
					КонецЕсли;	
				КонецЦикла;	
			КонецЕсли;
		Иначе
			Предупреждение("Сначала создаете ПКО, потом его можно будет выбрать",10);
		КонецЕсли;	
	КонецЕсли;		
КонецПроцедуры

//Найти ПКО в дереве
//
Процедура СвойстваПКООткрытие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка	= Ложь;
	Строка = Дерево.Строки.Найти(Элемент.Значение,"Представление",Истина);
	Если Не Строка	= Неопределено Тогда
		ЭлементыФормы.Дерево.ТекущаяСтрока = Строка;	
	КонецЕсли;	
КонецПроцедуры


///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

Процедура ПриОткрытии()
	вЗадатьИмяпеременнойНаОсновеПозиции();
	СформироватьКартинкуДляВыражения(ЭлементыФормы.ОбъектыОбработки);
	ЗагрузитьНастройку();
	вУстановитьДостпностьЭлементовУправления();
	Если Дерево.Строки.Количество()=0 Тогда
		вЗагрузитьДерево();
		
	КонецЕсли;
	Для Каждого Строка ИЗ Дерево.Строки Цикл
		ЭлементыФормы.Дерево.Развернуть(Строка);		
	КонецЦикла;
	ПроверитьКлюч();
КонецПроцедуры

Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	Если ЭлементыФормы.КоманднаяПанель.Кнопки.Сохранить.Доступность Тогда
		Если вСохранитьНастройку(Истина)=Неопределено Тогда
			Отказ = Истина;
		КонецЕсли;
	ИначеЕсли Модифицированность Тогда
		Если Не Вопрос("Закрыть обработку без сохранения?",РежимДиалогаВопрос.ОКОтмена)=КодВозвратаДиалога.ОК Тогда
			Отказ = Истина;
		КонецЕсли;	
	КонецЕсли;	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

//Обновляет дерево метаданных
//
Процедура КоманднаяПанельОбновить(Кнопка)
	вЗагрузитьДерево();
КонецПроцедуры

Процедура КоманднаяПанельСохранить(Кнопка)
	вСохранитьНастройку();
КонецПроцедуры

Процедура КоманднаяПанельВыполнить(Кнопка)
	//групповая обработка
	Если ТекущаяНастройка.Свойство("Позиция") Тогда
		Если вСохранитьНастройку(Истина)=Истина Тогда
			//выполнение текущей обработки и всех вложенных
			ВладелецФормы.ТаблицаВыбранныхОбработок.Очистить();
			ВладелецФормы.вДобавитьОбработкуВТаблицу(ТекущаяНастройка.Позиция);
			ВладелецФормы.ВыполнитьОбработки();
		КонецЕсли;	
	Иначе
		//обработка явно выбранных объектов
		Если Вопрос("Выполнить обработку для выбранного(ых) объекта",РежимДиалогаВопрос.ОКОтмена)=КодВозвратаДиалога.ОК Тогда
			//Сформируем список вложенных
			СписокВложенных = Владелецформы.вПолучитьСписокВложенныхОбработок(ПолучитьСвойстваОбработки().РекомендуемыеВложенные);
			Если ВыбратьЭлементы(СписокВложенных,"Выложенные обработки, будут выполнятся для каждого значения, возвращаемого текущей обработкой(изменяемое значение)") Тогда
				//Выполним 
				Параметры		= ВладелецФормы.вПолучитьСтруктуруПараметров();
				Для Каждого Объект ИЗ вЗначениеВКоллекцию(вПолучитьЯвныйОбъектОбработки(Параметры)) Цикл
					ВозврЗначения	= ВыполнитьОбработку(Параметры,Объект);
					//выполним вложенные обработки если их выбрали
					Для Каждого  ВозврЗначение ИЗ ВозврЗначения Цикл 
						Для Каждого ОписаниеОбработки ИЗ СписокВложенных Цикл
							Если ОписаниеОбработки.Пометка Тогда
								ОписаниеОбработки.Значение.ВыполнитьОбработку(Параметры,ВозврЗначение);			
							КонецЕсли;	
						КонецЦикла;
					КонецЦикла;	
				КонецЦикла;
				Предупреждение("Выполнение обработки заверщено",30,"Enterprise Integrator");
			КонецЕсли;	
		КонецЕсли;	
	КонецЕсли;	
КонецПроцедуры

//Формирует список сылок на текущее ПКО
//
Процедура ПоказатьСсылкиНаПКОНажатие(Элемент)
	СписокСсылок	= вПолучитьСписокСсылокНаПКО(ЭлементыФормы.Дерево.ТекущиеДанные.Представление);
	Ссылка	= ВыбратьИзМеню(СписокСсылок,Элемент);
	Если Не Ссылка	= Неопределено Тогда
		ЭлементыФормы.Дерево.ТекущаяСтрока	= Ссылка.Значение;		
	КонецЕсли;	
КонецПроцедуры

//Формирует выражение и заполняем им алгоритм "Поля поиска"
//
Процедура СформироватьВыражениеНажатие(Элемент)
	ИспользуютсяВложенныеПКО 	= Ложь;
	стрДополнение 				= "";
	ПКО 						= ЭлементыФормы.Дерево.ТекущиеДанные;
	
	СтрокиПоиска = ПКО.Свойства.НайтиСтроки(Новый Структура("Использовать,Поиск",Истина,Истина));
	Для Каждого ПКС ИЗ  СтрокиПоиска Цикл
		Если вНеобходимоОбращениеКПКО(ПКС) Тогда
			ИспользуютсяВложенныеПКО =  Истина;
			стрДополнение = "Свойство <"+ПКС.ИмяПараметра+"> ПКО """+ПКС.ПКО+"""";
			Прервать;
		КонецЕсли;	
	КонецЦикла;
	
	Если Не ИспользуютсяВложенныеПКО Тогда
		ЭлементыФормы.ПоляПоиска.УстановитьТекст(зСформироватьВыражениеПоискаОбъекта(ЭтаФорма,ПКО));
		ЭлементыФормы.Панель.ТекущаяСтраница = ЭлементыФормы.Панель.Страницы[2];
	Иначе
		Предупреждение("Эта операция возможна только для тех ПКО, у которых при поиске не используются вложенные ПКО
		|	- "+стрДополнение,20,"Загрузка данных");
	КонецЕсли;	
КонецПроцедуры

//Открывает таблицу соспоставления для текущих метаданных
//
Процедура ОткрытьТаблицуСопоставления(Элемент)
	зОткрытьТаблицуСопоставления(ЭтаФорма);
КонецПроцедуры

//Переходит к справке на сайте
//
Процедура ПерейтиКСправке(Кнопка)
	Если Не ПустаяСтрока(Кнопка.Пояснение) Тогда
		ЗапуститьПриложение(Кнопка.Пояснение);	
	КонецЕсли;	
КонецПроцедуры




ТаблицаСвойств					= Новый ТаблицаЗначений;
ТаблицаСвойств.Колонки.Добавить("Использовать",		Новый ОписаниеТипов("Булево"));
ТаблицаСвойств.Колонки.Добавить("ИмяПараметра",		Новый ОписаниеТипов("Строка"));
ТаблицаСвойств.Колонки.Добавить("Поиск",			Новый ОписаниеТипов("Булево"));
ТаблицаСвойств.Колонки.Добавить("ЭтоВыражение",		Новый ОписаниеТипов("Булево"));
ТаблицаСвойств.Колонки.Добавить("ЗначениеПараметра");
ТаблицаСвойств.Колонки.Добавить("ПКО",				Новый ОписаниеТипов("Строка"));
ТаблицаСвойств.Колонки.Добавить("ЗначениеСтр",		Новый ОписаниеТипов("Строка"));
ТаблицаСвойств.Колонки.Добавить("ОграничениеТипа",	Новый ОписаниеТипов("ОписаниеТипов"));

ФормаВыбораТипа					= ПолучитьФорму("ФормаВыбораТипа",ЭтаФорма);
ЗакрыватьПриЗакрытииВладельца	= Истина;
ТекущаяНастройка				= Новый Структура();
МетаданныеФормы					= "ОбработкаРезультата_ЗагрузкаДанных_Новая";
