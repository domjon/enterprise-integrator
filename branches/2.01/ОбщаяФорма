//Функция расчтывает значение на встроенном языке
//Параметры:
//	СлужебныеДанные		- <Структура>. Данные определяюшие вычсление(выполнение) значения:(Выражение,ОписаниеТипов)
//	Параметры			- <Структура>. Структура достпных параметров.		
//	ЭтаФорма			- <Форма>. Обычно конструктор запроса. Достпуны другие переменные(РезультатЗапроса,ИндексСтроки,КоличествоСтрок)
///////////////		Групповая обработка
//	Объект 				- <Произвольный объект>. Обрабатываемый объект, в контексте групповой обработки
//	ТекущиеДанные 		- <Строка таблицы(дерева) значений>. Текущие данные строки результатов запроса, в контексте групповой обработки
//	СтрокаТЧ 			- <СтрокаТабличнойЧасти>. Строка табличной части объекта в случае обработки ТЧ документа,
//	Запись				- <ЗаписьРегистра>. Элемент коллекции набора записей в случае обработки набора записей
//
Функция __ВычислитьЗначение(Знач СлужебныеДанные,Параметры=Неопределено,ЭтаФорма=Неопределено,Объект=Неопределено,ТекущиеДанные=Неопределено,СтрокаТЧ=Неопределено, Запись=Неопределено,__Сообщать = Истина) Экспорт
	СообщениеОтладки=вПолучитьОписаниеВыражения(СлужебныеДанные,Новый Структура("Параметры,ЭтаФорма,Объект,ТекущиеДанные,СтрокаТЧ,Запись",Параметры,ЭтаФорма,Объект,ТекущиеДанные,СтрокаТЧ,Запись));
	СобытиеОтладки=Формы.Отладка.ДобавитьСобытие(СообщениеОтладки,"Встроенный язык");
	Попытка
		Если Не ПустаяСтрока(СлужебныеДанные.Выражение) Тогда
			Попытка
				Значение=Вычислить(СлужебныеДанные.Выражение);
			Исключение
				Значение=__ВыполнитьЗначение(СлужебныеДанные.Выражение,ЭтаФорма,Параметры,Объект,ТекущиеДанные,СтрокаТЧ,Запись,__Сообщать);
			КонецПопытки;
			Если СлужебныеДанные.Свойство("ОписаниеТипов") Тогда
				Значение=СлужебныеДанные.ОписаниеТипов.ПривестиЗначение(Значение);			
			КонецЕсли;	
		КонецЕсли;	
	Исключение
		Формы.Отладка.ЗавершитьСобытие(СобытиеОтладки,"ОченьВажное",?(__Сообщать,ИнформацияОбОшибке().Описание,""));
		ВызватьИсключение "Не удалось выполнить/вычислить выражение на встроенном языке";
	КонецПопытки;
	Формы.Отладка.ЗавершитьСобытие(СобытиеОтладки,"Информация","Результат вычисления: "+Строка(Значение));
	Возврат  Значение;
КонецФункции	

//Функция выполняет выражение на встроенном языке и возвращает занчение в переменную "Результат"
//Параметры: 
//	Выражение 			- <Строка>. Выражение на встроенном языке. 
//	Параметры			- <Структура>. Структура достпных параметров.		
//	ЭтаФорма			- <Форма>. Обычно конструктор запроса. Достпуны другие переменные.
///////////////		Групповая обработка
//	Объект 				- <Произвольный объект>. Обрабатываемый объект
//	ТекущиеДанные 		- <Строка таблицы(дерева) значений>. Текущие данные строки результатов запроса
//	СтрокаТЧ 			- <СтрокаТабличнойЧасти>. Строка табличной части объекта в случае обработки ТЧ документа.
//	Запись				- <ЗаписьРегистра>. Элемент коллекции набора записей в случае обработки набора записей
//
Функция __ВыполнитьЗначение(Знач Выражение,ЭтаФорма,Параметры,Объект,ТекущиеДанные,СтрокаТЧ, Запись, __Сообщать = Истина) Экспорт
	Перем Результат;
	СобытиеОтладки=Формы.Отладка.ДобавитьСобытие("Выполнение выражения, возращаемое значение ожидается в переменной ""Результат""","Встроенный язык");
	Попытка
    Выражение = СтрЗаменить(Выражение,"|Результат = НаборЗаписей","Результат = НаборЗаписей"); 
		Выполнить(Выражение);
	Исключение
		Формы.Отладка.ЗавершитьСобытие(СобытиеОтладки,"ОченьВажное",?(__Сообщать,ИнформацияОбОшибке().Описание,""));
		ВызватьИсключение "Не удалось выполнить выражение на встроенном языке";
	КонецПопытки;
	Формы.Отладка.ЗавершитьСобытие(СобытиеОтладки,"Информация","Результат выполнения: "+Строка(Результат));		
	Возврат Результат;
КонецФункции

//Открывает форму списка объекта метаданных или форму объекта конфигурации
//Параметры:
//	ОбъектМетаданных - <ОбъектМетаданных>. Метаданные значения которых нужно показать
//
Процедура ОткрытьСписок(ОбъектМетаданных) Экспорт
	Если ОбъектМетаданных = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	ФормаОткрытия = Неопределено;
	Если Метаданные.Справочники.Содержит(ОбъектМетаданных) Тогда
		ФормаОткрытия = Справочники[ОбъектМетаданных.Имя].ПолучитьФормуСписка();
	ИначеЕсли Метаданные.Документы.Содержит(ОбъектМетаданных) Тогда
		ФормаОткрытия = Документы[ОбъектМетаданных.Имя].ПолучитьФормуСписка();
	ИначеЕсли Метаданные.ЖурналыДокументов.Содержит(ОбъектМетаданных) Тогда
		ФормаОткрытия = ЖурналыДокументов[ОбъектМетаданных.Имя].ПолучитьФормуСписка();
	ИначеЕсли Метаданные.Отчеты.Содержит(ОбъектМетаданных) Тогда
		ФормаОткрытия = Отчеты[ОбъектМетаданных.Имя].ПолучитьФорму();
	ИначеЕсли Метаданные.Обработки.Содержит(ОбъектМетаданных) Тогда
		ФормаОткрытия = Обработки[ОбъектМетаданных.Имя].ПолучитьФорму();
	ИначеЕсли Метаданные.ПланыВидовХарактеристик.Содержит(ОбъектМетаданных) Тогда
		ФормаОткрытия = ПланыВидовХарактеристик[ОбъектМетаданных.Имя].ПолучитьФормуСписка();
	ИначеЕсли Метаданные.ПланыВидовРасчета.Содержит(ОбъектМетаданных) Тогда
		ФормаОткрытия = ПланыВидовРасчета[ОбъектМетаданных.Имя].ПолучитьФормуСписка();
	ИначеЕсли Метаданные.ПланыСчетов.Содержит(ОбъектМетаданных) Тогда
		ФормаОткрытия = ПланыСчетов[ОбъектМетаданных.Имя].ПолучитьФормуСписка();
	ИначеЕсли Метаданные.ПланыОбмена.Содержит(ОбъектМетаданных) Тогда
		ФормаОткрытия = ПланыОбмена[ОбъектМетаданных.Имя].ПолучитьФормуСписка();	
	ИначеЕсли Метаданные.РегистрыСведений.Содержит(ОбъектМетаданных) Тогда
		ФормаОткрытия = РегистрыСведений[ОбъектМетаданных.Имя].ПолучитьФормуСписка();
	ИначеЕсли Метаданные.РегистрыБухгалтерии.Содержит(ОбъектМетаданных) Тогда
		ФормаОткрытия = РегистрыБухгалтерии[ОбъектМетаданных.Имя].ПолучитьФормуСписка();
	ИначеЕсли Метаданные.РегистрыНакопления.Содержит(ОбъектМетаданных) Тогда
		ФормаОткрытия = РегистрыНакопления[ОбъектМетаданных.Имя].ПолучитьФормуСписка();
	ИначеЕсли Метаданные.РегистрыРасчета.Содержит(ОбъектМетаданных) Тогда
		ФормаОткрытия = РегистрыРасчета[ОбъектМетаданных.Имя].ПолучитьФормуСписка();
	ИначеЕсли Метаданные.БизнесПроцессы.Содержит(ОбъектМетаданных) Тогда
		ФормаОткрытия = БизнесПроцессы[ОбъектМетаданных.Имя].ПолучитьФормуСписка();
	ИначеЕсли Метаданные.Задачи.Содержит(ОбъектМетаданных) Тогда
		ФормаОткрытия = Задачи[ОбъектМетаданных.Имя].ПолучитьФормуСписка();
	КонецЕсли; 
	Если Не ФормаОткрытия = Неопределено Тогда
		ФормаОткрытия.Открыть();
    КонецЕсли;
КонецПроцедуры		 
