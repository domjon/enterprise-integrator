Перем МетаданныеФормы 	Экспорт;
Перем ФормаВыбораТипа;
Перем ТекущаяНастройка 	Экспорт;	//Структура (СтрокаОбработки,Позиция)

////////////////////////////////////////////////////////////////////////////////
//ОБЪЯЗАТЕЛЬНЫЕ ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

//Возврашает структуру, которая описывает,
//поведение обработки в рамках групповой обработки
//
Функция ПолучитьСвойстваОбработки() Экспорт
	СтруктураСвойств=Новый Структура;
	СтруктураСвойств.Вставить("Действие"				,ДействиеПеретаскивания.Перемещение); 	//Действие при назначении обработки
		//ДействиеПеретаскивания.Отмена 		- обработку нельзя использовать в таблице выбраннх обработок те обработка не предназначена для пакетной обработки 
		//ДействиеПеретаскивания.Копирование  	- обработку необходимо настраивать 
		//ДействиеПеретаскивания.Перемещение  	- обработка уже настроена ее нужнно просто добавить 
	СтруктураСвойств.Вставить("Типы"					,ПараметрыОкружения.ПроводимыеДокументы);
	СтруктураСвойств.Вставить("Функция"					,Ложь); //обработка не возвращает значений
	//Капитан очевидность
	СтруктураСвойств.Вставить("Картинка"				,КартинкаЗаголовка);
	СтруктураСвойств.Вставить("ИспользоватьНастройки"	,(СтруктураСвойств.Действие=ДействиеПеретаскивания.Копирование));									
    СтруктураСвойств.Вставить("РекомендуемыеВложенные"	,Новый Массив);

	
	Возврат  СтруктураСвойств;
КонецФункции	

// Выполняет обработку объектов.
//
// Параметры:
//  Параметры				-<Структура>. Структура доступных параметров
//  Объект					-<Произвльный>. Обрабатываемый объект, тип в соотвествии со свойствами обработки
//	ТекущиеДанные			-<СтрокаТабличнойЧасти>. Строка табличной части.
//	ДополнительныеСтроки    -<Массив>. Массив дополнительных строк, которые были обработаны текущей обработкой
//
Функция ВыполнитьОбработку(Параметры=Неопределено,Объект=Неопределено,ТекущиеДанные=Неопределено, ДополнительныеСтроки = Неопределено) Экспорт
	Если ТекущаяНастройка.Свойство("СтрокаОбработки") Тогда
		Если ПолучитьСвойстваОбработки().Типы.СодержитТип(ТипЗнч(Объект)) Тогда 
			Если ПараметрыОкружения.ВсеСсылки.СодержитТип(ТипЗнч(Объект)) Тогда
				мОбъект = Объект.ПолучитьОбъект();
			Иначе
				мОбъект = Объект;
			КонецЕсли;	
			мОбъект.Записать(РежимЗаписиДокумента.Проведение);
		КонецЕсли;
	КонецЕсли;	
КонецФункции // ВыполнитьОбработку()

//Загружает текущую настройку
//
Процедура ЗагрузитьНастройку() Экспорт
	
КонецПроцедуры

//Функция возращает типы возможных возвращаемых значений
//
Функция ПолучитьТипВозрЗначений() Экспорт
	Возврат Новый ОписаниеТипов();	
КонецФункции	
	
//Формирует алгоритм на встроенном языке, отражающий суть данной обработки
//
Функция СформироватьАлгоритм() Экспорт 
	стрАлгоритм="";
	Возврат стрАлгоритм; 
КонецФункции

///////////////////////////////////////////////////////////////////////////////
// ВСПОМОГАТЕЛЬНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

//Функция для совместимости с формой выбора типа
//Параметры:
//	Строка	-<Неопределено>.
//	Текст	-<Строка>. Текст который необходимо сохранить.
Процедура УстановитьСтр(Строка,Текст) Экспорт
	ЗначениеПараметра=Текст
КонецПроцедуры

///Функция для совместимости с формой выбора типа
//Параметры:
//	Строка	-<Неопределено>
//Вовзращаемое занчение:
//	Текст неограниченной длинны
Функция ПолучитьСтр(Строка)Экспорт
	Возврат ЗначениеПараметра;	
КонецФункции	

//Задает имя переменной(ЗначениеПараметра) основываясь на позиции текущей обработки
//
Процедура вЗадатьИмяпеременнойНаОсновеПозиции()
	Если ТекущаяНастройка.Свойство("Позиция") Тогда
		//для настройки определена позиция поэтой некоторые ограничения в форме
		ЗначениеПараметра	= "ТекущиеДанные."+ТекущаяНастройка.Позиция.Колонка.Имя;
	КонецЕсли;		
Конецпроцедуры	

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ, ВЫЗЫВАЕМЫЕ ИЗ ЭЛЕМЕНТОВ ФОРМЫ

//Открываем форму выбора типа
//
Процедура ОбъектыОбработкиНачалоВыбора(Элемент, СтандартнаяОбработка)
	СтруктураДопПараметров = ВладелецФормы.вСформироватьСтруктуруДляФормыВыбораТипа(Элемент,ПолучитьСвойстваОбработки(),ТекущаяНастройка);
	ФормаВыбораТипа.НачалоВыбора(Элемент, СтандартнаяОбработка,СтруктураДопПараметров);
	ОбъектыОбработкиПриИзменении(Элемент);
КонецПроцедуры

//Вызывается при изменеии значения объекта
//
Процедура ОбъектыОбработкиПриИзменении(Элемент)
	Если ТекущаяНастройка.Свойство("Позиция") Тогда
		//проверим соотвестиве введеного значению текущей позиции
		НоваяПозиция	= ВладелецФормы.вСкорректироватьКолонкуПозиции(ТекущаяНастройка.Позиция,ЗначениеПараметра);
		Если НоваяПозиция=Неопределено Тогда
			Предупреждение("Введена неверная переменная.",20);
		ИначеЕсли Не НоваяПозиция.Колонка = ТекущаяНастройка.Позиция.Колонка Тогда
			//выбрана новая позиция отличная от текущей
			СвойстваОбработки	= ПолучитьСвойстваОбработки();
			Если ВладелецФормы.вПозицияДоступнаДляОбработки(НоваяПозиция,СвойстваОбработки.Типы) Тогда
				ИмяНастройки=ТекущаяНастройка.Позиция.Строка[ТекущаяНастройка.Позиция.Колонка.Данные];
				ВладелецФормы.вИзменитьПозициюОбработки(ИмяНастройки,НоваяПозиция,ТекущаяНастройка.Позиция);
				ТекущаяНастройка.Вставить("Позиция",НоваяПозиция);
			Иначе
				Предупреждение("Данная обработка не может использоваться в текущей позиции(расположении).
				|Выберите другую ""колонку"".",20);
			КонецЕсли;	
		КонецЕсли;
		вЗадатьИмяпеременнойНаОсновеПозиции();
	КонецЕсли;
	СформироватьКартинкуДляВыражения(Элемент);
КонецПроцедуры

//Настройку в корзину
//
Процедура ОбъектыОбработкиОчистка(Элемент, СтандартнаяОбработка)
	ФормаВыбораТипа.Очистка(Элемент, СтандартнаяОбработка,Новый Структура("ТекущиеДанные",Новый Структура("ЭтоВыражение,ЗначениеПараметра",(ТипЗнч(Элемент.Значение)=Тип("Строка")),ЗначениеПараметра)));
	//Очистим позицию
	Если ТекущаяНастройка.Свойство("Позиция") Тогда
		ВладелецФормы.вОчиститьПозициюОбработки(ТекущаяНастройка.Позиция);
		ТекущаяНастройка.Удалить("Позиция");
	КонецЕсли;
	СформироватьКартинкуДляВыражения(Элемент);
КонецПроцедуры

//Открываем значение
//
Процедура ОбъектыОбработкиОткрытие(Элемент, СтандартнаяОбработка)
	СтруктураДопПараметров = ВладелецФормы.вСформироватьСтруктуруДляФормыВыбораТипа(Элемент,ПолучитьСвойстваОбработки(),ТекущаяНастройка);
	ФормаВыбораТипа.Открытие(Элемент, СтандартнаяОбработка,СтруктураДопПараметров);
КонецПроцедуры

//Переходит к справке на сайте
//
Процедура ПерейтиКСправке(Кнопка)
	Если Не ПустаяСтрока(Кнопка.Пояснение) Тогда
		ЗапуститьПриложение(Кнопка.Пояснение);	
	КонецЕсли;	
КонецПроцедуры


///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

Процедура ПриОткрытии()
	вЗадатьИмяпеременнойНаОсновеПозиции();
	СформироватьКартинкуДляВыражения(ЭлементыФормы.ОбъектыОбработки);
	ЭлементыФормы.ПолеТекстовогоДокумента.УстановитьТекст("Если ПараметрыОкружения.ВсеСсылки.СодержитТип(ТипЗнч(Объект)) Тогда
	|	мОбъект = Объект.ПолучитьОбъект();
	|Иначе
	|	мОбъект = Объект;
	|КонецЕсли;	
	|мОбъект.Записать(РежимЗаписиДокумента.Проведение);");
КонецПроцедуры




ФормаВыбораТипа					= ПолучитьФорму("ФормаВыбораТипа",ЭтаФорма);
ЗакрыватьПриЗакрытииВладельца	= Истина;
МетаданныеФормы					= "ОбработкаРезультата_ПровестиДокументы";
ТекущаяНастройка				= Новый Структура;