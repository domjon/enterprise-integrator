 Перем МетаданныеФормы 	Экспорт;
Перем ФормаВыбораТипа;
Перем ТекущаяНастройка 	Экспорт;		//Структура (СтрокаОбработки,Позиция)
Перем КонтекстФормыВыбораТипа;	        //форма выбора типа может открываться из Объекта обработки и Текста 

Перем ПолеТекстовогоДокументаСКонтекстнойПодсказкой;
Перем мИмяФайла;                        // Имя файла запросов
Перем мИмяПути;                         // Путь к файлу запорсов
Перем мЗаголовокФормы;                  // Заголовок формы
Перем мТекущаяСтрока ; 					// Текушая строка в дереве нужна для сохранения изменений при переходе по строкам дерева 
Перем ДеревоПапок, Обозреватель;        // Ссылка на кнопки


// @@@.КЛАСС.ПолеТекстовогоДокументаСКонтекстнойПодсказкой
// Транслятор обработки событий нажатия на кнопки командной панели в компоненту.
//
// Параметры:
//  Кнопка       – КнопкаКоманднойПанели.
//
Процедура КлсПолеТекстовогоДокументаСКонтекстнойПодсказкойНажатие(Кнопка)
	Если ПолеТекстовогоДокументаСКонтекстнойПодсказкой.Свойство(ТекущийЭлемент.Имя) Тогда
		Результат = ПолеТекстовогоДокументаСКонтекстнойПодсказкой[ТекущийЭлемент.Имя].Нажатие(Кнопка);
	КонецЕсли;
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
//ОБЪЯЗАТЕЛЬНЫЕ ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

//Возврашает структуру, которая описывает,
//поведение обработки в рамках групповой обработки
Функция ПолучитьСвойстваОбработки() Экспорт
	СтруктураСвойств=Новый Структура;
	СтруктураСвойств.Вставить("Действие"				,ДействиеПеретаскивания.Копирование); 	//Действие при назначении обработки
		//ДействиеПеретаскивания.Отмена 		- обработку нельзя использовать в таблице выбраннх обработок те обработка не предназначена для пакетной обработки 
		//ДействиеПеретаскивания.Копирование  	- обработку необходимо настраивать 
		//ДействиеПеретаскивания.Перемещение  	- обработка уже настроена ее нужнно просто добавить 
		МассивТипов = ПараметрыОкружения.ВсеОбъекты.Типы();
		МассивТипов.Добавить(Тип("Строка"));
		МассивТипов.Добавить(Тип("Число"));
		МассивТипов.Добавить(Тип("Дата"));
		МассивТипов.Добавить(Тип("ТаблицаЗначений"));
		МассивТипов.Добавить(Тип("Булево"));
	СтруктураСвойств.Вставить("Типы"					,Новый ОписаниеТипов(ПараметрыОкружения.ВсеСсылки,МассивТипов));
	СтруктураСвойств.Вставить("Функция"					,Истина); //обработка не возвращает значений
	//Капитан очевидность
	СтруктураСвойств.Вставить("Картинка"				,КартинкаЗаголовка);
	СтруктураСвойств.Вставить("ИспользоватьНастройки"	,(СтруктураСвойств.Действие=ДействиеПеретаскивания.Копирование));									
    СтруктураСвойств.Вставить("РекомендуемыеВложенные"	,Новый Массив);

	
	Возврат  СтруктураСвойств;
КонецФункции	

// Выполняет обработку объектов.
//
// Параметры:
//  Параметры				-<Структура>. Структура доступных параметров
//  Объект					-<Произвльный>. Обрабатываемый объект, тип в соотвествии со свойствами обработки
//	ТекущиеДанные			-<СтрокаТабличнойЧасти>. Строка табличной части.
//	ДополнительныеСтроки    -<Массив>. Массив дополнительных строк, которые были обработаны текущей обработкой
//
Функция ВыполнитьОбработку(Параметры=Неопределено,Объект=Неопределено,ТекущиеДанные=Неопределено, ДополнительныеСтроки = Неопределено) Экспорт
	Если ТекущаяНастройка.Свойство("СтрокаОбработки") Тогда
		Если ТекущаяНастройка.СтрокаОбработки.Настройка.Свойство("Текст") Тогда
			Выражение 	= ТекущаяНастройка.СтрокаОбработки.Настройка.Текст;
		ИначеЕсли ТекущаяНастройка.СтрокаОбработки.Настройка.Свойство("ТекстМодуля") Тогда
			//для версии 1.09 и ниже
			Выражение 	= ТекущаяНастройка.СтрокаОбработки.Настройка.ТекстМодуля;
		КонецЕсли;	

		Значение	= вВычислитьЗначение(Новый Структура("Выражение",Выражение),Параметры,ВладелецФормы,Объект,ТекущиеДанные);
		Возврат вЗначениеВКоллекцию(Значение);
	КонецЕсли;	
КонецФункции // ВыполнитьОбработку()

//Загружает текущую настройку
//
Процедура ЗагрузитьНастройку() Экспорт
	Если ТекущаяНастройка.Свойство("СтрокаОбработки") Тогда
		Если ТипЗнч(ТекущаяНастройка.СтрокаОбработки.Настройка)	= Тип("Структура") Тогда
			Если ТекущаяНастройка.СтрокаОбработки.Настройка.Свойство("ВозвращаемоеЗначение") Тогда
				ВозвращаемоеЗначение	= ТекущаяНастройка.СтрокаОбработки.Настройка.ВозвращаемоеЗначение;	
			КонецЕсли;	
		КонецЕсли;
	КонецЕсли;	
КонецПроцедуры

//Функция возращает типы возможных возвращаемых значений
//
Функция ПолучитьТипВозрЗначений() Экспорт
	Возврат ВозвращаемоеЗначение;	
КонецФункции	
	
//Формирует алгоритм на встроенном языке, отражающий суть данной обработки
//
Функция СформироватьАлгоритм() Экспорт 
	стрАлгоритм="";
	Возврат стрАлгоритм; 
КонецФункции

///////////////////////////////////////////////////////////////////////////////
// ВСПОМОГАТЕЛЬНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

//Сохраняет текущую настройку
//
Функция вСохранитьНастройку()
	ДеревоПриАктивизацииСтроки(ЭлементыФормы.Дерево);
	ТекущаяСтрока	= ЭлементыФормы.Дерево.ТекущиеДанные;
	ТекущаяНастройка.СтрокаОбработки.Настройка	= Новый Структура();
	ТекущаяНастройка.СтрокаОбработки.Настройка.Вставить("ВозвращаемоеЗначение",ВозвращаемоеЗначение);
	ТекущаяНастройка.СтрокаОбработки.Функция = ЗначениеЗаполнено(ВозвращаемоеЗначение);
	ТекущаяНастройка.СтрокаОбработки.Настройка.Вставить("Текст",ТекущаяСтрока.ТекстИзмененый);
	вЗафиксироватьИзменения(ТекущаяСтрока);
	ВладелецФормы.Модифицированность	= Истина;
	Возврат Истина;
Конецфункции

//Сохраняет параметр
//
Функция вСохранитьПараметр();
	ДеревоПриАктивизацииСтроки(ЭлементыФормы.Дерево);
	ТекущаяСтрока	= ЭлементыФормы.Дерево.ТекущиеДанные;
	ВладелецФормы.УстановитьСтр(ИсходныеДанные.ТекущиеДанные,ТекущаяСтрока.ТекстИзмененый);
	ИсходныеДанные.ТекущиеДанные.ЭтоВыражение = Истина; 
	вЗафиксироватьИзменения(ТекущаяСтрока);
	Возврат Истина;
КонецФункции	

//Функция для совместимости с формой выбора типа
//Параметры:
//	Строка	-<Неопределено>.
//	Текст	-<Строка>. Текст который необходимо сохранить.
Процедура УстановитьСтр(Строка,Текст) Экспорт
	Если КонтекстФормыВыбораТипа="ОбъектОбработки" Тогда
		ЗначениеПараметра=Текст;
	Иначе	
		ЭлементыФормы.ТекстМодуля.ВыделенныйТекст	=	Текст;
	КонецЕсли;	
КонецПроцедуры

///Функция для совместимости с формой выбора типа
//Параметры:
//	Строка	-<Неопределено>
//Вовзращаемое занчение:
//	Текст неограниченной длинны
Функция ПолучитьСтр(Строка)Экспорт
	Если КонтекстФормыВыбораТипа="ОбъектОбработки" Тогда
		Возврат Строка(ЗначениеПараметра);	
	Иначе
		Возврат ЭлементыФормы.ТекстМодуля.ВыделенныйТекст;	
	КонецЕсли;	
КонецФункции	

//Задает имя переменной(ЗначениеПараметра) основываясь на позиции текущей обработки
//
Процедура вЗадатьИмяпеременнойНаОсновеПозиции()
	Если ТекущаяНастройка.Свойство("Позиция") Тогда
		//для настройки определена позиция поэтой некоторые ограничения в форме
		ЗначениеПараметра	= "ТекущиеДанные."+ТекущаяНастройка.Позиция.Колонка.Имя;
	КонецЕсли;		
Конецпроцедуры

//Получает образец объекта для подсказки переменной
Функция вПолучитьОбразецОбъекта(Параметры)
	Если ТекущаяНастройка.Свойство("Позиция") Тогда
		Возврат Владелецформы.вПолучитьТекущийОбъект(ТекущаяНастройка.Позиция);
	Иначе
		Результат = вЗначениеВКоллекцию(вПолучитьЯвныйОбъектОбработки(Параметры));
		Если Не Результат=Неопределено Тогда
			Возврат Результат[0];
		КонецЕсли;	
	КонецЕсли;	
КонецФункции

//Получает объект обработки указанный явно в форме, может быть как ссвлончого типа так,
//так и вычисляемое выражение
//Параметры:
//	Параметры	- <Структура>. Структура параметров.		
Функция вПолучитьЯвныйОбъектОбработки(Параметры)
	Если ТипЗнч(ЗначениеПараметра) = Тип("Строка") Тогда
		Попытка
			Значение	= вВычислитьЗначение(Новый Структура("Выражение",ЗначениеПараметра),Параметры);
			Возврат Значение;
		Исключение
			Возврат ЗначениеПараметра;
		КонецПопытки;	
	Иначе
		Возврат ЗначениеПараметра; 
	КонецЕсли;
КонецФункции	

//Проводит инциализацию инструментов разработчика
//
Процедура вИнициализироватьКП()
	Если Не Метаданные.Обработки.Найти("ирПлатформа")=Неопределено
		И ПравоДоступа("Использование", Метаданные.Обработки.ирПлатформа) Тогда
		Состояние("Инициализация контекстной подсказки");
		// +++.КЛАСС.ПолеТекстовогоДокументаСКонтекстнойПодсказкой
		ПолеТекстовогоДокументаСКонтекстнойПодсказкой = Новый Структура;
		Обработки.ирКлсПолеТекстовогоДокументаСКонтекстнойПодсказкой.Создать().Инициализировать(ПолеТекстовогоДокументаСКонтекстнойПодсказкой,
			ЭтаФорма, ЭлементыФормы.ТекстМодуля,ЭлементыФормы.КП.Кнопки.Текст.Кнопки.Дополнительно, Ложь);
		//Удалим кнопку выполнение встренного языка уже такая есть
		 ЭлементыФормы.КП.Кнопки.Текст.Кнопки.Дополнительно.Кнопки.Удалить(0);
	КонецЕсли;
КонецПроцедуры

//Устанавливает доступность элементов управления
//
Процедура вУстановитьДостпностьЭлементовУправления()
	ВосстановитьЗначенияПометок(ЭтаФорма,"ОсновныеДействияФормы");
	Если ТипЗнч(ИсходныеДанные) = Тип("Структура") Тогда
		ЭлементыФормы.ОсновныеДействияФормы.Кнопки.СтруктураМодуля.Доступность	= Истина;
		ЭлементыФормы.ПанельОбъекта.Свертка 									= РежимСверткиЭлементаУправления.Верх;
		ЭлементыФормы.ПанельТипа.Свертка 										= РежимСверткиЭлементаУправления.Низ;
		Если ИсходныеДанные.Свойство("Содержание") Тогда
			//открытие из объектов конфигурации
			Обозреватель.Доступность												= Истина;
			ДеревоПапок.Доступность													= (ИсходныеДанные.Содержание.Количество()>1);
			ДеревоПапок.Пометка														= (ИсходныеДанные.Содержание.Количество()>1);
			
			Маска="*.data";
		ИначеЕсли ИсходныеДанные.Свойство("ТекущиеДанные") Тогда
			//открытие из параметров
			ЭлементыФормы.ОсновныеДействияФормы.Кнопки.Сохранить.Доступность		= Истина;
			ЭлементыФормы.КП.Кнопки.Текст.Кнопки.Переменные.Доступность				= Истина;
		КонецЕсли;	
	ИначеЕсли ТекущаяНастройка.Свойство("СтрокаОбработки") Тогда
		//открытие из конструктора
		Если Не ТекущаяНастройка.Свойство("Позиция") Тогда
			ЭлементыФормы.ПанельТипа.Свертка 									= РежимСверткиЭлементаУправления.Низ;
		Иначе
			ЭлементыФормы.ОсновныеДействияФормы.Кнопки.Сохранить.Доступность	= Истина;
		КонецЕсли;	
		ЭлементыФормы.ОсновныеДействияФормы.Кнопки.Выполнить.Доступность		= Истина;
		ЭлементыФормы.КП.Кнопки.Текст.Кнопки.Переменные.Доступность				= Истина;
	Иначе
		//Обычное открытие
		ЭлементыФормы.ОсновныеДействияФормы.Кнопки.СтруктураМодуля.Доступность	= Истина;
		ЭлементыФормы.ОсновныеДействияФормы.Кнопки.Сохранить.Доступность		= Истина;
		ЭлементыФормы.ОсновныеДействияФормы.Кнопки.Открыть.Доступность			= Истина;
		ЭлементыФормы.ОсновныеДействияФормы.Кнопки.Выполнить.Доступность		= Истина;
		ДеревоПапок.Доступность													= Истина;
		ЭлементыФормы.ПанельОбъекта.Свертка 									= РежимСверткиЭлементаУправления.Верх;
		ЭлементыФормы.ПанельТипа.Свертка 										= РежимСверткиЭлементаУправления.Низ;	
		ЭлементыФормы.Cостояние.Видимость										= Истина;
		ПодключитьОбработчикОжидания("вЗаполнитьСтрокуСостояния",120,Истина);
		Маска="*.1c"; //c -английская 
	КонецЕсли;
	
	//скрываем вспомогательные панели если элементы не доступны или пометка снята
	Если Не ДеревоПапок.Доступность ИЛИ Не ДеревоПапок.Пометка  Тогда
		вСкрытьОтобразитьДерево(Ложь);
	КонецЕсли;
	Если Не Обозреватель.Доступность ИЛИ Не Обозреватель.Пометка  Тогда
		вСкрытьОтобразитьОбозревательОбъектов(Ложь);
	КонецЕсли;

КонецПроцедуры 

//Заполняет строку состояния
Процедура вЗаполнитьСтрокуСостояния()
	УстановитьСтрокуСостояния(ЭтаФорма);
КонецПроцедуры	

// Восстанавливает имя открывавшегося в предыдущем сеансе работы файла и путь к нему 
//
// Параметры:
//  Нет.
//
Процедура вВосстановитьИмяФайла()
	мИмяФайла = ВосстановитьЗначение("Ei_Встроенный язык файл");
	мИмяПути  = ВосстановитьЗначение("Ei_Встроенный язык путь");

	Если мИмяФайла = Неопределено Тогда
		мИмяФайла = "";
	КонецЕсли;

	Если мИмяПути = Неопределено Тогда
		мИмяПути = ПараметрыОкружения.КаталогОбработки+"MyScripts";
	КонецЕсли;
КонецПроцедуры // ВосстановитьИмяФайла()

// Сохраняет имя файла при работе в разных сессиях
//
Процедура вСохранитьИмяФайла()
	СохранитьЗначение("Ei_Встроенный язык Файл", мИмяФайла);
	СохранитьЗначение("Ei_Встроенный язык путь",  мИмяПути);
КонецПроцедуры // СохранитьИмяФайла()

//Загружает файлы из каталога по маске,
//Параметры:
//	Каталог			-<Строка>. Каталог файлов
//
Процедура вЗагрузитьФайлыИзКаталога(Каталог="")
	Если Не ПустаяСтрока(Каталог) Тогда
		//добвляем папку без нее вообще никак
		СсылкаНаКаталог=Новый Файл(Каталог);
		Если  СсылкаНаКаталог.ЭтоКаталог() Тогда
			Дерево.Строки.Очистить();
			мТекущаяСтрока	= Неопределено;
			
			СтрокаКаталога					= Дерево.Строки.Добавить();
			СтрокаКаталога.Файл				= Каталог;
			СтрокаКаталога.Каталог			= Истина;
			СтрокаКаталога.Изменен			= Ложь;
			СтрокаКаталога.ЗначениеИзФайла	= Истина;
		Иначе
			Предупреждение("Каталог "+Каталог+" не обнаружен",20);
			Возврат;
		КонецЕсли;
	КонецЕсли;
	Если  ДеревоПапок.Доступность Тогда
		//Загружаем файлы
		МассивФайлов=НайтиФайлы(СтрокаКаталога.Файл,Маска);
		Если МассивФайлов.Количество()>0 Тогда
			СтрокаКаталога.Строки.Очистить();
			ИнициализацияОкнаИсполнения("Чтение файлов из каталога "+СтрокаКаталога.Файл,МассивФайлов.Количество());
			Для каждого ЭтотФайл Из МассивФайлов Цикл
				Если ЭтотФайл.ЭтоФайл() Тогда 
					НоваяСтрока							= СтрокаКаталога.Строки.Добавить();
					НоваяСтрока.Файл					= ЭтотФайл.Имя;
					НоваяСтрока.ПолноеИмя				= ЭтотФайл.ПолноеИмя;
					вДобавитьФайлДерево(ЭтотФайл,НоваяСтрока);
					Формы.ОкноИсполнения.Подзаголовок	= НоваяСтрока.Файл;
				КонецЕсли;	
				Формы.ОкноИсполнения.Индикация();
			КонецЦикла;	
			ОстановкаОкнаИсполнения();
		КонецЕсли;	
	КонецЕсли;
	//активизируем хотябы одну строку
	вАктивизироватьСтрокуВДереве();
КонецПроцедуры

//Активизирует строку в загруженом дереве
//
Процедура вАктивизироватьСтрокуВДереве()
	Если Дерево.Строки.Количество()>0 Тогда
		//загрузили
		//активизируем 1 строку
		ИскомаяСтрока=Дерево.Строки.Найти(мИмяФайла,"ПолноеИмя",Истина);
		Если Не ИскомаяСтрока=Неопределено И НЕ ПустаяСтрока(мИмяФайла) Тогда 
			ЭлементыФормы.Дерево.ТекущаяСтрока	= ИскомаяСтрока;
		Иначе	
			ИскомаяСтрока=Дерево.Строки.Найти("image.data","Файл",Истина);
			Если Не ИскомаяСтрока=Неопределено Тогда 
				ЭлементыФормы.Дерево.ТекущаяСтрока	= ИскомаяСтрока;
			Иначе
				ИскомаяСтрока=Дерево.Строки.Найти("module.data","Файл",Истина);
				Если Не ИскомаяСтрока=Неопределено Тогда 
					ЭлементыФормы.Дерево.ТекущаяСтрока	= ИскомаяСтрока;
				Иначе
					ИскомаяСтрока=Дерево.Строки.Найти("text.data","Файл",Истина);
					Если Не ИскомаяСтрока=Неопределено Тогда 
						ЭлементыФормы.Дерево.ТекущаяСтрока	= ИскомаяСтрока;
					Иначе
						ЭлементыФормы.Дерево.ТекущаяСтрока	= Дерево.Строки[0]; //активизируем хотябы папку
					КонецЕсли;	
				КонецЕсли;	
			КонецЕсли;
		КонецЕсли;	
	КонецЕСли;
КонецПроцедуры	

//Добавляет файл в дерево
//Параметры:
//	ЭтотФайл		-<Файл>. Файл параметры которого нужно прочитать
//	СтрокаДерева	-<СтрокаДереваЗначений>. В нее записываем параметры файла
//
Процедура вДобавитьФайлДерево(ЭтотФайл,СтрокаДерева)
	Значение=Неопределено;
	СтрокаДерева.Размер=ЭтотФайл.Размер();
		//попробуем вначаел взять значение из файла
		//для двоичных типов это будет невозможно поэтому привяжемся к разрешению
	Если ЭтотФайл.Расширение=".1c" Тогда  	
		Значение=ЗначениеИзФайла(ЭтотФайл.ПолноеИмя);
	КонецЕсли;	
	Если ТипЗнч(Значение)=Тип("Строка") Тогда 
		СтрокаДерева.Текст			= Значение;	
		СтрокаДерева.ЗначениеИзФайла	= Истина;	
	Иначе	
		// читаем файл если сериализация не прошла 
		ЧтениеТекста=Новый ЧтениеТекста(ЭтотФайл.ПолноеИмя);
		СтрокаДерева.Текст=ЧтениеТекста.Прочитать();
		ЧтениеТекста.Закрыть();
	КонецЕсли;
	СтрокаДерева.ТекстИзмененый=СтрокаДерева.Текст;
	СтрокаДерева.Изменен		= Ложь;
	СтрокаДерева.Каталог		= Ложь;
КонецПРоцедуры	

//Преобразует исходные данные объекта конфигурации в фаловую структуру
//Параметры:
//
Процедура вПреобразоватьИсходныеДанныеВФайлы();
	Если  ТипЗнч(ИсходныеДанные) = Тип("Структура") И ИсходныеДанные.Свойство("Содержание") Тогда
		Если ИсходныеДанные.Содержание.Количество()>1 Тогда
			ПапкаКонфигурации	= ПараметрыОкружения.КаталогОбработки+"\MyScripts\Conf\";
			СоздатьКаталог(ПапкаКонфигурации);
			мИмяПути=ПапкаКонфигурации+Заголовок+" "+ПараметрыОкружения.ИдентификаторЗапуска;
			СоздатьКаталог(мИмяПути);
			Для каждого Запись из ИсходныеДанные.Содержание Цикл
				Запись.Значение.Записать(мИмяПути+"\"+Запись.Представление+".data");	
			КонецЦикла;	
		КонецЕсли;
	КонецЕсли;	
КонецПроцедуры

//Формирует дерево обозревателя объекта на основе отображаемых данных в поле текстового документа
//
Процедура вОбновитьОбозревательОбъектов()
	Если Обозреватель.Доступность Тогда
		Текст = ЭлементыФормы.ТекстМодуля.ПолучитьТекст();
		Если Не ПустаяСтрока(Текст) Тогда
			СобытиеОтладки=Формы.Отладка.ДобавитьСобытие("Формирование структуры объекта по текстовому представлению","Объекты конфигурации");
			Попытка
				ОбозревательОбъектов.Строки.Очистить();
				ЗаполнитьТаблицуИзXMLФайла(ПараметрыОкружения.КаталогОбработки+"MetadateID.xml","ИдентификаторыОбъекта",ИдентификаторыОбъекта);
				Копия=ИдентификаторыОбъекта.Скопировать();
				Копия.Свернуть("Unid");
				Сз_НужныхУинов=Новый СписокЗначений;
				Для Каждого Строка из Копия Цикл
					Если Найти(Текст,Строка.Unid)>0 Тогда
						Тип				= ИдентификаторыОбъекта.Найти(Строка.Unid,"Unid").Тип;
						НайденнаяСтрока	= ОбозревательОбъектов.Строки.Найти(Тип,"Имя");
						Если Не НайденнаяСтрока=Неопределено Тогда
							//добавляем в массив значение
							НайденнаяСтрока.Значение.Добавить(Строка.Unid);
						Иначе	
							НоваяСтрока=ОбозревательОбъектов.Строки.Добавить();
							НоваяСтрока.Unid	= Строка.Unid;
							НоваяСтрока.Имя		= Тип;
							СЗ=Новый СписокЗначений;
							СЗ.Добавить(Строка.Unid);
							НоваяСтрока.Значение=СЗ;
						КонецЕсли;	
					КонецЕсли;	
				КонецЦикла;
				//создали дерево на первом уровне которого будут строки содержащие списки флагов теперь по этим флагам полум значения
				Для каждого СтрокаГруппы из ОбозревательОбъектов.Строки Цикл
					СобытиеОтладки_Группа=Формы.Отладка.ДобавитьСобытие("Анализ идентификатора "+СтрокаГруппы.Unid+" - "+СтрокаГруппы.Имя,"Объекты конфигурации",СобытиеОтладки);
					Попытка
						СписокСвойств=СтрокуОбъектаВСписок(СтрокаГруппы.Значение,ЭлементыФормы.ТекстМодуля.ПолучитьТекст());
						Для каждого Свойство из СписокСвойств Цикл
							НоваяСтрокаСвойств			= СтрокаГруппы.Строки.Добавить();
							НоваяСтрокаСвойств.Значение	= Свойство.Значение;
							ЗаполнитьЗначенияСвойств(НоваяСтрокаСвойств,ОбъектМетаданных(Свойство.Значение,,,?(Нрег(СтрокаГруппы.Имя) = "табличныечасти",Новый Структура("Тип"),Неопределено)));			
							
							//Вложенные объекты (Реквизиты для ТЧ например) 
							ВложенныеОбъекты			= ИдентификаторыОбъекта.НайтиСтроки(Новый Структура("Unid",НоваяСтрокаСвойств.Родитель.Unid));
							Для каждого ВложенныйОбъект из ВложенныеОбъекты Цикл
								Попытка
									Значение=Вычислить("Свойство.Значение["+СтрЗаменить(ВложенныйОбъект.Вложенность,",","].Значение[")+"]");
									Если ТипЗнч(Значение.Значение)	= Тип("СписокЗначений") Тогда
										Для каждого ЭлементСписка из Значение.Значение Цикл
											НоваяСтрокаСвойствСвойств			=НоваяСтрокаСвойств.Строки.Добавить();
											НоваяСтрокаСвойствСвойств.Значение	=ЭлементСписка.Значение;
											ЗаполнитьЗначенияСвойств(НоваяСтрокаСвойствСвойств,ОбъектМетаданных(ЭлементСписка.Значение));			
										КонецЦикла;	
									КонецЕсли;	
								Исключение
								КонецПопытки;	
							КонецЦикла;	
						КонецЦикла;
					Исключение
						Формы.Отладка.ЗавершитьСобытие(СобытиеОтладки_Группа,"ОченьВажное",ИнформацияОбОшибке());
						ВызватьИсключение "Не удалось проанализировать идентификатор" 
					КонецПопытки;
					Формы.Отладка.ЗавершитьСобытие(СобытиеОтладки_Группа);
				КонецЦикла;
			Исключение
				Формы.Отладка.ЗавершитьСобытие(СобытиеОтладки,"ОченьВажное",ИнформацияОбОшибке());
			КонецПопытки;
			Формы.Отладка.ЗавершитьСобытие(СобытиеОтладки);
			//если обозреватель пустой скорем его 
			Если ОбозревательОбъектов.Строки.Количество()=0  Тогда
				Если Обозреватель.Пометка Тогда
		    		вСкрытьОтобразитьОбозревательОбъектов(Ложь);
				КонецЕсли;	
			КонецЕсли;
		КонецЕсли;	
	КонецЕсли;	
Конецпроцедуры	

//Изменяем способ отображения элеменя формы, обозреватель Дерево
//
Процедура вСкрытьОтобразитьДерево(Сохранять=Истина)
	Если НЕ ЭлементыФормы.ПанельДерево.Свертка = РежимСверткиЭлементаУправления.Лево Тогда
		ДеревоПапок.Пометка	= Ложь;
			//ну вначале изменим привязки чтобы эл управления могли сложиться
				//сбросим привязки
				ЭлементыФормы.ПанельДерево.УстановитьПривязку(ГраницаЭлементаУправления.Право);	
				////теперь установим привязки (без сброса этих привязок установить их не получится)
				ЭлементыФормы.РазделительВертикальный.УстановитьПривязку(ГраницаЭлементаУправления.Лево,ЭлементыФормы.ПанельДерево,ГраницаЭлементаУправления.Право);
		//сворачиваем
		ЭлементыФормы.РазделительВертикальный.Свертка = РежимСверткиЭлементаУправления.Лево;
		ЭлементыФормы.ПанельДерево.Свертка = РежимСверткиЭлементаУправления.Лево;
				
	Иначе
		ДеревоПапок.Пометка	= Истина;
		//востанавливаем
		ЭлементыФормы.ПанельДерево.Свертка = РежимСверткиЭлементаУправления.Нет;
		ЭлементыФормы.РазделительВертикальный.Свертка = РежимСверткиЭлементаУправления.Нет;
			////так же востанавливаем и привязки 
			//	//сбросим привязки 
				ЭлементыФормы.РазделительВертикальный.УстановитьПривязку(ГраницаЭлементаУправления.Лево);
			//	//установим 
				ЭлементыФормы.ПанельДерево.УстановитьПривязку(ГраницаЭлементаУправления.Право,ЭлементыФормы.РазделительВертикальный,ГраницаЭлементаУправления.Лево);
	КонецЕсли;
	СохранитьЗначениеПометки(ДеревоПапок,Сохранять);	
КонецПроцедуры	

//Изменяем способ отображения элеменя формы, обозреватель объектов
//
Процедура вСкрытьОтобразитьОбозревательОбъектов(Сохранять=Истина)
	Если НЕ ЭлементыФормы.ОбозревательОбъектов.Свертка = РежимСверткиЭлементаУправления.Право Тогда
		Обозреватель.Пометка = Ложь;
			//ну вначале изменим привязки чтобы эл управления могли сложиться
				//сбросим привязки
				ЭлементыФормы.ОбозревательОбъектов.УстановитьПривязку(ГраницаЭлементаУправления.Лево);	
				//теперь установим привязки (без сброса этих привязок установить их не получится)
				ЭлементыФормы.РазделительПравый.УстановитьПривязку(ГраницаЭлементаУправления.Право,ЭлементыФормы.ОбозревательОбъектов,ГраницаЭлементаУправления.Лево);
		//сворачиваем
		ЭлементыФормы.РазделительПравый.Свертка = РежимСверткиЭлементаУправления.Право;
		ЭлементыФормы.ОбозревательОбъектов.Свертка = РежимСверткиЭлементаУправления.Право;
				
	Иначе
		Обозреватель.Пометка = Истина;
		//востанавливаем
		ЭлементыФормы.ОбозревательОбъектов.Свертка = РежимСверткиЭлементаУправления.Нет;
		ЭлементыФормы.РазделительПравый.Свертка = РежимСверткиЭлементаУправления.Нет;
			//так же востанавливаем и привязки 
				//сбросим привязки 
				ЭлементыФормы.РазделительПравый.УстановитьПривязку(ГраницаЭлементаУправления.Право);
			//	//установим 
				ЭлементыФормы.ОбозревательОбъектов.УстановитьПривязку(ГраницаЭлементаУправления.Лево,ЭлементыФормы.РазделительПравый,ГраницаЭлементаУправления.Право);
		вОбновитьОбозревательОбъектов();		
	КонецЕсли;
	СохранитьЗначениеПометки(Обозреватель);	
КонецПроцедуры	

//Сохраняет внесеннные изменения
//Параметры:
//	ЗапрашиватьСохранение	-<Булево>. Определеяет необходимость вопроса.
//
Функция вСохранить(ЗапрашиватьСохранение	= Ложь)
	вОбновитьСтатусМодифицированности();
	Если Модифицированность Тогда
		Если ЗапрашиватьСохранение Тогда
			Ответ = Вопрос("Сохранить изменения?", РежимДиалогаВопрос.ДаНетОтмена);
			Если Ответ = КодВозвратаДиалога.Отмена Тогда
				Возврат Неопределено;				
			ИначеЕсли Ответ = КодВозвратаДиалога.Нет Тогда
				Возврат Ложь;
			КонецЕсли;
		КонецЕсли;	
	КонецЕсли;	
	Если ТипЗнч(ИсходныеДанные) = Тип("Структура") Тогда
		Если ИсходныеДанные.Свойство("Содержание") Тогда
			//открытие из объектов конфигурации
    	    Сохранено	= вСохранитьОбъектКонфигурации();
		ИначеЕсли ИсходныеДанные.Свойство("ТекущиеДанные") Тогда
			//открытие из параметров 
			Сохранено	= вСохранитьПараметр();
		КонецЕсли;	
	ИначеЕсли ТекущаяНастройка.Свойство("СтрокаОбработки") Тогда
		//открытие из конструктора
		Сохранено	= вСохранитьНастройку();
	Иначе
		Сохранено	= вСохранитьВФайл();
		вЗагрузитьФайлыИзКаталога(мИмяПути);
	КонецЕсли;
	вОбновитьСтатусМодифицированности();
	Возврат Сохранено;
КонецФункции

//Сохраняет выражение на встроенном языке в файл
//Параметры:
//	ЗапрашиватьИмяФайла		-<Булево>. Выводить окно ввода файла
//Возвращаемое значение.
//	Истина			- файл сохранен;
//	Ложь			- файл не пришлось сохранять
//	Неопределено    - файл не удалось сохранить
Функция вСохранитьВФайл(ЗапрашиватьИмяФайла = Ложь)
	Если Дерево.Строки.Количество()>0 Тогда
		ДеревоПриАктивизацииСтроки(ЭлементыФормы.Дерево);
		ТекущаяСтрока	= ЭлементыФормы.Дерево.ТекущиеДанные;
		Если Не ТекущаяСтрока = Неопределено Тогда
			Если ЗапрашиватьИмяФайла ИЛИ  (ПустаяСтрока(ТекущаяСтрока.ПолноеИмя) И Модифицированность) Тогда
				Длг = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
				Длг.ПолноеИмяФайла = мИмяФайла;
				Длг.Каталог = мИмяПути;
				Длг.Заголовок = "Выберите файл";
				Длг.Фильтр = "Файлы встроенного языка("+Маска+")|"+Маска+"|Все файлы (*.*)|*.*";
				Длг.Расширение = СтрЗаменить(Маска,"*.","");
				Если Длг.Выбрать() Тогда
					мИмяФайла 	= Длг.ПолноеИмяФайла;
					мИмяПути 	= Длг.Каталог;
					вСохранитьИмяФайла();
				Иначе
					Возврат Неопределено;
				КонецЕсли;
			Иначе
				мИмяФайла 	= ТекущаяСтрока.ПолноеИмя;
			КонецЕсли;
			Возврат вЗаписатьЗначениеВФайл(ТекущаяСтрока,мИмяФайла);
		КонецЕсли;		
	КонецЕсли;	
Конецфункции

//Записывает выражение текущей строки в файл (возможны различая для разных строк)
//Параметры:
//	ТекущаяСтрока	- <СтрокаДереваЗначений>. Текущая строка
//	ИмяФайла		- <Строка>. Имя файла, в который сохраняем
//Возвращаемое значение.
//	Булево - Значение сохранено.
Функция вЗаписатьЗначениеВФайл(ТекущаяСтрока,ИмяФайла)
	СобытиеОтладки=Формы.Отладка.ДобавитьСобытие("Сохранение в файл "+ИмяФайла);
	Попытка
	    Если ТекущаяСтрока.ЗначениеИзФайла Тогда
			ЗначениеВФайл(ИмяФайла,ТекущаяСтрока.ТекстИзмененый);
		Иначе
			Текст = Новый ЗаписьТекста(ИмяФайла);
			Текст.Записать(ТекущаяСтрока.ТекстИзмененый);
			Текст.Закрыть();
		КонецЕсли;
	Исключение
		Формы.Отладка.ЗавершитьСобытие(СобытиеОтладки,"Информация",ИнформацияОбОшибке().Описание);
		Возврат Неопределено;
	КонецПопытки;
	Формы.Отладка.ЗавершитьСобытие(СобытиеОтладки);
	Возврат Истина;
КонецФункции	

//Сохраняет исходные данные в объект конфигурации
//Параметры:
//	ИмяТаблицы	-<Строка>. Имя таблицы в который сохраняем объект конфигурации, если не задан берем из исходных данных
//
Функция  вСохранитьОбъектКонфигурации(ИмяТаблицы=Неопределено)
	врСписок=Новый СписокЗначений;		
	ДеревоПриАктивизацииСтроки(ЭлементыФормы.Дерево);
	Если ИсходныеДанные.Содержание.Количество()>1 Тогда
		СтрокиЭлементов=Дерево.Строки.НайтиСтроки(Новый Структура("Каталог",Ложь),Истина);
	Иначе
		СтрокиЭлементов=Новый Массив();
		СтрокиЭлементов.Добавить(Дерево.Строки[0]);
	КонецЕсли;
	Для Каждого СтрокаДЗ из СтрокиЭлементов Цикл
		ТекстДок=Новый ТекстовыйДокумент;
		ТекстДок.УстановитьТекст(?(СтрокаДЗ.Изменен,СтрокаДЗ.ТекстИзмененый,СтрокаДЗ.Текст));
		врСписок.Добавить(ТекстДок,СтрЗаменить(СтрокаДЗ.Файл,".data",""));
	КонецЦикла;
	
	ИсходныеДанные.Содержание=врСписок;
	Таблица	= ?(ИмяТаблицы=Неопределено,ИсходныеДанные.Таблица,ИмяТаблицы);
	вСохранитьСтруктуруЗаписи(ИсходныеДанные,Таблица,Найти(Нрег(Таблица),"config")>0);
	
	//обновляем табличные части  что бы визуально отображались изменения
	Если ВладелецФормы.МетаданныеФормы	= "ОбъектыКонфигурации" Тогда
		ВладелецФормы.ОбновитьЗаписьКонфигураци(Таблица,ИсходныеДанные);
	КонецЕсли;
	Если ИмяТаблицы=Неопределено Тогда
		//зафиксируем изменения
		Для Каждого СтрокаДЗ из СтрокиЭлементов Цикл
        	вЗафиксироватьИзменения(СтрокаДЗ);
		КонецЦикла;
	КонецЕсли;
	Возврат Истина;
КонецФункции

//Устанавливает выражение в зависимости от контекста открытия
//
Процедура вУстановитьВыражение()
	ТекущаяСтрока	= ЭлементыФормы.Дерево.ТекущиеДанные;
	Если  ТипЗнч(ИсходныеДанные) = Тип("Структура") Тогда
		Если ИсходныеДанные.Свойство("Содержание") Тогда
			//объекты конфигурации
			Если ИсходныеДанные.Содержание.Количество()=1 Тогда
				ТекущаяСтрока.Текст	= ИсходныеДанные.Содержание[0].Значение.ПолучитьТекст();
				ЭлементыФормы.ТекстМодуля.УстановитьТекст(ТекущаяСтрока.Текст);
				ДеревоПриАктивизацииСтроки(ЭлементыФормы.Дерево);
			КонецЕсли;
		ИначеЕсли ИсходныеДанные.Свойство("ТекущиеДанные") Тогда	
		    //из параметров
			ТекущаяСтрока.Текст	= ВладелецФормы.ПолучитьСтр(ИсходныеДанные.ТекущиеДанные);
			ЭлементыФормы.ТекстМодуля.УстановитьТекст(ТекущаяСтрока.Текст);
			ДеревоПриАктивизацииСтроки(ЭлементыФормы.Дерево);
		КонецЕсли;	
	ИначеЕсли ТекущаяНастройка.Свойство("СтрокаОбработки") Тогда
		//настройка конструктора
		Если ТипЗнч(ТекущаяНастройка.СтрокаОбработки.Настройка)	= Тип("Структура") Тогда
			Если ТекущаяНастройка.СтрокаОбработки.Настройка.Свойство("Текст") Тогда
				ТекущаяСтрока.Текст 	= ТекущаяНастройка.СтрокаОбработки.Настройка.Текст;
			ИначеЕсли ТекущаяНастройка.СтрокаОбработки.Настройка.Свойство("ТекстМодуля") Тогда
				//для версии 1.09 и ниже
				ТекущаяСтрока.Текст 	= ТекущаяНастройка.СтрокаОбработки.Настройка.ТекстМодуля;
			КонецЕсли;	
			ЭлементыФормы.ТекстМодуля.УстановитьТекст(ТекущаяСтрока.Текст);
			ЗагрузитьНастройку();
			ДеревоПриАктивизацииСтроки(ЭлементыФормы.Дерево);
		КонецЕсли;	
	КонецЕсли;	
КонецПроцедуры	

//Обновим признак модифицированности - определяется из дерева
//
Процедура вОбновитьСтатусМодифицированности()
	Модифицированность = Не (Дерево.Строки.Найти(Истина,"Изменен",Истина)=Неопределено);	
КонецПроцедуры	

//Фиксирует изменения в строке ДЗ, обозначающем файл
//Параметры:
//	Строка	- <СтрокаДереваЗначений> Строка для которой фиксируем изменения	
Процедура вЗафиксироватьИзменения(Строка)
	Строка.Текст	= Строка.ТекстИзмененый;	
	Строка.Изменен	= Ложь;	
КонецПроцедуры	

// Устанавливает заголовок формы по имени файла
//
// Параметры:
//  Нет.
//
Процедура вУстановитьЗаголовокФормы()
	ВосстановитьЗначенияПометок(ЭтаФорма,"ОсновныеДействияФормы");
	Если ТипЗнч(ИсходныеДанные) = Тип("Структура") Тогда
		Если ИсходныеДанные.Свойство("Содержание") Тогда
			//открытие из объектов конфигурации
			
			//задаем один раз из владельца
		ИначеЕсли ИсходныеДанные.Свойство("ТекущиеДанные") Тогда
			//открытие из параметров 
			Заголовок = мЗаголовокФормы + " <" + ИсходныеДанные.ТекущиеДанные.ИмяПараметра+">";
		КонецЕсли;	
	ИначеЕсли ТекущаяНастройка.Свойство("СтрокаОбработки") Тогда
		//открытие из конструктора
	Иначе
		//Обычное открытие
		ТекущаяСтрока = ЭлементыФормы.Дерево.ТекущиеДанные;
		Если Не ТекущаяСтрока = Неопределено Тогда
			Если ТекущаяСтрока.ПолноеИмя <> "" Тогда
				Заголовок = мЗаголовокФормы + " : " + ТекущаяСтрока.ПолноеИмя;
			Иначе
				Заголовок = мЗаголовокФормы;
			КонецЕсли;
		КонецЕсли;	
	КонецЕсли;	
КонецПроцедуры // УстановитьЗаголовокФормы()

//Производит декомпиляцию текстов програмных модулей 1С.
//Параметры:
//	КомпилированныйТекст	- <Строка>. Компилированный текст модуля.
//	Форматировать			- <Булево>. Признак необходимости форматировать.
//Возвращаемое значение:
//	<Строка>. Преобразованный текст на встроенном языке
Функция Декомпилировать(КомпилированныйТекст,Форматировать=Истина) Экспорт
	СобытиеОтладки=Формы.Отладка.ДобавитьСобытие("Обновление версий измененых записей конфигурации","Объекты конфигурации");
	Попытка
		ИмяОбработки = "Decode.epf";
		Файл = Новый Файл(ПараметрыОкружения.КаталогОбработки+"\"+ИмяОбработки);
		Если Файл.Существует() Тогда
			Decode = ВнешниеОбработки.Создать(Файл.ПолноеИмя);
			ТекстовыйДокумент=Новый ТекстовыйДокумент;
			ТекстовыйДокумент.УстановитьТекст(КомпилированныйТекст);
			
			ТекстовыйДокумент=Decode.Декодировать(ТекстовыйДокумент);
			Если Форматировать Тогда
				Попытка 
					ТекстовыйДокумент=Decode.Форматировать(ТекстовыйДокумент);		
				Исключение
				КонецПопытки;	
			КонецЕсли;
			Формы.Отладка.ЗавершитьСобытие(СобытиеОтладки);
			Возврат ТекстовыйДокумент.ПолучитьТекст();
		Иначе
			ВызватьИсключение "Файл обработки "+ИмяОбработки+" не найден - "+Файл.ПолноеИмя;
		КонецЕсли;	
	Исключение
		Формы.Отладка.ЗавершитьСобытие(СобытиеОтладки,"ОченьВажное",ИнформацияОбОшибке());
		ВызватьИсключение  "Не удалось выполнить декомпилирование "+ИнформацияОбОшибке().Описание;
	КонецПопытки;
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ, ВЫЗЫВАЕМЫЕ ИЗ ЭЛЕМЕНТОВ ФОРМЫ

//Открываем форму выбора типа
//
Процедура ОбъектыОбработкиНачалоВыбора(Элемент, СтандартнаяОбработка)
	СтруктураДопПараметров = ВладелецФормы.вСформироватьСтруктуруДляФормыВыбораТипа(Элемент,ПолучитьСвойстваОбработки(),ТекущаяНастройка);
	ФормаВыбораТипа.НачалоВыбора(Элемент, СтандартнаяОбработка,СтруктураДопПараметров);
	ОбъектыОбработкиПриИзменении(Элемент);
КонецПроцедуры

//Вызывается при изменеии значения объекта
//
Процедура ОбъектыОбработкиПриИзменении(Элемент)
	Если ТекущаяНастройка.Свойство("Позиция") Тогда
		//проверим соотвестиве введеного значению текущей позиции
		НоваяПозиция	= ВладелецФормы.вСкорректироватьКолонкуПозиции(ТекущаяНастройка.Позиция,ЗначениеПараметра);
		Если НоваяПозиция=Неопределено Тогда
			Предупреждение("Введена неверная переменная.",20);
		ИначеЕсли Не НоваяПозиция.Колонка = ТекущаяНастройка.Позиция.Колонка Тогда
			//выбрана новая позиция отличная от текущей
			СвойстваОбработки	= ПолучитьСвойстваОбработки();
			Если ВладелецФормы.вПозицияДоступнаДляОбработки(НоваяПозиция,СвойстваОбработки.Типы) Тогда
				ИмяНастройки=ТекущаяНастройка.Позиция.Строка[ТекущаяНастройка.Позиция.Колонка.Данные];
				ВладелецФормы.вИзменитьПозициюОбработки(ИмяНастройки,НоваяПозиция,ТекущаяНастройка.Позиция);
				ТекущаяНастройка.Вставить("Позиция",НоваяПозиция);
			Иначе
				Предупреждение("Данная обработка не может использоваться в текущей позиции(расположении).
				|Выберите другую ""колонку"".",20);
			КонецЕсли;	
		КонецЕсли;
		вЗадатьИмяпеременнойНаОсновеПозиции();
	КонецЕсли;
	СформироватьКартинкуДляВыражения(Элемент);
КонецПроцедуры

//Настройку в корзину
//
Процедура ОбъектыОбработкиОчистка(Элемент, СтандартнаяОбработка)
	ФормаВыбораТипа.Очистка(Элемент, СтандартнаяОбработка,Новый Структура("ТекущиеДанные",Новый Структура("ЭтоВыражение,ЗначениеПараметра",(ТипЗнч(Элемент.Значение)=Тип("Строка")),ЗначениеПараметра)));
	//Очистим позицию
	Если ТекущаяНастройка.Свойство("Позиция") Тогда
		ВладелецФормы.вОчиститьПозициюОбработки(ТекущаяНастройка.Позиция);
		ТекущаяНастройка.Удалить("Позиция");
	КонецЕсли;
	СформироватьКартинкуДляВыражения(Элемент);
КонецПроцедуры

//Открываем значение
//
Процедура ОбъектыОбработкиОткрытие(Элемент, СтандартнаяОбработка)
	СтруктураДопПараметров = ВладелецФормы.вСформироватьСтруктуруДляФормыВыбораТипа(Элемент,ПолучитьСвойстваОбработки(),ТекущаяНастройка);
	ФормаВыбораТипа.Открытие(Элемент, СтандартнаяОбработка, СтруктураДопПараметров);
КонецПроцедуры

//Установим картинку
Процедура ВозвращаемоеЗначениеПриИзменении(Элемент)
	СформироватьКартинкуНаОсновеТипов(Элемент);
КонецПроцедуры


///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

Процедура ПриОткрытии()
	вЗадатьИмяпеременнойНаОсновеПозиции();
	вИнициализироватьКП();
	вУстановитьДостпностьЭлементовУправления();
	вВосстановитьИмяФайла();
	вПреобразоватьИсходныеДанныеВФайлы();
	вЗагрузитьФайлыИзКаталога(мИмяПути);
	вУстановитьВыражение();
	ВозвращаемоеЗначениеПриИзменении(ЭлементыФормы.ВозвращаемоеЗначение);
	СформироватьКартинкуДляВыражения(ЭлементыФормы.ОбъектыОбработки);
КонецПроцедуры

Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	ДеревоПриАктивизацииСтроки(ЭлементыФормы.Дерево);
	Если Модифицированность Тогда
		Если ЭлементыФормы.ОсновныеДействияФормы.Кнопки.Сохранить.Доступность Тогда
			Если вСохранить(Истина)=Неопределено Тогда
				Отказ = Истина;
			КонецЕсли;
		Иначе
			Если Не Вопрос("Закрыть без сохранения?",РежимДиалогаВопрос.ОКОтмена)=КодВозвратаДиалога.ОК Тогда
				Отказ = Истина;
			КонецЕсли;	
		КонецЕсли;
	КонецЕсли;	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНОГО ПОЛЯ ДЕРЕВО

//Установим текст в текстовое поле
//Также изменим доступность пунктом контекстного меню
//
Процедура ДеревоПриАктивизацииСтроки(Элемент)
	Если Не Элемент.ТекущаяСтрока = Неопределено Тогда
		//сохраним вначале предыдущую строку 
		Если Не мТекущаяСтрока=Неопределено Тогда
			Попытка
				//в попытке посколку строка может быть удалена
				мТекущаяСтрока.ТекстИзмененый	= ЭлементыФормы.ТекстМодуля.ПолучитьТекст();
				мТекущаяСтрока.Изменен			= (мТекущаяСтрока.Текст<>мТекущаяСтрока.ТекстИзмененый);
			Исключение
			КонецПопытки;	
		КонецЕсли;	
		//после того как сохранили можем менять текущую строку
		мТекущаяСтрока = Элемент.ТекущаяСтрока;
		ЭлементыФормы.ТекстМодуля.УстановитьТекст(Элемент.ТекущаяСтрока.ТекстИзмененый);
		//устанавливаем доступность контекстного меню
		ЭлементыФормы.КП.Кнопки.Дерево.Кнопки.Декомпилировать.Доступность	= (Элемент.ТекущаяСтрока.Файл="image.data");
		ЭлементыФормы.КП.Кнопки.Дерево.Кнопки.ПоказатьФорму.Доступность		= (Элемент.ТекущаяСтрока.Файл="form.data");
		Если Обозреватель.Пометка И ОбозревательОбъектов.Строки.Количество()= 0 Тогда
			вОбновитьОбозревательОбъектов();
		КонецЕсли;
		вОбновитьСтатусМодифицированности();
		вУстановитьЗаголовокФормы();
	КонецЕсли;	
КонецПроцедуры

//Отображаем Картинку
//
Процедура ДеревоПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	ИндексКартинки=-1;
	Если ДанныеСтроки.Каталог Тогда
		ИндексКартинки=0;
	ИначеЕсли Нрег(ДанныеСтроки.Файл)="module.data" или Нрег(ДанныеСтроки.Файл)="text.data" Тогда
		ИндексКартинки=2;
	ИначеЕСли Нрег(ДанныеСтроки.Файл)="form.data" Тогда
		ИндексКартинки=1;
	ИначеЕСли Нрег(ДанныеСтроки.Файл)="image.data" Тогда
		ИндексКартинки=5;
	ИначеЕсли Нрег(Прав(ДанныеСтроки.Файл,3))=".1c" Тогда	
		ИндексКартинки=4;
	Иначе
		ИндексКартинки=3;
	КонецЕсли;
	//определям какой шрифт должен быть 
	Если ДанныеСтроки.Изменен и не ДанныеСтроки.Родитель=Неопределено Тогда 
		Цвет=Новый Цвет(0, 0, 0);
		Шрифт=Новый Шрифт(,,,,Истина);
	Иначе
		Цвет=Новый Цвет(124, 119, 108);
		Шрифт=Новый Шрифт(,,,,Ложь);
	КонецЕсли;
	ОформлениеСтроки.ЦветТекста	= Цвет;
	ОформлениеСтроки.Шрифт		= Шрифт;
	Если ИндексКартинки>-1 Тогда 
		ОформлениеСтроки.Ячейки.Файл.ИндексКартинки =ИндексКартинки;
		ОформлениеСтроки.Ячейки.Файл.ОтображатьКартинку=Истина; 
	Иначе
		ОформлениеСтроки.Ячейки.Файл.ОтображатьКартинку=Ложь; 
	КонецЕСли;	
КонецПроцедуры

//Перед добавлением.Разрешаем добавление только в каталог
//
Процедура ДеревоПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель)
	Отказ	= Истина;
КонецПроцедуры

//Удаляем файл из системы.Если пользователь подтверждает
//
Процедура ДеревоПередУдалением(Элемент, Отказ)
	Если Элемент.ТекущаяСтрока.Каталог Тогда
		Отказ	= Истина;
	Иначе	
		Если Не Вопрос("Файл(ы) будут удалены из системы. Продолжить?", РежимДиалогаВопрос.ОКОтмена) = КодВозвратаДиалога.ОК Тогда
			Отказ	= Истина;	
		Иначе
			УдалитьФайлы(Элемент.ТекущаяСтрока.ПолноеИмя);	
		КонецЕсли;
	КонецЕсли;	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНОГО ПОЛЯ ОБОЗРЕВАТЕЛЬ ОБЪЕКТОВ

//Спозиционируемся в тексте на текущем элементе
//
Процедура ОбозревательОбъектовПриАктивизацииСтроки(Элемент)
	Начало=НайтиВхождение(ЭлементыФормы.ТекстМодуля.ПолучитьТекст(),Элемент.ТекущиеДанные.Unid,Элемент.ТекущиеДанные.Очередность);
	Если Начало>0 Тогда
		ЭлементыФормы.ТекстМодуля.УстановитьГраницыВыделения(Начало,Начало+36);
	КонецЕсли;	
КонецПроцедуры

//Покажем картинку
//
Процедура ОбозревательОбъектовПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	Перем ИндексКартинки;
	Доп=0;
	Если ДанныеСтроки.Уровень()=0 Тогда
		СтрокаОриентир=ДанныеСтроки;
	Иначе
		Доп=1;
		СтрокаОриентир=ДанныеСтроки.Родитель;
	КонецЕсли;	
	Если Нрег(СтрокаОриентир.Имя)="реквизиты" Тогда
		ИндексКартинки=0+Доп;
	ИначеЕсли Нрег(СтрокаОриентир.Имя)="табличныечасти" Тогда
		ИндексКартинки=2+Доп;
	ИначеЕсли Нрег(СтрокаОриентир.Имя)="измерения" Тогда
		ИндексКартинки=4+Доп;
	ИначеЕсли Нрег(СтрокаОриентир.Имя)="ресурсы" Тогда
		ИндексКартинки=6+Доп;
	КонецЕсли;
	Если ДанныеСтроки.Уровень()=2 Тогда
		ИндексКартинки=1;
	КонецЕсли;	
	Если Не ИндексКартинки=Неопределено Тогда
		Если ИндексКартинки=1 	Тогда
			Структура=Новый Структура("Значение,Картинка",ДанныеСтроки.Тип);
			СформироватьКартинкуНаОсновеТипов(Структура);
			Если ТипЗнч(Структура.Картинка) = Тип("Картинка") Тогда 
				ОформлениеСтроки.Ячейки.Имя.Картинка=Структура.Картинка;
			КонецЕсли;	
		Иначе	
    		ОформлениеСтроки.Ячейки.Имя.ИндексКартинки =ИндексКартинки;
		КонецЕсли;	
		ОформлениеСтроки.Ячейки.Имя.ОтображатьКартинку=истина;
	КонецЕсли;
КонецПроцедуры

//Изменим флажок родителя
//
Процедура ОбозревательОбъектовПриИзмененииФлажка(Элемент, Колонка)
	ИзменениеФлажка(Элемент.ТекущиеДанные,Колонка.ДанныеФлажка,Колонка.Данные);	
КонецПроцедуры



////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

//Формируем структу текста модуля
//
Процедура ОсновныеДействияФормыСтруктураМодуля(Кнопка)
	ФормаСтруктурыМодуля=ПолучитьФорму("СтруктураМодуля",ЭтаФорма);
	Сз=Новый СписокЗначений;
	Если ТипЗнч(ИсходныеДанные)=Тип("Структура") И Дерево.Строки.Количество()>0 Тогда
		//В случае модяля формы покажем еще и обработчики элементов управления
		
		//Вначале поставим модуль если он есть 
		СтрокаМодуля=Дерево.Строки.Найти("text.data","Файл",Истина);
		Если Не СтрокаМодуля=Неопределено Тогда
			Сз.Добавить(?(СтрокаМодуля.Изменен,СтрокаМодуля.ТекстИзмененый,СтрокаМодуля.Текст),СтрокаМодуля.ПолноеИмя);		
		КонецЕсли;	
		//Паки будут образовывать списки структуры -форма, модуль кроме первой папки разумеется
		СтрокиКаталогов=Дерево.Строки.НайтиСтроки(Новый Структура("Каталог",Истина),Истина);
		Для Каждого СтрокаКаталога из СтрокиКаталогов Цикл
			Если СтрокиКаталогов.Количество()>1
				И СтрокаКаталога.ПолноеИмя=Дерево.Строки[0].ПолноеИмя Тогда
				//это полный объект первую папку смотрет не будем в ней модуль, а он уже добавлен
				Продолжить;
			КонецЕсли;
			СтруктураФормы=Новый Структура("Модуль,Форма");
			СтрокиФайлов=СтрокаКаталога.Строки.НайтиСтроки(Новый Структура("Каталог",Ложь));
			Для Каждого СтрокаФайлов из СтрокиФайлов Цикл
				Если СтрокаФайлов.Файл="form.data" Тогда
					СтруктураФормы.Форма=?(СтрокаФайлов.Изменен,СтрокаФайлов.ТекстИзмененый,СтрокаФайлов.Текст);		
				ИначеЕсли СтрокаФайлов.Файл="module.data" Тогда
					СтруктураФормы.Модуль=?(СтрокаФайлов.Изменен,СтрокаФайлов.ТекстИзмененый,СтрокаФайлов.Текст);		
				КонецЕсли;
			КонецЦикла;
			Сз.Добавить(СтруктураФормы,СтрокаКаталога.ПолноеИмя);
		КонецЦикла;	
	Иначе
		Сз.Добавить(ЭлементыФормы.ТекстМодуля.ПолучитьТекст(),"Модуль");
	КонецЕсли;	
	ФормаСтруктурыМодуля.СписокМодулей=Сз;
	ФормаСтруктурыМодуля.Открыть();
КонецПроцедуры

//Открывает файл из встроенного языка
//
Процедура ОсновныеДействияФормыОткрыть(Кнопка)
	Если Не вСохранить(Истина)= Неопределено Тогда
		Длг = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
		Длг.ПолноеИмяФайла = мИмяФайла;
		Длг.Каталог = мИмяПути;
		Длг.Заголовок 	= "Выберите файл встроенного языка 1с";
		Длг.Фильтр = "Файлы встроенного языка("+Маска+")|"+Маска+"|Все файлы (*.*)|*.*";
		Длг.Расширение = СтрЗаменить(Маска,"*.","");
		Если Длг.Выбрать() Тогда
			мИмяФайла 	= Длг.ПолноеИмяФайла;
			мИмяПути 	= Длг.Каталог;
			вСохранитьИмяФайла();
			вЗагрузитьФайлыИзКаталога(мИмяПути);
		КонецЕсли;		
	КонецЕсли;	
КонецПроцедуры

//Сохраняет текущее выражение
//
Процедура ОсновныеДействияФормыСохранить(Кнопка)
	вСохранить();
КонецПроцедуры

//Скрываем или отображаем системные панели\
//
Процедура ОсновныеДействияФормыПанели(Кнопка)
	Если Не ПустаяСтрока(Кнопка.Пояснение) Тогда
		Выполнить(Кнопка.Пояснение);
	КонецЕсли;	
КонецПроцедуры

//Сохраняет выражение в выбранный файл
//
Процедура ОсновныеДействияФормыСохранитьКак(Кнопка)
	вСохранитьВФайл(Истина);
КонецПроцедуры

//Сохраняет копию объекта конфигурации в другую таблицу
//
Процедура ОсновныеДействияФормыОбновитьКонфигурацию(Кнопка)
	вСохранитьОбъектКонфигурации(Кнопка.Пояснение);
КонецПроцедуры

//Выполняет выражение или групповую обработку
//
Процедура ОсновныеДействияФормыВыполнить(Кнопка)
	Если  ТекущаяНастройка.Свойство("СтрокаОбработки") Тогда
		//групповая обработка
		Если ТекущаяНастройка.Свойство("Позиция") Тогда
			Если вСохранить(Истина)=Истина Тогда
				//выполнение текущей обработки и всех вложенных
				ВладелецФормы.ТаблицаВыбранныхОбработок.Очистить();
				ВладелецФормы.вДобавитьОбработкуВТаблицу(ТекущаяНастройка.Позиция);
	            ВладелецФормы.ВыполнитьОбработки();
			КонецЕсли;	
		Иначе
			//обработка явно выбранных объектов
			Если Вопрос("Выполнить обработку для выбранного(ых) объекта",РежимДиалогаВопрос.ОКОтмена)=КодВозвратаДиалога.ОК Тогда
				ТекущаяНастройка.СтрокаОбработки.Настройка	= Новый Структура("Текст",вПолучитьТекстТекстовогоПоля(Истина,Элементыформы.ТекстМодуля));
				//Выполним 
				Параметры		= ВладелецФормы.вПолучитьСтруктуруПараметров();
				Для Каждого Объект ИЗ вЗначениеВКоллекцию(вПолучитьЯвныйОбъектОбработки(Параметры)) Цикл
					ВыполнитьОбработку(Параметры,Объект);	
				КонецЦикла;
				//очистим структуру
				ТекущаяНастройка.СтрокаОбработки.Настройка	= Новый Структура("Текст","");
			КонецЕсли;	
		КонецЕсли;	
	Иначе	
		//обычное открытие
		Выражение 	= вПолучитьТекстТекстовогоПоля(Истина,Элементыформы.ТекстМодуля);
		вВычислитьЗначение(Новый Структура("Выражение",Выражение));
	КонецЕсли;	
КонецПроцедуры


//Вызывает конструктор запроса для выделеного текста
//
Процедура КПКонструкторЗапроса(Кнопка)
	Текст=МодифицироватьЗапросВКонструкторе(Строка(ЭлементыФормы.ТекстМодуля.ВыделенныйТекст));
	Если Не Текст=Неопределено Тогда
		ЭлементыФормы.ТекстМодуля.ВыделенныйТекст=Текст;
	КонецЕсли;	
КонецПроцедуры

//Открыват форму на основе двоичных данных
Процедура КППоказатьФорму(Кнопка)
	Форма=СгенерироватьФорму(ЭлементыФормы.ТекстМодуля.ПолучитьТекст());
	Форма.Открыть();
КонецПроцедуры

//Обновляет дерево файлов
//
Процедура КППеречитать(Кнопка)
	вЗагрузитьФайлыИзКаталога(мИмяПути);
КонецПроцедуры

//Сравнивает с оригинальным фалом (последний раз сохраненным)
//
Процедура КПСравнить(Кнопка)
	ДеревоПриАктивизацииСтроки(ЭлементыФормы.Дерево);
	ТекущаяСтрока	= ЭлементыФормы.Дерево.ТекущиеДанные;
	врФайл	= ПолучитьИмяВременногоФайла();
	вЗаписатьЗначениеВФайл(ТекущаяСтрока,врФайл);

	Сравнение=Новый СравнениеФайлов();
	Сравнение.ПервыйФайл	= ТекущаяСтрока.ПолноеИмя;
	Сравнение.ВторойФайл	= врФайл;
	Сравнение.СпособСравнения=СпособСравненияФайлов.ТекстовыйДокумент;
	Сравнение.ПоказатьРазличия();
КонецПроцедуры

//Открывает окно выбора параметров
//результат выбора вставляем в текст
Процедура КМПеременные()
	СтруктураДопПараметров	= Новый Структура();
	СтруктураДопПараметров.Вставить("ТекущиеДанные",Новый Структура("ЭтоВыражение,ЗначениеПараметра",Истина));
	СтруктураДопПараметров.Вставить("ЗапретитьВстроенныйЯзык");
	Если ТипЗнч(ИсходныеДанные) = Тип("Структура") Тогда
		//открытие из параметров
		СтруктураДопПараметров.Вставить("ДоступныеСтруктуры",ИсходныеДанные.ДоступныеСтруктуры);
	ИначеЕсли ТекущаяНастройка.Свойство("СтрокаОбработки") Тогда
		//открытие из конструктора
		Структура	= Новый Структура;
		Структура.Вставить("Параметры",		ВладелецФормы.вПолучитьСтруктуруПараметров());
		Структура.Вставить("Объект",		вПолучитьОбразецОбъекта(Структура.Параметры));
		Если ТекущаяНастройка.Свойство("Позиция") Тогда
			//групповая обработка
			Структура.Вставить("ТекущиеДанные",	ВладелецФормы.вПолучитьТекущиеДанные());
        	Строки		= ПолучитьСтроки(Структура.ТекущиеДанные.Владелец(),Истина);
			Структура.Вставить("ЭтаФорма",Новый Структура("ИндексСтроки,КоличествоСтрок",0,Строки.Количество()));
		Иначе
			//обработка списка
			
		КонецЕсли;	
			
        СтруктураДопПараметров.Вставить("ДоступныеСтруктуры",Структура);
	КонецЕсли;	
	
	ФормаВыбораТипа			= ПолучитьФорму("ФормаВыбораТипа",ЭтаФорма);
	КонтекстФормыВыбораТипа	= "Язык";
	ФормаВыбораТипа.НачалоВыбора(Новый Структура("Значение",ПолучитьСтр(Неопределено)), Ложь, СтруктураДопПараметров);
 КонецПроцедуры

 //Таблицу абозревателя копирует в параметры конструктора
 //
Процедура КПОбработатьВКонтрукторе(Кнопка)
	ДеревоДляОбработки=ВладелецФормы.ДеревоКонф.Скопировать();
	ДеревоДляОбработки.Колонки.Удалить(ДеревоДляОбработки.Колонки["Brief_Name"]);
	ДеревоДляОбработки.Колонки.Удалить(ДеревоДляОбработки.Колонки["Картинка"]);
	ДеревоДляОбработки.Колонки.Удалить(ДеревоДляОбработки.Колонки["КартинкаЭлементов"]);
	ДеревоДляОбработки.Колонки.Удалить(ДеревоДляОбработки.Колонки["ИскатьИД"]);
	ФормаГрупповойОбработки=ПередатьТаблицуДляГрупповойОбработки(ДеревоДляОбработки);
	ТекущаяСтрока=ФормаГрупповойОбработки.ДеревоЗапросов.Строки[0];
		Массив=ОбозревательОбъектов.Строки.НайтиСтроки(Новый Структура("Пометка",1),Истина);
		СписокСвойств=Новый СписокЗначений;
		Для каждого Элемент из Массив Цикл
			СписокСвойств.Добавить(Элемент.Значение,Элемент.Родитель.Значение[0]);		
		КонецЦикла;	
	ФормаГрупповойОбработки.вВставитьПараметр("СписокСвойств",СписокСвойств);
	ФормаГрупповойОбработки.вВставитьПараметр("ИзмененныеМД",Новый СписокЗначений);
КонецПроцедуры

//Обновляет обозреватель объектов
//
Процедура КППеречитатьОбозреватель(Кнопка)
	вОбновитьОбозревательОбъектов();
КонецПроцедуры

//Декомпилирует текущий модуль, добавляет в дерево еще одну строку
//
Процедура КПДекомпилировать(Кнопка)
	НоваяСтрока=Дерево.Строки[0].Строки.Добавить();
	ТекстовыйДокумент=Новый ТекстовыйДокумент();
	ТекстовыйДокумент.УстановитьТекст(Декомпилировать(ЭлементыФормы.ТекстМодуля.ПолучитьТекст()));
	ЭтотФайл=Новый Файл(Дерево.Строки[0].Файл+"\text.data");
	ТекстовыйДокумент.Записать(ЭтотФайл.ПолноеИмя);
	НоваяСтрока.Файл=ЭтотФайл.Имя;
	НоваяСтрока.ПолноеИмя=ЭтотФайл.ПолноеИмя;
		вДобавитьФайлДерево(ЭтотФайл,НоваяСтрока);
КонецПроцедуры

//Переходит к справке на сайте
//
Процедура ПерейтиКСправке(Кнопка)
	Если Не ПустаяСтрока(Кнопка.Пояснение) Тогда
		ЗапуститьПриложение(Кнопка.Пояснение);	
	КонецЕсли;	
КонецПроцедуры



ФормаВыбораТипа					= ПолучитьФорму("ФормаВыбораТипа",ЭтаФорма);
ЗакрыватьПриЗакрытииВладельца	= Истина;
МетаданныеФормы					= "ОбработкаРезультата_ПроизвольныйАлгоритм";
ТекущаяНастройка				= Новый Структура;
Обозреватель					= ЭлементыФормы.ОсновныеДействияФормы.Кнопки.ОбозревательОбъектов;
ДеревоПапок						= ЭлементыФормы.ОсновныеДействияФормы.Кнопки.ДеревоПапок;
мЗаголовокФормы					= Заголовок;
