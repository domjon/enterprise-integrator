Перем МетаданныеФормы 	Экспорт;
Перем ФормаВыбораТипа;
Перем ТекущаяНастройка 	Экспорт;	//Структура (СтрокаОбработки,Позиция)
Перем ТаблицаСвойств;

////////////////////////////////////////////////////////////////////////////////
//ОБЪЯЗАТЕЛЬНЫЕ ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

//Возврашает структуру, которая описывает,
//поведение обработки в рамках групповой обработки
Функция ПолучитьСвойстваОбработки() Экспорт
	СтруктураСвойств=Новый Структура;
	СтруктураСвойств.Вставить("Действие"				,ДействиеПеретаскивания.Копирование); 	//Действие при назначении обработки
		//ДействиеПеретаскивания.Отмена 		- обработку нельзя использовать в таблице выбраннх обработок те обработка не предназначена для пакетной обработки 
		//ДействиеПеретаскивания.Копирование  	- обработку необходимо настраивать 
		//ДействиеПеретаскивания.Перемещение  	- обработка уже настроена ее нужнно просто добавить
	ДоступныеТипы		= ПараметрыОкружения.ВсеНаборыЗаписей;
	ДоступныеТипы		= Новый ОписаниеТипов(ДоступныеТипы,ПараметрыОкружения.ВсеОбъекты.Типы());	
	СтруктураСвойств.Вставить("Типы"					,Новый ОписаниеТипов(ДоступныеТипы,ПараметрыОкружения.ВсеСсылки.Типы(),Перечисления.ТипВсеСсылки().Типы()));
	СтруктураСвойств.Вставить("Функция"					,Истина); //обработка не возвращает значений
	//Капитан очевидность
	СтруктураСвойств.Вставить("Картинка"				,КартинкаЗаголовка);
	СтруктураСвойств.Вставить("ИспользоватьНастройки"	,(СтруктураСвойств.Действие=ДействиеПеретаскивания.Копирование));
	СписокВложенных=Новый СписокЗначений;
	СписокВложенных.Добавить("ОбменДанными.Загрузка","ОбменДанными.Загрузка");
	СписокВложенных.Добавить("Записать","Записать",Истина);
	СтруктураСвойств.Вставить("РекомендуемыеВложенные"	,СписокВложенных);
	Возврат  СтруктураСвойств;
КонецФункции	

// Выполняет обработку объектов.
//
// Параметры:
//  Параметры				-<Структура>. Структура доступных параметров
//  Объект					-<Произвльный>. Обрабатываемый объект, тип в соотвествии со свойствами обработки
//	ТекущиеДанные			-<СтрокаТабличнойЧасти>. Строка табличной части.
//	ДополнительныеСтроки    -<Массив>. Массив дополнительных строк, которые были обработаны текущей обработкой
//
Функция ВыполнитьОбработку(Параметры=Неопределено,Объект=Неопределено,ТекущиеДанные=Неопределено, ДополнительныеСтроки = Неопределено) Экспорт
	Если ТекущаяНастройка.Свойство("СтрокаОбработки") Тогда
		ТипОбъекта	= ТипЗнч(Объект);
		Если ПолучитьСвойстваОбработки().Типы.СодержитТип(ТипОбъекта) Тогда 
			Если ПараметрыОкружения.ВсеСсылки.СодержитТип(ТипОбъекта) Тогда
				//Сcылка
				мОбъект 	= Объект.ПолучитьОбъект();
			ИначеЕсли ПараметрыОкружения.ВсеНаборыЗаписей.СодержитТип(ТипОбъекта) Тогда
				//НаборыЗаписей
				мОбъект 	= Объект;
			Иначе
				//Объект
				мОбъект 	= Объект;
				ТипОбъекта  = ТипЗнч(Объект.Ссылка);
			КонецЕсли;	
	     	ИспользуемыеТаблицы = Дерево.Строки.НайтиСтроки(Новый Структура("ЭтоТаблица,Использовать,Тип",Истина,Истина,СоздатьОписаниеТиповНаОсновеКолекции(ТипОбъекта)),Истина);
			Для Каждого Таблица Из  ИспользуемыеТаблицы Цикл
				Если ТипЗнч(Таблица.Свойства) = Тип("ТаблицаЗначений") Тогда
					ЭтоСсылочныйТип		= вОписаниеТиповПересекаются(Таблица.Тип,ПараметрыОкружения.ВсеСсылки);
					ИзменяемыеРеквизиты = Таблица.Свойства.НайтиСтроки(Новый Структура("Использовать",Истина));
					Если ЭтоСсылочныйТип Тогда
						Для Каждого Реквизит ИЗ  ИзменяемыеРеквизиты Цикл
							вУстановитьЗначениеРеквизита(Реквизит,Параметры,мОбъект,ТекущиеДанные);	
						КонецЦикла;
					Иначе
						//Это НаборЗаписей
						Для Каждого Запись ИЗ мОбъект Цикл
							Для Каждого Реквизит ИЗ  ИзменяемыеРеквизиты Цикл
								вУстановитьЗначениеРеквизита(Реквизит,Параметры,мОбъект,ТекущиеДанные,Запись,(Таблица.Родитель.Представление = "РегистрыБухгалтерии"));	
							КонецЦикла;	
						КонецЦикла;	
					КонецЕсли;	
				КонецЕсли;
				//установим реквизиты колекции 
				ИспользуемыеТЧ = Таблица.Строки.НайтиСтроки(Новый Структура("ЭтоТаблица,Использовать",Истина,Истина),Истина);
				Для Каждого ТЧ ИЗ ИспользуемыеТЧ Цикл
					Если ТипЗнч(ТЧ.Свойства) = Тип("ТаблицаЗначений") Тогда
						ИмяКолекции	= "";
						//определим имя коллекции
						Для Каждого Элемент ИЗ СтрокуВСписок(ТЧ.ПолноеИмя,".") Цикл
							ИмяКолекции	=Элемент.Значение;
						КонецЦикла;
						Если Не ПустаяСтрока(ИмяКолекции) Тогда
							ИзменяемыеРеквизиты = ТЧ.Свойства.НайтиСтроки(Новый Структура("Использовать",Истина));			
							Для Каждого Реквизит ИЗ  ИзменяемыеРеквизиты Цикл
								вУстановитьЗначениеРеквизитаКоллекции(Реквизит,ИмяКолекции,Параметры,мОбъект,ТекущиеДанные);	
							КонецЦикла;
						КонецЕсли;
					КонецЕсли;	
				КонецЦикла;	
			КонецЦикла;
			Возврат вЗначениеВКоллекцию(мОбъект);
		КонецЕсли;	
	КонецЕсли;	
КонецФункции // ВыполнитьОбработку()

//Загружает текущую настройку
//
Процедура ЗагрузитьНастройку() Экспорт
	Если ТекущаяНастройка.Свойство("СтрокаОбработки") Тогда
		Если ТипЗнч(ТекущаяНастройка.СтрокаОбработки.Настройка)	= Тип("ДеревоЗначений") Тогда
			Дерево	=  ТекущаяНастройка.СтрокаОбработки.Настройка.Скопировать();	
		КонецЕсли;
	КонецЕсли;	
КонецПроцедуры

//Функция возращает типы возможных возвращаемых значений
//
Функция ПолучитьТипВозрЗначений() Экспорт
	ОписаниеТипов=Новый ОписаниеТипов();
	ИспользуемыеТаблицы	= Дерево.Строки.НайтиСтроки(Новый Структура("Использовать,ЭтоТаблица",Истина,Истина),Истина);
	МассивТипов=Новый Массив;
	Для Каждого Строка ИЗ ИспользуемыеТаблицы Цикл
		Если ТипЗнч(Строка.Тип) = Тип("ОписаниеТипов") Тогда
			Если вОписаниеТиповПересекаются(ПараметрыОкружения.ВсеСсылки,Строка.Тип) Тогда
				//Получим объектный тип, а не ссылочный - именно он возвращается
				Если СтрЧислоВхождений(Строка.ПолноеИмя,".")=1 Тогда
					ОписаниеТипов=Новый ОписаниеТипов(ОписаниеТипов,СтрЗаменить(Строка.ПолноеИмя,".","Объект."));
				КонецЕсли;
			Иначе
				ОписаниеТипов=Новый ОписаниеТипов(ОписаниеТипов,Строка.Тип.Типы());
			КонецЕсли;	
		КонецЕсли;	
	КонецЦикла;	
	Возврат ОписаниеТипов;	
КонецФункции

//Формирует алгоритм на встроенном языке, отражающий суть данной обработки
//
Функция СформироватьАлгоритм() Экспорт 
	стрАлгоритм="";
	Возврат стрАлгоритм; 
КонецФункции

///////////////////////////////////////////////////////////////////////////////
// ВСПОМОГАТЕЛЬНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

//Сохраняет текущую настройку
//Параметры:
//	ЗапрашиватьСохранение	-<Булево>. Определеяет необходимость вопроса.
//
функция вСохранитьНастройку(ЗапрашиватьСохранение = Ложь)
	Если Модифицированность Тогда
		Если ЗапрашиватьСохранение Тогда
			Ответ = Вопрос("Сохранить изменения?", РежимДиалогаВопрос.ДаНетОтмена);
			Если Ответ = КодВозвратаДиалога.Отмена Тогда
				Возврат Неопределено;				
			ИначеЕсли Ответ = КодВозвратаДиалога.Нет Тогда
				Возврат Ложь;
			КонецЕсли;
		КонецЕсли;	
	КонецЕсли;
	ТекущаяНастройка.СтрокаОбработки.Настройка	= Дерево.Скопировать();
	ТекущаяНастройка.СтрокаОбработки.Функция	= (ПолучитьТипВозрЗначений().Типы().Количество()>0);
	Модифицированность	= Ложь;
	ВладелецФормы.Модифицированность	= Истина;
	Возврат Истина;
КонецФункции

//Функция для совместимости с формой выбора типа
//Параметры:
//	Строка	-<Неопределено>.
//	Текст	-<Строка>. Текст который необходимо сохранить.
Процедура УстановитьСтр(Строка,Текст) Экспорт
	Если ТипЗнч(Строка)= Тип("СтрокаТаблицыЗначений") Тогда
		Если СтрДлина(Текст)>1000 Тогда
			Строка.ЗначениеПараметра=Лев(Текст,1000);
			Строка.ЗначениеСтр=Сред(Текст,1001);
		Иначе
			Строка.ЗначениеПараметра=Текст;
			//очишем та как при получении будем складывать
			Строка.ЗначениеСтр="";
		КонецЕсли;	
	Иначе	
		ЗначениеПараметра=Текст;
	КонецЕсли;	
КонецПроцедуры

///Функция для совместимости с формой выбора типа
//Параметры:
//	Строка	-<Неопределено>
//Вовзращаемое занчение:
//	Текст неограниченной длинны
Функция ПолучитьСтр(Строка)Экспорт
	Если ТипЗнч(Строка)= Тип("СтрокаТаблицыЗначений") Тогда
		Возврат ""+Строка(Строка.ЗначениеПараметра)+Строка.ЗначениеСтр	
    Иначе
		Возврат ЗначениеПараметра;	
	КонецЕсли;	
КонецФункции	

//Задает имя переменной(ЗначениеПараметра) основываясь на позиции текущей обработки
//
Процедура вЗадатьИмяпеременнойНаОсновеПозиции()
	Если ТекущаяНастройка.Свойство("Позиция") Тогда
		//для настройки определена позиция поэтой некоторые ограничения в форме
		ЗначениеПараметра	= "ТекущиеДанные."+ТекущаяНастройка.Позиция.Колонка.Имя;
	КонецЕсли;		
Конецпроцедуры	

//Получает образец объекта для подсказки переменной
Функция вПолучитьОбразецОбъекта(Параметры)
	Если ТекущаяНастройка.Свойство("Позиция") Тогда
		Возврат Владелецформы.вПолучитьТекущийОбъект(ТекущаяНастройка.Позиция);
	Иначе
		Результат = вЗначениеВКоллекцию(вПолучитьЯвныйОбъектОбработки(Параметры));
		Если Не Результат=Неопределено Тогда
			Возврат Результат[0];
		КонецЕсли;	
	КонецЕсли;	
КонецФункции

//Получает объект обработки указанный явно в форме, может быть как ссвлончого типа так,
//так и вычисляемое выражение
//Параметры:
//	Параметры	- <Структура>. Структура параметров.		
Функция вПолучитьЯвныйОбъектОбработки(Параметры)
	Если ТипЗнч(ЗначениеПараметра) = Тип("Строка") Тогда
		Попытка
			Значение	= вВычислитьЗначение(Новый Структура("Выражение",ЗначениеПараметра),Параметры);
			Возврат Значение;
		Исключение
			Возврат ЗначениеПараметра;
		КонецПопытки;	
	Иначе
		Возврат ЗначениеПараметра; 
	КонецЕсли;
КонецФункции	


//Процедура загружате дерево метаданных
//Параметры:
//	Нет.
Процедура вЗагрузитьДерево()
	СтруктураОграничений= Новый Структура("ОграничениеТипов,СписокСвойств,НеЗагружатьДопСвойства,НеПолучатьИдентификатор");
	СвойстваОбработки	= ПолучитьСвойстваОбработки();
	Если ТекущаяНастройка.Свойство("Позиция") Тогда
		СтруктураОграничений.ОграничениеТипов	= ВладелецФормы.вПолучитьДоступныеТипы(ТекущаяНастройка.Позиция);
		вПреобразоватьОбъектныеТипыВСсылочные(СтруктураОграничений.ОграничениеТипов);
	Иначе
		//Для настройки без позиции регистры не выводим
		СтруктураОграничений.ОграничениеТипов	= Новый ОписаниеТипов(СвойстваОбработки.Типы,,ПараметрыОкружения.ВсеНаборыЗаписей.Типы());
	КонецЕсли;	
	СтруктураОграничений.СписокСвойств		= Новый СписокЗначений;
	СтруктураОграничений.СписокСвойств.Добавить("ТабличныеЧасти");
	СтруктураОграничений.СписокСвойств.Добавить("ВидыСубконто");
	СтруктураОграничений.СписокСвойств.Добавить("БазовыеВидыРасчета");
	СтруктураОграничений.СписокСвойств.Добавить("ВедущиеВидыРасчета");
	СтруктураОграничений.СписокСвойств.Добавить("ВытесняющиеВидыРасчета");
	ЗаполнитьДерево(Дерево,СтруктураОграничений);	
КонецПроцедуры

//Загружает свойства объекта метаданных
//Параметры:
//	Строка	- <СтрокаДереваЗначений>. Строка объекта метаданных
//
Процедура вЗагрузитьСвойства(Строка)
	Если ТипЗнч(Строка) = Тип("СтрокаДереваЗначений") Тогда
		СписокСвойств	= вПолучитьСвойстваОбъектаМетаданных(Строка);
		Для Каждого Свойство ИЗ СписокСвойств Цикл
			Если Не Свойство.Пометка Тогда
				НовоеСвойство 					= Свойства.Добавить();			
				НовоеСвойство.ИмяПараметра		= Свойство.Представление;
				НовоеСвойство.ОграничениеТипа	= Свойство.Значение;
			КонецЕсли;	
		КонецЦикла;	
	    ВладелецФормы.ЗагрузитьСвойства(Строка);
	КонецЕсли;	
КонецПроцедуры	

//Формирует дополнительную структуру параметров для формы выбора типа, для объектов ТЧ
//
Функция вСформироватьСтруктуруДляФормыВыбораТипа()
	ТекДанные=ЭлементыФормы.Свойства.ТекущиеДанные;
	СтруктураДопПараметров=Новый Структура();
	СтруктураДопПараметров.Вставить("ТекущиеДанные",ТекДанные);
	СтруктураДопПараметров.Вставить("ОграничениеТипа",ТекДанные.ОграничениеТипа);
	СтруктураДопПараметров.Вставить("ДоступныеСтруктуры",Новый Структура);
	СтруктураПараметров = ВладелецФормы.вПолучитьСтруктуруПараметров();
	//СтруктураПараметров.Удалить(ТекДанные.ИмяПараметра);	
		СтруктураДопПараметров.ДоступныеСтруктуры.Вставить("Параметры",СтруктураПараметров);
	Если ТекущаяНастройка.Свойство("Позиция") Тогда
		СтруктураДопПараметров.ДоступныеСтруктуры.Вставить("ТекущиеДанные",	ВладелецФормы.вПолучитьТекущиеДанные());
		СтруктураДопПараметров.ДоступныеСтруктуры.Вставить("Объект",		вПолучитьОбразецОбъекта(СтруктураПараметров));
	КонецЕсли;
	ПКО =  ЭлементыФормы.Дерево.ТекущаяСтрока;
	ПКС =  ЭлементыФормы.Свойства.ТекущаяСтрока;
	Если Не ПКО = Неопределено И Не ПКС = Неопределено Тогда
		ЭтоСсылочныйТип		= вОписаниеТиповПересекаются(ПКО.Тип,ПараметрыОкружения.ВсеСсылки);
		Если ПКО.Уровень()>1 Тогда
			//Доступна переменная строка ТЧ
			Для Каждого Элемент ИЗ СтрокуВСписок(ПКО.ПолноеИмя,".") Цикл
				ИмяКолекции	=Элемент.Значение;
			КонецЦикла;
			Образец = вПолучитьОбразецОбъекта(СтруктураПараметров);
			Если Не Образец =Неопределено Тогда
				ТЧ	= Образец[ИмяКолекции];
				СтруктураСтроки = Новый Структура();
				Для Ном =0 ПО Свойства.Индекс(ПКС)-1 Цикл  //только свойства выше текущего
					Колонка = ПКО.Свойства[Ном];
					СтруктураСтроки.Вставить(Колонка.ИмяПараметра,Колонка.ОграничениеТипа.ПривестиЗначение(Колонка.ЗначениеПараметра));		
				КонецЦикла;
				Если ТЧ.Количество()>0 Тогда
	            	ЗаполнитьЗначенияСвойств(СтруктураСтроки,ТЧ[0]);
				КонецЕсли;
				СтруктураДопПараметров.ДоступныеСтруктуры.Вставить("СтрокаТЧ",СтруктураСтроки);
			КонецЕсли;
		ИначеЕсли Не ЭтоСсылочныйТип Тогда
			//Доступная переменная Запись
			СтруктураЗаписи = Новый Структура();
			Для Ном =0 ПО Свойства.Индекс(ПКС)-1 Цикл  //только свойства выше текущего
				Колонка = ПКО.Свойства[Ном];
				СтруктураЗаписи.Вставить(Колонка.ИмяПараметра,Колонка.ОграничениеТипа.ПривестиЗначение(Колонка.ЗначениеПараметра));		
			КонецЦикла;
			СтруктураДопПараметров.ДоступныеСтруктуры.Вставить("Запись",СтруктураЗаписи);
		КонецЕсли;
	КонецЕсли;	
	Возврат СтруктураДопПараметров; 	
КонецФункции

//Устанавливает признак использования для всех родителей в дереве
//Параметры:
//	СтрокаДЗ - <СтрокаДереваЗначений>	
Процедура вОбновитьПризнакИспользования(СтрокаДЗ)
	Если СтрокаДЗ.ЭтоТаблица 
		И ТипЗнч(СтрокаДЗ.Свойства) = Тип("ТаблицаЗначений") Тогда
		СтрокаДЗ.Использовать	= (СтрокаДЗ.Свойства.Найти(Истина,"Использовать")<>Неопределено);
		Если НЕ СтрокаДЗ.Использовать Тогда
			СтрокаДЗ.Использовать	= (СтрокаДЗ.Строки.Найти(Истина,"Использовать",Ложь)<>Неопределено);			
		КонецЕсли;;	
	Иначе
		СтрокаДЗ.Использовать	= (СтрокаДЗ.Строки.Найти(Истина,"Использовать",Ложь)<>Неопределено);			
	КонецЕсли;	
КонецПроцедуры

//Получает установленное для реквизита значение
//Параметры:
//	Реквизит			-<СтрокаТабличнойЧасти>. Свойства реквизита.
//  Параметры			-<Структура>. Структура доступных параметров.
//  Объект				-<Произвльный>. Обрабатываемый объект, тип в соотвествии со свойствами обработки.
//	ТекущиеДанные		-<СтрокаТабличнойЧасти>. Строка таблицы (результатов запроса).
//  СтрокаТЧ  			-<СтрокаТабличнойЧасти>. Строка Табличной Части объекта
//	Запись 				-<ЗаписьРегистра> Запись (элемент) набора записей
//
Функция вПолучитьЗначение(Реквизит,Параметры,Объект,ТекущиеДанные,СтрокаТЧ = Неопределено, Запись = Неопределено)
	врПерем = Неопределено;
	Если Реквизит.ЭтоВыражение Тогда
		врПерем	=  вВычислитьЗначение(Новый Структура("Выражение",ПолучитьСтр(Реквизит)),Параметры,ВладелецФормы,Объект,ТекущиеДанные,СтрокаТЧ,Запись);
	Иначе
		врПерем	=  Реквизит.ЗначениеПараметра;
	КонецЕсли;
	Возврат  врПерем;
КонецФункции	

//Устанавливает значение реквизита для объекта
//Параметры:
//	Реквизит			-<СтрокаТабличнойЧасти>. Свойства реквизита.
//  Параметры			-<Структура>. Структура доступных параметров.
//  Объект				-<Произвльный>. Обрабатываемый объект, тип в соотвествии со свойствами обработки.
//	ТекущиеДанные		-<СтрокаТабличнойЧасти>. Строка таблицы (результатов запроса).
//	Запись 				-<ЗаписьРегистра> Запись (элемент) набора записей
//  РегистрБухгалтерии  -<Булево>. Признак РБ.
//
Процедура вУстановитьЗначениеРеквизита(Реквизит,Параметры,Объект,ТекущиеДанные,Запись = Неопределено,ЭтоРегистрБухгалтерии = Ложь)
	ИмяРеквизита	= Реквизит.ИмяПараметра;
	СобытиеОтладки=Формы.Отладка.ДобавитьСобытие("Установка значения реквизита """+ИмяРеквизита+""" объекту","Конструктор");
	Попытка
		Свойство	= Неопределено;
		мОбъект 	= ?(Запись = Неопределено,Объект,Запись);
		Если ЭтоРегистрБухгалтерии И Найти(ИмяРеквизита,"Субконто")=1 Тогда
			СтруктураСубконто	= вПолучтьВидСубконтоДляЗаписи(Запись,ИмяРеквизита);
			Если ТипЗнч(СтруктураСубконто) = Тип("Структура") Тогда
				мОбъект[СтруктураСубконто.Субконто][СтруктураСубконто.ВидСубконто] =  вПолучитьЗначение(Реквизит,Параметры,Объект,ТекущиеДанные,,Запись);
			КонецЕсли;	
		Иначе
			мОбъект[ИмяРеквизита] =  вПолучитьЗначение(Реквизит,Параметры,Объект,ТекущиеДанные,,Запись);
		КонецЕсли;
	Исключение
		Формы.Отладка.ЗавершитьСобытие(СобытиеОтладки,"ОченьВажное",ИнформацияОбОшибке().Описание);
		ВызватьИсключение "Не удалось установить значение реквизита";
	КонецПопытки;
	Формы.Отладка.ЗавершитьСобытие(СобытиеОтладки);
КонецПроцедуры 

//Устанавливает значение реквизита коллекции(табличной части) для объекта
//Параметры:
//	Реквизит		-<СтрокаТабличнойЧасти>. Свойства реквизита.
//  Параметры		-<Структура>. Структура доступных параметров.
//  Объект			-<Произвльный>. Обрабатываемый объект, тип в соотвествии со свойствами обработки.
//	ТекущиеДанные	-<СтрокаТабличнойЧасти>. Строка таблицы (результатов запроса).
//
Процедура вУстановитьЗначениеРеквизитаКоллекции(Реквизит,ИмяКоллекции,Параметры,Объект,ТекущиеДанные)
	ИмяРеквизита	= Реквизит.ИмяПараметра;
	СобытиеОтладки=Формы.Отладка.ДобавитьСобытие("Установка значения реквизиту """+ИмяРеквизита+""" коллекции """+ИмяКоллекции+""" объекта","Конструктор");
	Попытка
		Для Каждого СтрокаТЧ ИЗ Объект[ИмяКоллекции] Цикл
			СтрокаТЧ[ИмяРеквизита]	= вПолучитьЗначение(Реквизит,Параметры,Объект,ТекущиеДанные,СтрокаТЧ);
		КонецЦикла;	
	Исключение
		Формы.Отладка.ЗавершитьСобытие(СобытиеОтладки,"ОченьВажное",ИнформацияОбОшибке().Описание);
		ВызватьИсключение "Не удалось установить значение реквизиту коллекции";
	КонецПопытки;
	Формы.Отладка.ЗавершитьСобытие(СобытиеОтладки);
КонецПроцедуры 

//Устанавливает доступность элементов управления
//
Процедура вУстановитьДостпностьЭлементовУправления()
	Если ТекущаяНастройка.Свойство("Позиция") Тогда
    	ЭлементыФормы.КоманднаяПанель.Кнопки.Сохранить.Доступность	= Истина;	
	КонецЕсли;	
КонецПроцедуры 

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ, ВЫЗЫВАЕМЫЕ ИЗ ЭЛЕМЕНТОВ ФОРМЫ

//Открываем форму выбора типа
//
Процедура ОбъектыОбработкиНачалоВыбора(Элемент, СтандартнаяОбработка)
	СтруктураДопПараметров = ВладелецФормы.вСформироватьСтруктуруДляФормыВыбораТипа(Элемент,ПолучитьСвойстваОбработки(),ТекущаяНастройка);
	ФормаВыбораТипа.НачалоВыбора(Элемент, СтандартнаяОбработка, СтруктураДопПараметров);
	ОбъектыОбработкиПриИзменении(Элемент);
КонецПроцедуры

//Вызывается при изменеии значения объекта
//
Процедура ОбъектыОбработкиПриИзменении(Элемент)
	Если ТекущаяНастройка.Свойство("Позиция") Тогда
		//проверим соотвестиве введеного значению текущей позиции
		НоваяПозиция	= ВладелецФормы.вСкорректироватьКолонкуПозиции(ТекущаяНастройка.Позиция,ЗначениеПараметра);
		Если НоваяПозиция=Неопределено Тогда
			Предупреждение("Введена неверная переменная",20);
		ИначеЕсли Не НоваяПозиция.Колонка = ТекущаяНастройка.Позиция.Колонка Тогда
			//выбрана новая позиция отличная от текущей
			СвойстваОбработки	= ПолучитьСвойстваОбработки();
			Если ВладелецФормы.вПозицияДоступнаДляОбработки(НоваяПозиция,СвойстваОбработки.Типы) Тогда
				ИмяНастройки=ТекущаяНастройка.Позиция.Строка[ТекущаяНастройка.Позиция.Колонка.Данные];
				ВладелецФормы.вИзменитьПозициюОбработки(ИмяНастройки,НоваяПозиция,ТекущаяНастройка.Позиция);
				ТекущаяНастройка.Вставить("Позиция",НоваяПозиция);
			Иначе
				Предупреждение("Данная обработка не может использоваться в текущей позиции(расположении).
				|Выберите другую ""колонку"".",20);
			КонецЕсли;	
		КонецЕсли;
		вЗадатьИмяпеременнойНаОсновеПозиции();
	КонецЕсли;
	СформироватьКартинкуДляВыражения(Элемент);
КонецПроцедуры

//Настройку в корзину
//
Процедура ОбъектыОбработкиОчистка(Элемент, СтандартнаяОбработка)
	ФормаВыбораТипа.Очистка(Элемент, СтандартнаяОбработка,Новый Структура("ТекущиеДанные",Новый Структура("ЭтоВыражение,ЗначениеПараметра",(ТипЗнч(Элемент.Значение)=Тип("Строка")),ЗначениеПараметра)));
	//Очистим позицию
	Если ТекущаяНастройка.Свойство("Позиция") Тогда
		ВладелецФормы.вОчиститьПозициюОбработки(ТекущаяНастройка.Позиция);
		ТекущаяНастройка.Удалить("Позиция");
	КонецЕсли;
	СформироватьКартинкуДляВыражения(Элемент);
КонецПроцедуры

//Открываем значение
//
Процедура ОбъектыОбработкиОткрытие(Элемент, СтандартнаяОбработка)
	СтруктураДопПараметров = ВладелецФормы.вСформироватьСтруктуруДляФормыВыбораТипа(Элемент,ПолучитьСвойстваОбработки(),ТекущаяНастройка);
	ФормаВыбораТипа.Открытие(Элемент, СтандартнаяОбработка, СтруктураДопПараметров);
КонецПроцедуры

//Загружаем свойства
//
Процедура ДеревоПриАктивизацииСтроки(Элемент)
	ТекущиеДанные	= Элемент.ТекущиеДанные;
	ЭлементыФормы.Свойства.Видимость	= ТекущиеДанные.ЭтоТаблица;
	Если ЭлементыФормы.Свойства.Видимость Тогда
		Если ТекущиеДанные.Свойства=Неопределено Тогда
			ТекущиеДанные.Свойства	= ТаблицаСвойств.Скопировать();
		КонецЕсли;
		Свойства				= ТекущиеДанные.Свойства;
        Если Свойства.Количество()=0 Тогда
			вЗагрузитьСвойства(ТекущиеДанные);	
		КонецЕсли;	
	КонецЕсли;	
КонецПроцедуры

//Выделим не использованные строки
//
Процедура ДеревоПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	Если Не ДанныеСтроки.Использовать Тогда
		ОформлениеСтроки.ЦветТекста	= Новый Цвет(124,119,108);	
	КонецЕсли;
КонецПроцедуры


// Обработчик изменения флажка "ЭтоВыражение"
//
Процедура ПараметрыПриИзмененииФлажка(Элемент, Колонка)
	Если Колонка.ДанныеФлажка= "Использовать" Тогда
		СтрокаДЗ	= ЭлементыФормы.Дерево.ТекущиеДанные;
		вОбновитьПризнакИспользования(СтрокаДЗ);	
		Пока Не СтрокаДЗ.Родитель=Неопределено Цикл
			СтрокаДЗ=СтрокаДЗ.Родитель;
			вОбновитьПризнакИспользования(СтрокаДЗ);
		КонецЦикла;	
	Иначе	
		ФормаВыбораТипа.ПриИзмененииФлажка(Элемент, Колонка, вСформироватьСтруктуруДляФормыВыбораТипа());
	КонецЕсли;	
КонецПроцедуры // ПараметрыПриИзмененииФлажка()

Процедура ПараметрыПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	Структура=Новый Структура("Значение,Картинка",ДанныеСтроки.ОграничениеТипа, Новый Картинка);
	СформироватьКартинкуНаОсновеТипов(Структура);
	ОформлениеСтроки.Ячейки.ИмяПараметра.Картинка					= Структура.Картинка;
	ОформлениеСтроки.Ячейки.ИмяПараметра.ОтображатьКартинку			= Истина;
	Если ДанныеСтроки.ЭтоВыражение Тогда
		СформироватьКартинкуДляВыражения(ОформлениеСтроки.Ячейки.ЗначениеПараметра);
		ОформлениеСтроки.Ячейки.ЗначениеПараметра.ОтображатьКартинку	= Истина;
	КонецЕсли;	
	Если Не ДанныеСтроки.Использовать Тогда
		ОформлениеСтроки.ЦветТекста	= Новый Цвет(124,119,108);	
	КонецЕсли;
КонецПроцедуры

Процедура ПараметрыЗначениеПараметраНачалоВыбора(Элемент, СтандартнаяОбработка)
	ФормаВыбораТипа.НачалоВыбора(Элемент, СтандартнаяОбработка, вСформироватьСтруктуруДляФормыВыбораТипа());
КонецПроцедуры

Процедура ПараметрыЗначениеПараметраОткрытие(Элемент, СтандартнаяОбработка)
	ФормаВыбораТипа.Открытие(Элемент, СтандартнаяОбработка,	вСформироватьСтруктуруДляФормыВыбораТипа());
КонецПроцедуры

Процедура ПараметрыЗначениеПараметраОчистка(Элемент, СтандартнаяОбработка)
	ФормаВыбораТипа.Очистка(Элемент, СтандартнаяОбработка,Новый Структура("ТекущиеДанные",ЭлементыФормы.Свойства.ТекущиеДанные));
КонецПроцедуры


///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

Процедура ПриОткрытии()
	вЗадатьИмяпеременнойНаОсновеПозиции();
	СформироватьКартинкуДляВыражения(ЭлементыФормы.ОбъектыОбработки);
	ЗагрузитьНастройку();
	вУстановитьДостпностьЭлементовУправления();
	Если Дерево.Строки.Количество()=0 Тогда
		вЗагрузитьДерево();
	КонецЕсли;	
КонецПроцедуры

Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	Если ЭлементыФормы.КоманднаяПанель.Кнопки.Сохранить.Доступность Тогда
		Если вСохранитьНастройку(Истина)=Неопределено Тогда
			Отказ = Истина;
		КонецЕсли;
	ИначеЕсли Модифицированность Тогда
		Если Не Вопрос("Закрыть обработку без сохранения?",РежимДиалогаВопрос.ОКОтмена)=КодВозвратаДиалога.ОК Тогда
			Отказ = Истина;
		КонецЕсли;	
	КонецЕсли;	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

//Обновляет дерево метаданных
//
Процедура КоманднаяПанельОбновить(Кнопка)
	вЗагрузитьДерево();
КонецПроцедуры

Процедура КоманднаяПанельСохранить(Кнопка)
	вСохранитьНастройку();
КонецПроцедуры

Процедура КоманднаяПанельВыполнить(Кнопка)
	//групповая обработка
	Если ТекущаяНастройка.Свойство("Позиция") Тогда
		Если вСохранитьНастройку(Истина)=Истина Тогда
			//выполнение текущей обработки и всех вложенных
			ВладелецФормы.ТаблицаВыбранныхОбработок.Очистить();
			ВладелецФормы.вДобавитьОбработкуВТаблицу(ТекущаяНастройка.Позиция);
			ВладелецФормы.ВыполнитьОбработки();
		КонецЕсли;	
	Иначе
		//обработка явно выбранных объектов
		Если Вопрос("Выполнить обработку для выбранного(ых) объекта",РежимДиалогаВопрос.ОКОтмена)=КодВозвратаДиалога.ОК Тогда
			//Сформируем список вложенных
			СписокВложенных = Владелецформы.вПолучитьСписокВложенныхОбработок(ПолучитьСвойстваОбработки().РекомендуемыеВложенные);
			Если ВыбратьЭлементы(СписокВложенных,"Выложенные обработки, будут выполнятся для каждого значения, возвращаемого текущей обработкой(изменяемое значение)") Тогда
				//Выполним 
				Параметры		= ВладелецФормы.вПолучитьСтруктуруПараметров();
				Для Каждого Объект ИЗ вЗначениеВКоллекцию(вПолучитьЯвныйОбъектОбработки(Параметры)) Цикл
					ВозврЗначения	= ВыполнитьОбработку(Параметры,Объект);
					//выполним вложенные обработки если их выбрали
					Для Каждого  ВозврЗначение ИЗ ВозврЗначения Цикл 
						Для Каждого ОписаниеОбработки ИЗ СписокВложенных Цикл
							Если ОписаниеОбработки.Пометка Тогда
								ОписаниеОбработки.Значение.ВыполнитьОбработку(Параметры,ВозврЗначение);			
							КонецЕсли;	
						КонецЦикла;
					КонецЦикла;	
				КонецЦикла;
				Предупреждение("Выполнение обработки заверщено",30,"Enterprise Integrator");
			КонецЕсли;	
		КонецЕсли;	
	КонецЕсли;	
КонецПроцедуры

//Переходит к справке на сайте
//
Процедура ПерейтиКСправке(Кнопка)
	Если Не ПустаяСтрока(Кнопка.Пояснение) Тогда
		ЗапуститьПриложение(Кнопка.Пояснение);	
	КонецЕсли;	
КонецПроцедуры



ТаблицаСвойств				= Новый ТаблицаЗначений;
ТаблицаСвойств.Колонки.Добавить("Использовать",Новый ОписаниеТипов("Булево"));
ТаблицаСвойств.Колонки.Добавить("ИмяПараметра",Новый ОписаниеТипов("Строка"));
ТаблицаСвойств.Колонки.Добавить("ЭтоВыражение",Новый ОписаниеТипов("Булево"));
ТаблицаСвойств.Колонки.Добавить("ЗначениеПараметра");
ТаблицаСвойств.Колонки.Добавить("ЗначениеСтр",Новый ОписаниеТипов("Строка"));
ТаблицаСвойств.Колонки.Добавить("ОграничениеТипа",Новый ОписаниеТипов("ОписаниеТипов"));

ФормаВыбораТипа					= ПолучитьФорму("ФормаВыбораТипа",ЭтаФорма);
ЗакрыватьПриЗакрытииВладельца	= Истина;
ТекущаяНастройка				= Новый Структура();
МетаданныеФормы					= "ОбработкаРезультата_УстановкаРеквизитов_Новая";
