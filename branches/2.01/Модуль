Перем ADOUtils 					Экспорт;
Перем Connect 					Экспорт;
Перем V8Storage 				Экспорт;//Хранится экземпляр внешней компоненты для серверного режима загружается при инициализации обработки
Перем GoldParser 				Экспорт;//Хранится экземпляр COM Объекта.

Перем ПараметрыОкружения 		Экспорт;//Структура в которой определяются текущия ПараметрыОкружения обработки, начиная от типа базы и заканчивая версией самой обработки 	
Перем СистемныеСтруктуры 		Экспорт;//Перечисления в которых содержатся определенные соотвествия фиксированные не зависит от  конфигурации
Перем Формы 					Экспорт;//Структура форм, для взаимодействия между форм между собой.

Перем ТаблицаРазмераБД 			Экспорт;//Размер таблиц БД SQL  // * Аверин Д. А. 26 июня 2007 г. 13:42:54  
Перем ЗапросОтладки 			Экспорт;//В эту переменную помещается отлаживаемый запрос
Перем ЗаголовокЗапросаОтладки 	Экспорт;

Перем СинонимыВстроенногоЯзыка 	Экспорт;//Добавил Для английские термины. Лупашку ион, e-mail: ionlupascu@gmail.com
Перем ИдентификаторыОбъекта 	Экспорт;//Таблица в которой собраны идентификаторы для разбора метаданных объекта
Перем МенеджерВременныхТаблиц 	Экспорт;//Менеджер один для все обработки (так проще маневрировать с данными)

Перем зОписаниеЛицензий			Экспорт;//Список значений с возможными лицензиями



//////////////////////////////////////////////////////////////////////////////////////////
//                                 РАБОТА С ПОМЕТКАМИ

Процедура ИзменениеФлажка(ТекСтрока,ДанныеФлажка,Данные,ЯвноеЗначение=Неопределено,ДополнительнаяКолонка=Неопределено)Экспорт
	
КонецПроцедуры

Процедура ИзменениеФлажков(Источник,Значение, ИскатьПодчиненные=Истина,КолонкаПометки="Пометка_Ei") Экспорт
	
КонецПроцедуры

//Полчает строки таблицы значений или дерева с определенным отбором.
//Параметры:
//	Источник				- <ТаблицаЗначений,ДеревоЗначений>. Источник в котором ищем строки
//	Значение				- <Булево,Число>. Значение колонки пометки
//	ИскатьПодчиненные   	- <Булево>. Искать подчиненые, только для источника с типом ДеревоЗначений
//	КолонкаПометки			- <Строка>. Имя колонки пометки
//	ДополнительноеУсловие   - <Структура>. Дополнительная структура отбора
//Возвращаемое значение
//Массив указателей на нужные строки
Функция ПолучитьСтроки(Источник,Значение,ИскатьПодчиненные=Истина,КолонкаПометки="Пометка_Ei",ДополнительноеУсловие=Неопределено) Экспорт
	
КонецФункции	

//////////////////////////////////////////////////////////////////////////////////////////
//								ИНТЕРФЕЙСНЫЕ ДЕЙСТВИЯ 

//Формирует на основе типов значений картинки как для колонки так и для ячейки составного типа
//Параметры:
//	Колонка	-<КолонкаТабличногоПоля,ОписаниеТипов> Элемент для которого выводим картинку
//	ТЗ		-<ТаблицаЗначений,ДеревоЗначений> Для определения типов которые содержаться в колонке
Процедура СформироватьКартинкуНаОсновеТипов(Колонка,ТЗ=Неопределено) Экспорт
	
КонецПроцедуры 

//Формирует картинку по структуре(первому слову выржения)
//Параметры:
//	Элемент	-<ЭлементУправления>. Элемент для которого показываем картинку	
Процедура СформироватьКартинкуДляВыражения(Элемент)  Экспорт
	
КонецПроцедуры	

//Функция открывает форму интрактивной установки пометок, для списка значений
//Параметры:
//	Заголовок		- <Строка>. текст информационной надписи.
//	СписокЗначений	- <СписокЗначений>. Для котрого устанавливаются пометки
//Возвращаемое значение:
//	<Булево> - Пользователь выбрал значение или отказался от выбора.
Функция ВыбратьЭлементы(СписокЗначений,Заголовок) Экспорт
	
КонецФункции	
	
//Преобразоание текста в Схему компановки данных или наоборот
//Параметры:
//	ВходныеДанные  	-<Строка,СхемаКомпановки данных>. Входные данные
//Возвращаемое значение
//	<СКД или Строка> или неопределенно если преоброзование не выполнено 
Функция ПреобразованиеВСКД(ВходныеДанные) Экспорт
	
КонецФункции

//Определяет идентификатор объекта матаданных
//идентификатор - это уникальное значение SDBL путь к форме
//Параметры:
//	Объект 		- Объект метаданных, для которого нужно получить ссылку
//	Реальные    - <Булево>. Для обекта конфигурации может отображаться не то ID который соответсвует физичской записи
//Возвращаемое значение:
//	Строка уникального идентификатора
Функция ПолучитьИД_ИзСсылки(Объект,Реальные=Истина) Экспорт
	
КонецФункции

//Функция на основе даты получает оттенки определенного цвета..
//чем дата раньше текушей тем чернее будет цвет .. от трех дней и более  цвет будет совсем темный
//Параметры:
//	Дата- Дата находящаяся в строке.
//Возвращаемое значение:
//	Цвет.
Функция ПолучитьОттенкиЦвета(Дата) Экспорт
	
КонецФункции

//Устанавливает строку состояния для работы с многими базами, лучше понимешь в какой базе сейчас
//Параметры:
//	Форма	-<Форма>. Форма в которой необходимо установить строку состояния.
//
Процедура УстановитьСтрокуСостояния(Форма) Экспорт
	
КонецПроцедуры

//Востанавливает значения пометок установленных для кнопок пользователем.
//Перебирает кнопки в комадной панели и в зависмоисти от коментарием сохраняет или востанавливает значение
//Параметры:
//	Форма			-<Форма>. Форма на которой расположена кнопка
//	КоманднаяПанель	-<Строка>.Имя элемента формы, на которой необходимо перебрать кнопки	
Процедура ВосстановитьЗначенияПометок(Форма,КоманднаяПанель) Экспорт
	
КонецПроцедуры	

//Сохраняет значение пометки утсановленное для кнопки
//Параметры:
//	Кнопка	- <КнопкаКомаднойПанели>.
Процедура СохранитьЗначениеПометки(Кнопка,Сохранять=Истина)Экспорт
	
КонецПроцедуры

//Общие картинка храняться в общей форме, как кртинки кнопок
//Параметры:
//	ИмяКнопки	-<Строка,Число>. Имя кнопки или порядковый номер на котрой расположена картинка.
//Возвращаемое значение:
//	<Картинка>
Функция ПолучитьОбщуюКартинку(ИмяКнопки,Подменю = "ОбщиеКартинки")   Экспорт
	
КонецФункции	

//Функция получает объект формы, основываясь на текстовых данных (внутреннем представлении формы ЗначенивСтрокуВнутр(ЭтаФорма))
//происходит подмена кешированных данных уже открытой формы что и позволяет получить нужную.
//Парметры:
//	ТекстовыеДанныеФормы	-<Строка>. Внутренне представление формы.
//	ТекстМодуля	-			 <Строка>. Текст модуля Формы.	
//Возвращаемое значение:
//	<Форма>
Функция СгенерироватьФорму(ТекстовыеДанныеФормы,ТекстМодуля="") Экспорт
	
КонецФункции

// Получает текст  из текстового поля, 
//
// Параметры:
//  СВыделением 	-<Булево>. Признак получения только выделенного текста.
//  Элемент			-<ЭлементФормы>. Текст из которого необходимо полчить.
//	ПроверятьСелект	-<Булево>. Провереять или нет перед выполенением запроса. Наличие инструкции SELECT. Игнорируется без выделения
// Возвращаемое значение:
//	Текст 
Функция вПолучитьТекстТекстовогоПоля(СВыделением,Элемент,ПроверятьСелект=Ложь) Экспорт

КонецФункции // ПолучитьТекстЗапроса()

//Передача таблицы в источник результата групповой обработки
//Для групповой обработки лубой таблицы или дерева значений
//Параметры:
//	Источник	-	Таблича или дерево значений,которое необходимо обработать.
//Возвращаемое значение:
//	Форма Конструктора запросов
//
Функция ПередатьТаблицуДляГрупповойОбработки(Источник) Экспорт
	
КонецФункции	

//На основе текста формирует диалог конструктора запроса
//и открывает его не редактирование.
//Параметры:
//	Текст	-<Строка>. Текст запроса на основе которого формируется конструктор
//Возвращаемое значение:
//	Результат изменения текста запроса.
//
Функция МодифицироватьЗапросВКонструкторе(Текст) Экспорт
	
КонецФункции

//Устанавливает динамическую табличную часть для формы
//Параметры:
//	Форма	-<Форма>. Форма в которой устанавливаем динамическую ТЧ
//	Имя		-<Строка>. Имя элемента формы для кторого меняем данные.
//Возвращаемое значение:
//	<Булево> Отказ на открытие формы.
//
Функция вУстановитьТабличнуюЧасть(Форма,Имя)Экспорт

КонецФункции

//Освобождает занятую ТЧ
//Параметры:
//	ИмяТЧ	-<Строка>. Имя табличной части, которую нужно освободить.
//
Процедура вОсвободитьТабличнуюЧасть(ИмяТЧ) Экспорт
	
КонецПроцедуры

//////////////////////////////////////////////////////////////////////////////////////////
//	ОКНО ИСПОЛНЕНИЯ

//Создаем окно исполнения
//Параметры:
//	Заголовок		-<Строка>. Загаловок окна исполнения.
//	Граница			-<Число>.  Размерность прогресс бара.
//  Лимит			-<Число>.  если граниза меньше этого значения прогремм открываться не будет
Процедура ИнициализацияОкнаИсполнения(Заголовок,Граница,Лимит=6) Экспорт
	
КонецПроцедуры

//Закрываем форму окна исполнения
//
Процедура ОстановкаОкнаИсполнения()Экспорт
	
КонецПроцедуры


/////////////////////////////////////////////////////////////////////////////////////////
//                              ВСПОМОГАТЕЛЬНЫЕ 

//Создает описание типов на сонове коллекциии с типами, или на основе единичного типа
//Параметры:
//	КоллекцияТипов	-<Произвольный>. Колекция типов или одиночный тип.
//Возвращаемое значение:
//	Описание типов.
Функция СоздатьОписаниеТиповНаОсновеКолекции(КоллекцияТипов) Экспорт
	
КонецФункции	

//Получает текущее время с точность до 10 секунды
//Параметры:
//	Подключать -Булево.Подключать или нет(создавать объект), если первый раз нам не удалось 
//		подключить тогда вторай раз неимеет смысл подклчать 
//		возникнет ошибка будем вычитать время - число(Несовпадение типов)
//Возвращаемое значение:
//	Число.
Функция ПолучитьТекущееВремя(Подключать=Истина) Экспорт
	
КонецФункции

//Преобразовывает строку с разделителями в список значний
//Параметры:
//	Строка - Исходная строка
//	Разделитель - Строка разделителя
//Возвращаемое значение:
//	Список значений
Функция СтрокуВСписок(Строка,Разделитель=",") Экспорт
	
КонецФункции

//Перобразовать значение к выражению на встроенном языке
//уичтываеются передопределенные занчения, уникальность кодов и номеров ссылочных значений
//возвможно преобразование наборов занчений Списоков и Массивов
//Параметры:
//	Значение - произвольное значение попытка перобразования которого будет выполнена
//Возвращаемое Значение:
//	Строка - Выражение на встроенном языке;
Функция ПреобразоватьЗначениеКВыражению(Значение) Экспорт
	
КонецФункции	

//Создает копию строк дерево значений
//Параметры:
//	Источник	- <СтрокаДереваЗначений>. Которую копируем	
//	Назначение	- <СтрокаДереваЗначений>. В которую копируем
//  СтруктураЗначений	-<Структура>.Предопределенных значений которые нужно установить для каждой копируемой строки
//	ВключатьПодчиненные	-<Булево>. Включать подчиненные	
Процедура СкопироватьСтрокиДерева(Источник,Назначение,СтруктураЗначений,ВключатьПодчиненные=Истина) Экспорт
	
КонецПроцедуры

//Производит инициализацию обработки. Заполняет необходимые структуры и подключает внешние обработки
//
Процедура Инициализация() Экспорт
	
КонецПроцедуры	

//Получаем структуру внутренней записи 1С
//Параметры:
//	Ключ			-<Строка><СтруктураЗначений>. Ключ таблицы, Внутренний идентификатор, или структура значений
//	Таблица			-<Строка>. Имя таблицы.
//	БазаДанных		-<Строка>. Имя базы данных, если не указано используется текущее.
//	ДатаИзменения	-<Дата>. Дополнительный параметр, необходим при открытии записей из хранилища
//Возвращаемое значение:
//	<Структура>
Функция вПолучитьСтруктуруЗаписи(Ключ,Таблица="Config",БазаДанных="",ДатаИзменения='19000101') Экспорт
	
КонецФункции

//Сохраняем структуру как  внутреннею запись 1С
//Параметры:
//	СтруктураЗаписи	-<СтруктураЗначений>. Содержит Ключ, Таблицу и Содержание
//	Таблица			-<Строка>. Имя таблицы.
//  ИзменятьВерсию	-<Булево>. Регистрировать ли изменеие записи в версиях. Игонирируется при значении параметра Таблица<>"ConfigSave"
//  УдалитьКеш		-<Булево>. Удалать кешированные файлы. Игонирируется при значении параметра Таблица<>"Config" необходимо для Динамического обновления форм.
Процедура вСохранитьСтруктуруЗаписи(СтруктураЗаписи,Таблица="Config",ИзменятьВерсию=Истина,УдалитьКеш=Истина) Экспорт
	
КонецПроцедуры

//Обновляет версии объектов метаданных - создает или модифицирет файл Versions в таблице ConfigSave
//Параметры:
//	СписокЗначений	-<СписокЗначений>. Ключ(FileName)объектов  версии котрых необходимо обновить	
//	Таблица			-<Строка>. Имя таблицы значений в которую сохраняются изменения
//	БазаДанных		-<Строка>. Имя базы данных, если не указано используется текущее.
//	
//
Процедура ОбновитьВерсииИзменныхМетаданных(СписокЗначений,Таблица = "configsave",БазаДанных=Неопределено) Экспорт
	
КонецПроцедуры

//Выполняет запрос или пакет запросов
//Параметры:
//	Запрос			-<Запрос>. Запрос который необходимо выполнить
//	ВыполнитьПакет  -<Булево>. Выполнение пакета.
//Возвращаемое значение:
//	РезультатВыполненияЗапроса
Функция вВыполнитьЗапрос(Запрос,ВыполнитьПакет=Ложь) Экспорт
	
КонецФункции	
	
//Функция расчтывает значение на встроенном языке
//Параметры:
//	СлужебныеДанные		- <Структура>. Данные определяюшие вычсление(выполнение) значения:(Выражение,ОписаниеТипов)
//	Параметры			- <Структура>. Структура достпных параметров.		
//	ЭтаФорма			- <Форма>. Обычно конструктор запроса. Достпуны другие переменные(РезультатЗапроса,ИндексСтроки,КоличествоСтрок)
///////////////		Групповая обработка
//	Объект 				- <Произвольный объект>. Обрабатываемый объект, в контексте групповой обработки
//	ТекущиеДанные 		- <Строка таблицы(дерева) значений>. Текущие данные строки результатов запроса, в контексте групповой обработки
//	СтрокаТЧ 			- <СтрокаТабличнойЧасти>. Строка табличной части объекта в случае обработки ТЧ документа,
//	Запись				- <ЗаписьРегистра>. Элемент коллекции набора записей в случае обработки набора записей
//
Функция вВычислитьЗначение(Знач СлужебныеДанные,Параметры=Неопределено,ЭтаФорма=Неопределено,Объект=Неопределено,ТекущиеДанные=Неопределено,СтрокаТЧ=Неопределено, Запись=Неопределено) Экспорт
	
КонецФункции	

//Функция выполняет выражение на встроенном языке и возвращает занчение в переменную "Результат"
//Параметры: 
//	Выражение 			- <Строка>. Выражение на встроенном языке. 
//	Параметры			- <Структура>. Структура достпных параметров.		
//	ЭтаФорма			- <Форма>. Обычно конструктор запроса. Достпуны другие переменные.
///////////////		Групповая обработка
//	Объект 				- <Произвольный объект>. Обрабатываемый объект
//	ТекущиеДанные 		- <Строка таблицы(дерева) значений>. Текущие данные строки результатов запроса
//	СтрокаТЧ 			- <СтрокаТабличнойЧасти>. Строка табличной части объекта в случае обработки ТЧ документа.
//	Запись				- <ЗаписьРегистра>. Элемент коллекции набора записей в случае обработки набора записей
//
Функция вВыполнитьЗначение(Знач Выражение,ЭтаФорма=Неопределено,Параметры=Неопределено,Объект=Неопределено,ТекущиеДанные=Неопределено,СтрокаТЧ=Неопределено,Запись=Неопределено)
	
КонецФункции

//Функция определяет что пресдтавление в виде строки кода, выражение или фрагмент кода на встроенном языке
//Выражение может быть вычислено( Вычислить() ) иначе только выполнение (Выполнить() ) с ожиданием возвр значения в переменной результат. 
//Ипользуется для генерации кода
//Параметры:
//	Строка 	<Строка>. Выражение или фрагмент кода на встроенном языке.
//Возвращаемое значение
//	Булево
Функция вЭтоВыражение(Знач Строка)  Экспорт
	
КонецФункции

//Формирует представление встроенного языка, для вывода отладочных сообщений
//Параметры:
//	СлужебныеДанные		- <Структура>. Данные определяюшие вычсление(выполнение) значения:(Выражение,ОписаниеТипов)
//	ДоступныеПеременные - <Структура>. Структура доступныех переменных
Функция вПолучитьОписаниеВыражения(СлужебныеДанные,ДоступныеПеременные) Экспорт
	
КонецФункции	

//Функция соединяет. складывает 2 значения, тип определяется по превому значению
//Параметры:
//	Значение1.
//	Значение2.
//Возвращаемое значение.
//	РезультатСоединения
Функция вСоединить(Знач Значение1,Знач Значение2) Экспорт
	
КонецФункции	

Функция вПолучитьСтруктуруМетаданных() Экспорт
	
КонецФункции

//Производит дополнение строкового представления метаданных на основе значения
//Параметры:
//	Имя			-<Строка>. Существующее представление метаданных
//	Назначение	-<Строка>. Назначение метаданных которое возвращается процедурой ПолучитьСтруктуруХраненияБазыДанных
//Возвращаемое значение:
//	Булево, Признак удаления прочих строк в конструкции.
Функция вПолучитьУточнениеТаблицыМетаданных(Имя,Назначение) Экспорт
	
КонецФункции	

//Выполняет преобразование из ID хранящегося в таблицах SQL в строку уникального идентификатора
//и обратно. Достигается за счет перестановки.
//Параметры:
//	Строка	<Строка> Уникальный идентификатор, который нужно преобразовать.
//	Прямое  <Булево>. Режим, если Истина, тогда  из SQL в 1С, ЛОжь- наоборот. 
//Возвращаемое значение:
//	Cтрока. Уникальный идентификатор.
Функция вПреобразоватьИдентификатор(Строка,Прямое=Истина) Экспорт
	
КонецФункции

//Производит преобразование даты из строки SQL в Тип 1С или наоборот
//Параметры:
//	Дата: Строка, Дата. В зависимости от параметра происходит прямое или обратное перобразование
//Возвращаемое значение:
//	Преобразованное значение	
Функция вКонвертироватьДату(Дата) Экспорт
	
КонецФункции	

//Получает из каталога обработки необходимые запросы к СУБД
//предопредееленные запросы уникальны для каждой
//Параметры
//	ИмяЗапроса	-<Строка>. Имя файла запроса
//Возвращаемое значение
//	ТекстЗапроса из файла.
Функция вПолучитьПредопределенныйЗапросКСУБД(ИмяЗапроса) Экспорт
	
КонецФункции	

//возврашает форматированное время 00:00:00
//Параметры
//	Значение	- <число> Число секунд, которые нужно показать пользователю	
Функция вФорматироватьВремя(Значение) Экспорт
	
КонецФункции

//Формирует представление бинарной ссылки
//Параметры:
//	Value	<ComОбъект>. Данные для преобразования
//Возвращаемое значение
//	Строка.
Функция вПолучитьПредставлениеID(Value) Экспорт
	
КонецФункции	

//Пауза в секундах
//Параметр:
//	ПаузаВСекундах	- <Число>. Число секунд паузы
//
Процедура вSleep(ПаузаВСекундах = 0) Экспорт
	
КонецПроцедуры

//Находит в исходной строке все вхождения подстроки поиска и заменяет ее на подстроку замены
//возможно использование регулярных выражений
//Параметры
//	Строка			-<Строка> Исходная строка
//	ПодстрокаПоиска	-<Строка> Искомая строка
//	ПодстрокаЗамены -<Строка> Подстрока, на которую будет заменена подстрока поиска
//Возвращаемое значение:
//	Строка. Строка, полученная в результате замены
Функция СтрЗаменитьБезУчетаРегистра(Строка,ПодстрокаПоиска,ПодстрокаЗамены) Экспорт
	
КонецФункции	

//Заменяет строку по соотвесвие переданному в списке
//Параметры:
//	ИсходнояСтрока		-<Строка>. Строка в которой делаем замену.
//	СоотвесвтиеЗамены   -<Соотвесвтие>. Соответвие замены
Функция СтрЗаменитьИзСписка(Знач ИсходнояСтрока,СоотвесвтиеЗамены)Экспорт
	
КонецФункции	

//Читает XML файл и из определенно узла заполняет таблицу значений
//Параметры:
//	ИмяФайла	-<Строка>. Имя XML файла
//	ИмяУзела	-<Строка>. Имя узла из которго заполняем таблицу
//	Таблица		-<ТаблицаЗначений>. Заполняемая таблица
Процедура ЗаполнитьТаблицуИзXMLФайла(ИмяФайла,ИмяУзела,Таблица) Экспорт
	
КонецПроцедуры	

//Получаем свойства объекта метаданных на основе таблицы результатов запроса 
//Параметры:
//	Объект	-<ОбъектМетаданных,СтрокаДЗ>. 	Объект метаданных свойства которого нужно получить
//Возвращаемое значение: СписокЗначений
Функция вПолучитьСвойстваОбъектаМетаданных(Объект) Экспорт
	
КонецФункции

//Формирует список значений на основе структуры колонок
//Параметры:
//	Таблица	-<Таблица.ДеревоЗначений.РезультатЗапроса>	
Функция вСформироватьСписокПоСтруктуреКолонок(Таблица) Экспорт
	
КонецФункции	

//Определят схожесть двух объектов описание типов
//Параметры:
//	ОТипов1	-<ОписаниеТипов>.
//	ОТипов2	-<ОписаниеТипов>.	
//Воращаемое значение:  Булево
//	В типах есть одинаковые значения
Функция вОписаниеТиповПересекаются(ОТипов1,ОТипов2) Экспорт
	
КонецФункции	

//Одноименная функция типовой, за тем лишь исключением, что учитывает объекты неопределенного типа
//Параметры:
//	БольшийТип - <ОписаниеТипов>. Описание типов которое должно содержать в себе другой тип,
//	МеньшийТип - <ОписаниеТипов>. Описание типов которое должно входить в больший тип
//
Функция вСодержитТип(БольшийТип,МеньшийТип) Экспорт
	
КонецФункции

//Преобразует е исхоодного описания типов, в описание типов без объектых значений,
//вместо них вставляются ссылочные
//Параметры:
//	ОписаниеТипов	- <ОписаниеТипов>. Исходное описание типов
//Возвращаемое значение
//
Процедура вПреобразоватьОбъектныеТипыВСсылочные(ОписаниеТипов) Экспорт
	
КонецПроцедуры

//Преобразовывает единичное значение в коллекцию
//Параметры:
//	Значнеие	-<Произвольный>. ИсходноеЗначение
Функция вЗначениеВКоллекцию(Знач Значение) Экспорт
	
КонецФункции	

//Функция получает вид субкното по записи регистра бехгалтерии, основываясь на счете
//Параметры:
//	Запись			-<ЗаписьРегистраБухгалтерии>. Ожидается запись с заполненым счетом
//	Представление  	-<Строка>. Представление значения субконто.
//Возвращаемое значение:
//	Структура(Субконто,ВидСубконто)
Функция вПолучтьВидСубконтоДляЗаписи(Запись,Представление) Экспорт
	
Конецфункции

//Формирует описание типов всех регистров регистров сесли оно не формировалось до этого
//Параметры:
//	Нет.
Процедура вСфоормироватьОписаниеТиповРегистров() Экспорт
	
КонецПроцедуры	
	
////////////////////////////////////////////////////////////
//  НАСТРОЙКИ СОЕДИНЕИЯ

//Получает параметры содинения в виде структуры
//может получать как на основе введенной строки соединеия с ADO или на основе информации полученной с сервера
//Параммеры:
//	Нет.
//Возвращаемое значение:
//	Структура. В случае удачноего определения параметров
//	Неопределено,  в том случа если параметры получить не удалось
Функция ПолучитьПараметрыСоединения() Экспорт 
	
КонецФункции	

//Получает структуру параметров соединения с сервера 1С
//так же определяет ID пользователя СУБД
//Параметры:
//	БезПодключенияКСерверу	<Булево>. Признак получения параметров только из строки соединения.
//	ВызыватьИсключение		<Булево>. Признак необходимости вызвать исключение в случае неудачной ошибки.
//Возвращаемое значение:
//	Структра
Функция ПолучитьПараметрыСоединенияССервера(БезПодключенияКСерверу=Ложь, ВызыватьИсключение=Ложь)Экспорт
	
КонецФункции

//Выполняет попытку сосединения с СУБД  в случае успеха определяет дополнительные параметры окружения
//Параметры:
//	Нет.
//Возвращаемое значение:
//	Булево. Результат выполнения подключения (выполнено или нет)
Функция СоединениеСУБД()Экспорт
	
КонецФункции	

//Попытка подключения к СУБД обрабатываются различные возникающие ошибки, вначале подключение с использованием Строки подключения
//если не удалось тогда пробуем получить параметры с сервера
//Параметры:
//	Нет.
//Возвращаемое значение:
//	Булево. Результат выполнения подключения (выполнено или нет)
Функция ОбработкаСоединения() Экспорт 
	
КонецФункции	

////////////////////////////////////////////////////////////
// РЕЗУЛЬТАТЫ SQL ЗАПРОСОВ

//Преобразут результат выполнения запроса в таблицу значений по возможности используется ADOUtils
//Параметры:
//	RecSet					- <RecordSet> Результат выполнения запроса
//	ИспользоватьADOUtils 	- <Булево> Запрешает использование ADOUtils. Необходимо в случае получения структуры колонок без записей. 
//  РезультатЗапроса 		- <Булево> Таблица значений будет преобразована к результату запроса, (только про использовании GameWithFire)
//Возвращаемое значение:
//	ТаблицаЗначений,РезультатЗапроса.
Функция RecSetВТаблицу(RecSet,ИспользоватьADOUtils=Истина,РезультатЗапроса=Ложь) Экспорт
	
КонецФункции

//Получает опредленную запись по результатам выполнения прямого запроса
//Параметры:
//	Запрос	- <Строка> Текст запроса на языке SQL
//	Count 	- <Число>  Номер записи
//Возврашиемое значение:
//	Значение записи.
Функция RecSetПолучитьЗапись(Запрос,Count=0) Экспорт
	
КонецФункции

// Выполнить запрос на сервере СУБД
// Параметры:
//  ТекстЗапроса 		-<Строка> Текст запроса
//  СтруктураПараметров -<Структура>. Структура параметров, если используются
//  NamedParameters  	-<Булево>. Параметры именованные или нет, поскольку OLEDB непонимает именнованные идем на некоторые хитрости в частность .
// Возвращаемое значение:
//  Произвольный, результат выполнения запроса
//
Функция ВыполнитьЗапросСУБД(ТекстЗапроса,Знач СтруктураПараметров=Неопределено,NamedParameters=Истина) Экспорт
	
КонецФункции // ВыполнитьЗапросСУБД()

////////////////////////////////////////////////////////////
// ФОРМИРОВАНИЕ НАСТРОЕК ПО УМОЛЧАНИЮ

Процедура Настройка_Умолчания_Трассировка() Экспорт
	
КонецПроцедуры	

//Устанавливает параметры обработки в значение по умолчанию
//Параметры:
//	ПриОткрытии	-<Булево>. Определяет необходимсоть формирования структуры колонок	
Процедура Настройка_Умолчания_Все(ПриОткрытии=Истина) Экспорт
	
КонецПроцедуры	

/////////////////////////////////////////////////////////////////////////////////
// ФОРМИРОВАНИЕ ДЕРЕВА МЕТАДАННЫХ

//Заполняет дерево начальными обектами БД (без обработок и отчетов)
//Таким образом формируя первый уровень, который в дальнейшем будет разворачиваться
//Вызывается по кнопке на форме и из формы объектов конфигурации
//Параметры:
//	Дерево					-<ДеревоЗначений>. Заполняемое дерево, значений.
//	СтруктураОграничений    -<Структура>. Струкутра ограничивающая дерево
Процедура ЗаполнитьДерево(Дерево,СтруктураОграничений) Экспорт
	
КонецПроцедуры

//Создат группы объектов метаданных
//	Дерево					-<ДеревоЗначений>. Заполняемое дерево, значений.
Процедура вСоздатьГруппыОбъектовМетаданных(Дерево)  Экспорт
	
КонецПроцедуры

//Получает свойство объекта метаданных и формирует дополнительные связанные с этим подстроки
//Параметры:
//	Свойство					-<Строка>. Имя свойства
//	Объект						-<ОбъектМетаданных>. Свойство которого нужно получить
//	УровеньКоллекцииОбъекта		-<СтрокаДереваЗначений>.  В которой описан объект Метаданных
//	ИндексКартинкиРодителя		-<Число>.
//	ИндексКартинки				-<Число>.
//	СтруктураОграничений    	-<Структура>. Струкутра ограничивающая дерево
//
Процедура ПолучитьСвойствоОбъектаМД(Свойство,Объект,УровеньКоллекцииОбъекта,ИндексКартинкиРодителя=0,ИндексКартинки,СтруктураОграничений) Экспорт
	
КонецПроцедуры		

//Получает описание типов всех наборов метаданных, аналог функции ВсеСсылки, но только для регистров
//Параметры:
//	НаборМетаданных	-<НаборМетаданных>. Набор, для которого нужно получить типы
//	Приставка       -<Строка>. Начало строкового описание типа, например РегистрСведенийМенеджерЗаписи
Функция вПолучитьОписаниеТиповДляМетаданных(НаборМетаданных,Приставка) Экспорт
	
КонецФункции	

///////////////////////////////////////////////////////////
//	ПОЛУЧЕНИЕ СТРУКТУРЫ ЗАПРОСА

//Получает структуру полей таблиц и прочие составные части любого запроса.
//Параметры:
//	ТекстЗапроса-<Строка>. Строка запроса.
//	SDBL		-<Булево>. Признак запроса в терминах SDBL	
Функция ПолучитьСтруктуруЗапроса(ТекстЗапроса,SDBL=Ложь) Экспорт
	
КонецФункции

//Собирвет из структуры текст на языке запросов 
//Параметры:
//	СтруктураЗапроса-	<СтруктураЗначений>. Структура определяет вложенность одного запроса в другой.	
//	СтруктураОтбора-	<СтрокаДЗ>. В которой содержится Пакет, Запрос или Таблицы, определяющие какой запрос выводить
//	ВключатьдДанныеПакета	<Булево>. Необходимость включать данные пакета
//Возвращаемое значение:
//	Строка запроса на языке 1С.
Функция СобратьЗапросИзСтруктуры(СтруктураЗапроса,СтрокаОтбора,ВключатьДанныеПакета=Ложь) Экспорт
	
КонецФункции	

//Формирует представление  поля, с учетом присутсвия псевдонимов путей и прочего.
//Параметры:
//	СтруктураЗапроса-	<СтруктураЗначений>. Структура определяет вложенность одного запроса в другой.	
//	ВыбранноеПоле	<СтрокаТЗ>. Строка таблицы выбранных полей.
//	ТаблицаОтбора	<Строка>. Отбор по псевдониму таблицы, тоесть выводим поля и выражения котрые ссылаются только на эту таблицу 
Функция ПредставлениеПоля(СтруктураЗапроса,ВыбранноеПоле,ТаблицаОтбора,ВключатьПсепдоним=Истина) Экспорт
	
КонецФункции

//Производить преобразование Структуры запроса 
//с  предстваления метаданных в Формате SDBL в формат 1С
//также заменяет другие конструкции которые не могут быть изпользованы в запросах 1С.
//Параметры:
//	СтруктураЗапроса-	<СтруктураЗначений>. Структура определяет вложенность одного запроса в другой.	
Процедура ПребразоватьВМетаданные1С(СтруктураЗапроса) Экспорт
	
КонецПроцедуры

//Преобразует именя в формате SDBL в формат 1С
//Параметры:
//	SDBL 		- <Строка>. Строка котрую нужно преобразовать.
//	Соответсвие - <Соответсвие>. Соответсвие метаданных.
Процедура ПреобразоватьИмяВСиноним1С(SDBL,Соответсвие,СообщатьобОшибке=Истина) Экспорт
	
КонецПроцедуры	

//Получение на основе имени sql поля представление
//Служебные поля в таблице хранения не имеют имени определяем самостоятельно
//Параметры: 
//	SQL					- <Строка>. Имя поля Sql таблицы
//	СоставнойТип 		- <Булево>. Признак поля составного типа
//	ИмяПоУмолчанию 		- <Строка>. Имя в случае не нахождения ничего
//	Тип					- <Строка>. Тип полей структуры.
//Возвращаемое значение:
//	<Структура> структура описания служебного поля
Функция вОписаниеСлужебногоПоля(Sql,СоставнойТип=Ложь,ИмяПоУмолчанию="",Тип="SQL") Экспорт
	
КонецФункции	


//////////////////////////////////////////////////////
// ОТЛАДКА ЗАПРОСОВ

//Открывает конструктор из отладчика позволяет отлаживать запросы в момент их выполнения
//Параметры:
//	Запрос			-<ОбъектЗапрос>. Выполняемый запрос, который нужно обработать
//	Открывать   	-<Булево>. Признак необходимости открытия конструктора,в противном случае будет только добавлено в файл
//	Заголовокзапоса -<Строка>. Заголовок запроса, по умолчанию будет сформирован из текущего времени
Функция Отладка(Запрос,Открывать=Истина,ЗаголовокЗапроса="") Экспорт
	
КонецФункции

Функция  ДобавитьЗапросВДерево(ЗапросОтладки,ДеревоЗначений,ИмяЗапроса) Экспорт
	
КонецФункции


//////////////////////////////////////////////////////
//	ПРЕОБРАЗОВАНИЕ СИСТЕМНЫХ СТРОК

//функция находит определенное вхождение строки
Функция НайтиВхождение(Строка,СтрокаПоиска,Вхождение=0)Экспорт
	
КонецФункции

Функция НаборСвойствОбъектаВСтроку(Набор,ФлаговыйИД) Экспорт
	
КонецФункции

//Формирует список значений, на основе внутренного представления реквизитов
//Параметры:
//	Заголовки 			- <СписокЗначений>. Идентификаторы заголовков;
//	Стр					- <Строка>. Строка внутреннего представления метаданных объекта
//	ПреобразовыватьТипы - <Булево>. Значение(Пустые) в списке будут приведены к типу?
//	Адрес				- <Строка>?
//Возвращаемое значение:
//	СписокЗначений
Функция СтрокуОбъектаВСписок(Заголовки,Стр,ПреобразовыватьТипы=Истина,Адрес="") Экспорт
	
КонецФункции


//////////////////////////////////////////////////////
//	ГРУППОВАЯ ОБРАБОТКА МЕТАДАННЫХ

Функция ПолучитьОбъектыМетаданных(Текст,ПреобразовыватьТипы=Истина)Экспорт
	
КонецФункции	

Процедура ЗаменитьСписокОбъектаМетаданных(ЗаменяемыйСЗ,НовыйСЗ,ТекстовыйДокумент) Экспорт
	
КонецПроцедуры

//Формирует структуру со сслыками на поля объекта метаданных
//создает тем самым некий уровень абстракции.
//Параметры:
//	СписокЗначений 		- <СписокЗначений> Список в которым расположены все реквизиты
//	ОсновнойАдрес		- <Строка>. Список ареса идентификатора	UNID;
//	Суффикс				- <Строка>. Окончание выражения обращения к списку
//	СтруктураИсключений - <Структура>. Исключения 
//
Функция ОбъектМетаданных(СписокЗначений,ОсновнойАдрес = Неопределено,Суффикс = ".Значение",СтруктураИсключений = Неопределено)Экспорт
	
КонецФункции

//////////////////////////////////////////////////////
//	ФУНКЦИИ ЗАЩИТЫ

//Получает объект ключа
//Параметры:
//	FeatureID - <Число>. Определяет какие данные должны быть на ключе
//
Функция GetHASPObject(FeatureID = 0) Экспорт
	
КонецФункции


//////////////////////////////////////////////////////
// ГРУППОВЫЕ ОБРАБОТКИ

//Выполняет групповые операции над результатами запроса.
//Параметры:
//	Форма - <Форма> Форма конструктора
//
Процедура зВыполнитьОбработки(Форма) Экспорт
	
КонецПроцедуры //ВыполнитьОбработки()

//////////////////////////////////////////////////////
// ОБЪЕКТЫ КОНФИГУРАЦИИ

//Заполняет все отображаемые!! на поле табличные поля. Так же может иницировать отображение ранее скрытых полей..
//Параметры:
//	Форма 		- <Форма> Форма объектов конфигурации
//
Процедура зПолучитьДанныеДляТабличныхПолей(Форма) Экспорт
	
КонецПроцедуры	

//Обновление табличной части
//Параметры:
//	Форма 			- <Форма> Форма объектов конфигурации
//	ИмяТаблицыСУБД	- <Строка>. Имя таблицы
//	Скрывать		- <Булево>. Таблица будет скрыта если в ней не будет записей	
//
Процедура зОбновитьТЧ(Форма,ИмяТаблицыСУБД,Скрывать=Истина) Экспорт
	
КонецПроцедуры

//Выполняет построение дерева конфигурации. Усушествает запись основных строк которые в дальнейшем будут разветвляться
//Параметры:
//	Форма 		- <Форма> Форма объектов конфигурации
Процедура зСформироватьДеревоКонфигураци(Форма) Экспорт
	
КонецПроцедуры

//Опредаляет используется ли хранилище или нет
//Параметры:
//	Форма 			- <Форма> Форма объектов конфигурации
//Возвращаемое значение:
//	Булево. Признак наличия тригера
Функция зОпределитьИспользованиеХранилища(Форма) Экспорт
	
КонецФункции

//Выполняет сравнение 2 записей конфигурации
//Параметры:
//	Таблица	- <ТаблицаЗначений>. Таблица строки которой характеризуют запись 2 колонки (структура, таблица) 
//	Форма	- <Форма>. Форма объектов конфигурации.
//
//Возвращаемое значение
//	<Строка>.
Процедура зВыполнитьСравнение(Таблица,Форма) Экспорт
	
КонецПроцедуры

//Формирует структуру данных записи, в зависимости от тогов в какой табице находится эта запись
//Параметры:
//	СтруктураЗаписи	- <Структура,Строка>. Струтура в которой объязательно должно присутсвовать свойство FileName
//	Таблица			- <Строка>. Имя таблицы Config, ConfigSave, Params,
//Возврашаемое значение:
//	Структура данных:
//		Ключ - Уникальное строковое представление записи
//		Запись- Структура содержащая необходимые данные.
//
Функция  зПолучитьДанныеЗаписи(СтруктураЗаписи,Таблица) Экспорт
	
КонецФункции

//Обновлениие выбранных объектов конфигурации, перемещение записей из таблицы ConfigSave в таблицу Config
//Параметры:
//	Форма				-<Форма>. Форма объектов конфигурации
//	Значения			-<Массив, Произвольный> Список идентификаторов обновление которых необходимо выполнить
//	Перемещение 		-<Булево>. Признак необходимости удалять исходные значения из таблицы источника.
//	ТаблицаИсточник 	-<Строка>. Имя таблицы источника
//	ТаблицаНазначения 	-<Строка>. Имя таблицы назначения
//
Процедура зВыполнитьОбновлениеВыбранных(Форма,МассивИдентификаторов,Перемещение=Ложь,ТаблицаИсточник="configsave",ТаблицаНазначение = "config") Экспорт
	
КонецПроцедуры 	

//Выполняет удаление конфигурационных записей из таблиц БД
//Параметры:
//	Структура	- <Структура>. Струтура в которой объязательно должно присутсвовать свойство FileName
//  Таблица		-<Строка>. Таблица, из которой произвоодится удаление
//	УдалятьИзБД	-<Булево>. Признак удаление непосредственно из базы данных
//
Процедура зУдалитьЗаписьИзТаблицы(Знач Структура,Таблица,УдалятьИзБД=Истина) Экспорт
	
КонецПроцедуры 

//Сохраняет текущую запись в файл 
//Параметры:
//	СтруктураКлючей	-<Структура>. Структура ключей
//
Процедура зСохранитьЗаписьВФайл(СтруктураКлючей) Экспорт
	
КонецПроцедуры	

//Добавляет коментарий к записи хранилища
//Параметры:
//	ТекущиеДанные - <СтрокаТЧ>. Редикртируемая строка ТЧ
Процедура зДобавитьКомментарий(ТекущиеДанные) Экспорт
	
КонецПроцедуры	

//Создает/удаляет  тригер на таблице, config
//
Процедура зВключитьВыключитьХранилище() Экспорт
	
КонецПРоцедуры	

//Получает параметры таблиц(размер, индексы и прочее) ИБ
//Параметры
//	Таблица 		- <ТаблицаЗначений>. Талицв в котору нужно загрузить параметры
//	МассивТаблиц 	- <Массив>. Массив имен таблиц.
//
Процедура зПолучитьПараметрыТаблиц(Таблица,МассивТаблиц) Экспорт
	
КонецПроцедуры

//////////////////////////////////////////////////////
// ЗАГРУЗКА ДАННЫХ

//Получает объект загрузки, либо создает новый либо находит по указанным параметрам
//Параметры:
//	Форма			- <Форма>. Форма, контекст загрузки данных
//	ПКО				- <СтрокаДереваЗначений> ПКО для которого выполняем
//  Параметры		- <Структура>. Структура доступных параметров
//  Объект			- <Произвльный>. Обрабатываемый объект, тип в соотвествии со свойствами обработки
//	ТекущиеДанные	- <СтрокаТаблицыЗначений>. Строка таблицы результатов запроса.
//	СтрокаТЧ		- <СтрокаТабличнойЧасти>. Новая строка табличной части
//	Запись 			- <ЗаписьРегистра>. Запись (новый злемент) набора записей
//Возвращаемое значение.
//	Объект
Функция  зПолучитьОбъект(Форма,ПКО, Параметры, Объект, ТекущиеДанные, СтрокаТЧ = Неопределено, Запись = Неопределено) Экспорт
	
КонецФункции	

//Получает значение из ПКС
//Параметры:
//	Форма			- <Форма>. Форма, контекст загрузки данных
//	ПКС				-<СтрокаТаблицыЗначений> ПКС объекта
//  Параметры		-<Структура>. Структура доступных параметров
//  Объект			-<Произвльный>. Обрабатываемый объект, тип в соотвествии со свойствами обработки
//	ТекущиеДанные	-<СтрокаТаблицыЗначений>. Строка таблицы результатов запроса.
//	СтрокаТЧ		-<СтрокаТабличнойЧасти>. Строка табличной части.
//	Запись			-<ЗаписьРегистра>. Запись(элемент) набора записей.
//
Функция зПолучитьЗначениеПКС(Форма, ПКС, Параметры, Объект, ТекущиеДанные, СтрокаТЧ = Неопределено, Запись = Неопределено) Экспорт
	
КонецФункции	

//Формирует выражение  для поиска объекта, набора записей
//Параметры:
//	Форма			- <Форма>. Форма, контекст загрузки данных
//	ПКО				-<СтрокаДереваЗначений>	ПКО для которого нужно свормировать выражение	
//  Параметры		-<Структура>. Структура доступных параметров
//  Объект			-<Произвльный>. Обрабатываемый объект, тип в соотвествии со свойствами обработки
//	ТекущиеДанные	-<СтрокаТаблицыЗначений>. Строка таблицы результатов запроса.
//	СтрокаТЧ		-<СтрокаТабличнойЧасти>. Новая строка табличной части
//	Запись 			- <ЗаписьРегистра>. Запись (новый злемент) набора записей
//
//Возвращаемое значение.
//	<Строка>. Текст выражения
Функция зСформироватьВыражениеПоискаОбъекта(Форма,ПКО, Параметры = Неопределено, Объект = Неопределено, ТекущиеДанные = Неопределено, СтрокаТЧ = Неопределено, Запись = Неопределено) Экспорт
	
КонецФункции
//Открывает таблицу соспоставления для текущих метаданных
//Параметры:
//	Форма			- <Форма>. Форма, контекст загрузки данных
//
Процедура зОткрытьТаблицуСопоставления(Форма) Экспорт
	
КонецПроцедуры

//Функция получает имя динамbческой записи
//Параметры:
//	FileName -<Строка>. Ключ записи.
//Возвращаемое значение
//	Строка
Функция зПолучитьИмяДинамическойЗаписи(FileName) Экспорт
	
КонецФункции

/////////////////////////////////////////////////////
// ДИАГРАММА ИЗМЕНЕНИЙ

//Формирует диаграмму
//Парметры:
//	Диаграмма 		- <ДиаграммаГанта> элемент формы
//  ДеревоКонф		- <ДеревоЗначений>. Дерево структуры конфигурации 
//	НачалоПериода 	- <Дата>. Дата с кторой начинается отбор изменений
//	КонецПериода	- <Дата>. Дата которой заканчивается отбор изменений
//
Процедура зПостроитьДиаграммуИзменений(ДиаграммаГанта,ДеревоКонф,НачалоПериода, КонецПериода) Экспорт
	
КонецПроцедуры


