Перем мИмяФайла;                        //Имя файла запросов
Перем мИмяПути;                         //Путь к файлу запорсов

Перем мЗаголовокФормы;                  //Заголовок формы

Перем мТекущаяСтрока;           		//Текущая(прошлая) строка дерева запросов 
Перем мИдетДобавление;                  //Признак добавления
Перем мАктивизированаДобавляемаяЗапись; //Признак активизации добавленной записи
Перем мИмяНастройки;					//Имя настойки, редактируемой строки доступных обработок	

Перем мФормаПараметров 			Экспорт;//Форма параметров из произвольного алгоритма осуществляется выбор параметров 
Перем МетаданныеФормы 			Экспорт;//Содержим имя формы как оно указано в конфигураторе 


Перем ИндексСтроки				Экспорт;//Используется в групповой обработк для определения первой или последней строки
Перем КоличествоСтрок			Экспорт;//Используется в групповой обработк для определения первой или последней строки


Перем СтраницаПанелиЗапросов; 			//Фиксируем текущую страницу при переходе на закладку "Обработка результата"
Перем ТаблицаФоновыхПроцессов; 			//В таблице фиксируются запушенные фоновые процессы
Перем ПозицияПретаскивания;             //Позиция перетаскивания, для дерева запросов

Перем ПолеТекстовогоДокументаСКонтекстнойПодсказкой;

Перем РедактируемаяКонструкторомСтрока; //Необходима для фиксации факта изменения СКД
Перем ТЧ 						Экспорт;//Динамическая табличная часть
Перем ТаблицаВыбранныхОбработок Экспорт;//Таблица в которой перечисляются обработки для выполнения
Перем Конструктор_МаксимальнаяШирина, Конструктор_КолвоВидмыхКолонок; //переменные определяюшие размерность элементов формы


// @@@.КЛАСС.ПолеТекстовогоДокументаСКонтекстнойПодсказкой
// Транслятор обработки событий нажатия на кнопки командной панели в компоненту.
//
// Параметры:
//  Кнопка       – КнопкаКоманднойПанели.
//
Процедура КлсПолеТекстовогоДокументаСКонтекстнойПодсказкойНажатие(Кнопка)
	Если ПолеТекстовогоДокументаСКонтекстнойПодсказкой.Свойство(ТекущийЭлемент.Имя) Тогда
		Результат = ПолеТекстовогоДокументаСКонтекстнойПодсказкой[ТекущийЭлемент.Имя].Нажатие(Кнопка);
	КонецЕсли;
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// ВСПОМОГАТЕЛЬНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

//Создает набор колонок кдерева запросов
//колонки отмеченные * обязательны, призагрузке из файла будет попытка из прочитать 
//Колонки отмеченные ` сохраняются только для совместимости с др. форматами  не читаются при загрузке из файла
//Все остальные колонки необходимы для текушей работы дерева
//Параметры:
//	Нет.
//Возвращаемое значение:
// <ДеревоЗначений>
Функция вИнициализацияДерева()
	СобытиеОтладки=Формы.Отладка.ДобавитьСобытие("Инициализация дерева запросов","Конструктор");
	Попытка
		ДеревоЗапросов=Новый ДеревоЗначений;
		ДеревоЗапросов.Колонки.Добавить("Запрос"); 					//0 *
		ДеревоЗапросов.Колонки.Добавить("ТекстЗапроса");        	//1 *
		ДеревоЗапросов.Колонки.Добавить("ПараметрыЗапроса");    	//2 *
		ДеревоЗапросов.Колонки.Добавить("СпособВыгрузки");      	//3 *
		ДеревоЗапросов.Колонки.Добавить("ТекстЗапросаSQL");     	//4 *
	    ДеревоЗапросов.Колонки.Добавить("ВремяВыполнения"); 		//5 * Время выполнения
		ДеревоЗапросов.Колонки.Добавить("Язык"); 					//6 * Выражение на встроенном языке
		ДеревоЗапросов.Колонки.Добавить("Обработки"); 				//7 * Таблица обработок результата запроса
		ДеревоЗапросов.Колонки.Добавить("НастройкиПостроителя");	//8 ` Настройки построителя запроса
		ДеревоЗапросов.Колонки.Добавить("АвтоЗаполнение"); 			//9 ` Автозаполнение настроек построителя запроса (для консоли отчетов)
		ДеревоЗапросов.Колонки.Добавить("Выделение"); 				//10  Параметры выделения  при пеерзоде с одного текстового поля на другое 
		ДеревоЗапросов.Колонки.Добавить("ДатаИзменения"); 			//11* Дата последнего изменения строки
		ДеревоЗапросов.Колонки.Добавить("РезультатЗапроса"); 		//12 Таблица(дерево) значение выполнения запроса или других инструкций
		ДеревоЗапросов.Колонки.Добавить("ВыбранныеОбработки"); 		//13 Дерево выбранных обработок
		ДеревоЗапросов.Колонки.Добавить("УникальныйИдентификатор"); //14 Уникальный идентификатор для фоновых процессов
		//СКД
		ДеревоЗапросов.Колонки.Добавить("СхемаКомпоновкиДанных"); 	//15 
		ДеревоЗапросов.Колонки.Добавить("Настройки"); 				//16
		
		ДеревоЗапросов.Колонки.Добавить("ЗапросПостроителя",Новый ОписаниеТипов("Строка")); 		//17
	Исключение
		Формы.Отладка.ЗавершитьСобытие(СобытиеОтладки,"ОченьВажное",ИнформацияОбОшибке().Описание);
		ВызватьИсключение  "Ошибка инициализации";
	КонецПопытки;
	Формы.Отладка.ЗавершитьСобытие(СобытиеОтладки);	
	Возврат ДеревоЗапросов;
КонецФункции

// Сохраняет имя файла и путь к нему для использования в последующих сеансах работы
//
// Параметры:
//  Нет.
//
Процедура вСохранитьИмяФайла()

	СохранитьЗначение("КонсольЗапросов_ИмяФайла", мИмяФайла);
	СохранитьЗначение("КонсольЗапросов_ИмяПути",  мИмяПути);

КонецПроцедуры // СохранитьИмяФайла()

// Восстанавливает имя открывавшегося в предыдущем сеансе работы файла и путь к нему 
//
// Параметры:
//  Нет.
//
Процедура вВосстановитьИмяФайла()
	мИмяФайла = ВосстановитьЗначение("КонсольЗапросов_ИмяФайла");
	мИмяПути  = ВосстановитьЗначение("КонсольЗапросов_ИмяПути");

	Если мИмяФайла = Неопределено Тогда
		мИмяФайла = "";
	КонецЕсли;

	Если мИмяПути = Неопределено Тогда
		мИмяПути = ПараметрыОкружения.КаталогОбработки+"\MyScripts";
	КонецЕсли;
КонецПроцедуры // ВосстановитьИмяФайла()

// Подготовка к созданию нового файла запросов
//
// Параметры:
//  Нет.
//
Процедура вСоздатьНовыйФайлЗапросов()Экспорт
	мИмяФайла = "";
	мИмяПути = "";
	вСохранитьИмяФайла();
	вОчиститьЗначения();
	вУстановитьЗаголовокФормы();
	мТекущаяСтрока = НеОпределено;
	Если Не ВладелецФормы.МодальныйРежим Тогда
		//на режиме отладки не добавляем строку 
		//она добавляется позже при обновлени строки
		мТекущаяСтрока = ДеревоЗапросов.Строки.Добавить();
		мТекущаяСтрока.Запрос 			= "Запросы";
		мТекущаяСтрока.ТекстЗапроса 	= "";
		мТекущаяСтрока.ТекстЗапросаSQL 	= "";
		мТекущаяСтрока.Язык				= "";
		мТекущаяСтрока.ВремяВыполнения	= Новый СписокЗначений(); 
	КонецЕсли;	
	Модифицированность = Ложь;
КонецПроцедуры // СоздатьНовыйФайлЗапросов()

// Очищает дерево запросов, текстовое поле, список параметров
//
// Параметры:
//  Нет.
//
Процедура вОчиститьЗначения()
	ДеревоЗапросов.Строки.Очистить();
	вЗадатьТекстЗапроса("");
	вЗадатьТекстЗапроса("",ЭлементыФормы.ТекстМодуля);
	вЗадатьТекстЗапроса("",ЭлементыФормы.ТекстЗапросаSQL);
	мФормаПараметров.Параметры.Очистить();
	ДоступныеОбработки.Строки.Очистить();
	
	ВыбранныеОбработки.Строки.Очистить();
	ВыбранныеОбработки.Колонки.Очистить();
КонецПроцедуры // ОчиститьЗначения()

// Устанавливает текст запроса в текстовом поле
//
// Параметры:
//  Текст - устанавливаемый текст запроса.
//
Процедура вЗадатьТекстЗапроса(Текст,Элемент=Неопределено)
	Если  Элемент=Неопределено Тогда
		Элемент=ЭлементыФормы.ТекстЗапроса;
	КонецЕсли;	
	Элемент.УстановитьТекст(Текст);
КонецПроцедуры // ЗадатьТекстЗапроса()

// Загружает дерево запросов, текстов модулей и других данных из файла
//
// Параметры:
//  Нет.
//
Процедура вЗагрузитьЗапросыИзФайла()
	СобытиеОтладки=Формы.Отладка.ДобавитьСобытие("Загрузка запросов из файла "+мИмяФайла,"Конструктор");
	Попытка
		~Move:
		//Проверим существование файла.
		ФайлЗначения = Новый Файл(мИмяФайла);
		ПолученноеЗначение = ?(ФайлЗначения.Существует(), ЗначениеИзФайла(мИмяФайла), Неопределено);

		Если ТипЗнч(ПолученноеЗначение) = Тип("ТаблицаЗначений") Тогда
			СобытиеОтладки_Конвертация=Формы.Отладка.ДобавитьСобытие("Конвертация в новый формат","Конструктор",СобытиеОтладки);
			Попытка
	            вОчиститьЗначения();
				Для каждого СтрокаВремТаблицы из ПолученноеЗначение Цикл
					НовСтрока = ДеревоЗапросов.Строки.Добавить();
					НовСтрока[0] = СтрокаВремТаблицы[0]; 		// Запрос
					НовСтрока[1] = СтрокаВремТаблицы[1]; 		// ТекстЗапроса
					НовСтрока[2] = СтрокаВремТаблицы[2]; 		// ПараметрыЗапроса
					Попытка
						//Это ужеже отличия от стандартной консоли запросов
						//Порядок в соответсвии с изменением версий
						НовСтрока[3] = СтрокаВремТаблицы[3]; 	// СпособВыгрузки
						НовСтрока[4] = СтрокаВремТаблицы[4]; 	// ЗапросSQL
						НовСтрока[5] = СтрокаВремТаблицы[5]; 	// Время выполнения
						НовСтрока[6] = СтрокаВремТаблицы[6]; 	// Выражение на встроенном языке
						НовСтрока[7] = СтрокаВремТаблицы[7]; 	// Дерево доступных обработок результата запроса
						НовСтрока[11] = ?(СтрокаВремТаблицы.Колонки.Количество >= 11, 
												СтрокаВремТаблицы[11],
												ФайлЗначения.ПолучитьВремяИзменения()); 	// Дата последнего изменения строки
						НовСтрока[13] = СтрокаВремТаблицы[13]; 	// Дерево выбранных обработок
					Исключение	
					КонецПопытки;	
				КонецЦикла;
				Модифицированность = Ложь;
			Исключение
				Формы.Отладка.ЗавершитьСобытие(СобытиеОтладки_Конвертация,"ОченьВажное",ИнформацияОбОшибке().Описание);
				ВызватьИсключение  "Ошибка конвертации форматов";
			КонецПопытки;
			Формы.Отладка.ЗавершитьСобытие(СобытиеОтладки_Конвертация);	
		ИначеЕсли ТипЗнч(ПолученноеЗначение) = Тип("ДеревоЗначений") Тогда
			вОчиститьЗначения();
			вСкопироватьДеревоЗапросов(ПолученноеЗначение, ДеревоЗапросов, ФайлЗначения.ПолучитьВремяИзменения());
			Модифицированность = Ложь;
		Иначе // Формат файла не опознан
			Пока Вопрос("Невозможно загрузить список запросов из файла
						   |"+мИмяФайла+"", РежимДиалогаВопрос.ПовторитьОтмена,20,,"Enterprise Integrator") = КодВозвратаДиалога.Повторить Цикл
				Перейти ~Move;		   
			КонецЦикла;
			вСоздатьНовыйФайлЗапросов();
			Формы.Отладка.ЗавершитьСобытие(СобытиеОтладки);
			Возврат;
		КонецЕсли;
		вУстановитьЗаголовокФормы();
	Исключение
		Формы.Отладка.ЗавершитьСобытие(СобытиеОтладки,"ОченьВажное",ИнформацияОбОшибке().Описание);
		ВызватьИсключение  "Ошибка инициализации";
	КонецПопытки;
	Формы.Отладка.ЗавершитьСобытие(СобытиеОтладки);	
КонецПроцедуры // ЗагрузитьЗапросыИзФайла()

// Копирует дерево запросов при копировании необходимо заполнять каждую строчку, каких то колонок может и не быть в 
// новом дереве, в случае отсуствия колонки дата изменения в исходном дереве, устанавливается дата переданная в параметр
// Параметры:
//  ИсходноеДерево 	- <ДеревоЗначений>;
//	НовоеДерево 	- <ДеревоЗначений>;
//  ДатаИзменения 	- Дата последненго изменения файла запросов.
Процедура вСкопироватьДеревоЗапросов(ИсходноеДерево, НовоеДерево, ДатаИзменения=Неопределено)
    ОбработкаПрерыванияПользователя();
	НовоеДерево.Строки.Очистить();
	Если ИсходноеДерево.Строки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	Для каждого СтрокаДерева из ИсходноеДерево.Строки Цикл
		НоваяСтрока = НовоеДерево.Строки.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаДерева);
		Если ТипЗнч(ДатаИзменения) = Тип("Дата")
			И Не ЗначениеЗаполнено(НоваяСтрока.ДатаИзменения) Тогда // Аверин 26 июня 2008 г. 21:08:13 
			НоваяСтрока.ДатаИзменения = ДатаИзменения;
		КонецЕсли;	
		вСкопироватьДеревоЗапросов(СтрокаДерева, НоваяСтрока, ДатаИзменения);
	КонецЦикла;
КонецПроцедуры

//Выполняет подготовительные действия, заполнение больших массивов данных, используемых в групповой обработке
//
Процедура вВыполнитьПодготовительныеДействияГрупповыхОбработок()
	СобытиеОтладки=Формы.Отладка.ДобавитьСобытие("Инициализация доступных типов","Конструктор");
	Попытка
		ИнициализацияОкнаИсполнения("Инициализация доступных типов",
			?(Не ПараметрыОкружения.Свойство("ВсеОбъекты"),8,0)+?(Не ПараметрыОкружения.Свойство("ВсеНаборыЗаписей"),4,0));
		//создание объектов
		Если Не ПараметрыОкружения.Свойство("ВсеОбъекты") Тогда
			ПараметрыОкружения.Вставить("ВсеОбъекты",Новый ОписаниеТипов());    //Необходимо отличать объектный тип от любого другого
			ПараметрыОкружения.ВсеОбъекты	= Новый ОписаниеТипов(ПараметрыОкружения.ВсеОбъекты,вПолучитьОписаниеТиповДляМетаданных(Метаданные.Справочники,"СправочникОбъект").Типы());
			ПараметрыОкружения.ВсеОбъекты	= Новый ОписаниеТипов(ПараметрыОкружения.ВсеОбъекты,вПолучитьОписаниеТиповДляМетаданных(Метаданные.Документы,"ДокументОбъект").Типы());
			ПараметрыОкружения.ВсеОбъекты	= Новый ОписаниеТипов(ПараметрыОкружения.ВсеОбъекты,вПолучитьОписаниеТиповДляМетаданных(Метаданные.ПланыВидовХарактеристик,"ПланВидовХарактеристикОбъект").Типы());
			ПараметрыОкружения.ВсеОбъекты	= Новый ОписаниеТипов(ПараметрыОкружения.ВсеОбъекты,вПолучитьОписаниеТиповДляМетаданных(Метаданные.ПланыСчетов,"ПланСчетовОбъект").Типы());
			ПараметрыОкружения.ВсеОбъекты	= Новый ОписаниеТипов(ПараметрыОкружения.ВсеОбъекты,вПолучитьОписаниеТиповДляМетаданных(Метаданные.ПланыВидовРасчета,"ПланВидовРасчетаОбъект").Типы());
			ПараметрыОкружения.ВсеОбъекты	= Новый ОписаниеТипов(ПараметрыОкружения.ВсеОбъекты,вПолучитьОписаниеТиповДляМетаданных(Метаданные.ПланыОбмена,"ПланОбменаОбъект").Типы());
			ПараметрыОкружения.ВсеОбъекты	= Новый ОписаниеТипов(ПараметрыОкружения.ВсеОбъекты,вПолучитьОписаниеТиповДляМетаданных(Метаданные.БизнесПроцессы,"БизнесПроцессОбъект").Типы());
			ПараметрыОкружения.ВсеОбъекты	= Новый ОписаниеТипов(ПараметрыОкружения.ВсеОбъекты,вПолучитьОписаниеТиповДляМетаданных(Метаданные.Задачи,"ЗадачаОбъект").Типы());
		КонецЕсли;
		Если Не ПараметрыОкружения.Свойство("ВсеНаборыЗаписей") Тогда
			вСфоормироватьОписаниеТиповРегистров();
			ПараметрыОкружения.Вставить("ВсеНаборыЗаписей",ПараметрыОкружения.РегистрыСведений);
			ПараметрыОкружения.ВсеНаборыЗаписей	=  Новый ОписаниеТипов(ПараметрыОкружения.ВсеНаборыЗаписей,ПараметрыОкружения.РегистрыНакопления.Типы());
			ПараметрыОкружения.ВсеНаборыЗаписей	=  Новый ОписаниеТипов(ПараметрыОкружения.ВсеНаборыЗаписей,ПараметрыОкружения.РегистрыБухгалтерии.Типы());
			ПараметрыОкружения.ВсеНаборыЗаписей	=  Новый ОписаниеТипов(ПараметрыОкружения.ВсеНаборыЗаписей,ПараметрыОкружения.РегистрыРасчета.Типы());
		КонецЕсли;
		ОстановкаОкнаИсполнения();

		Если Не ПараметрыОкружения.Свойство("ПроводимыеДокументы") Тогда
			ПараметрыОкружения.Вставить("ПроводимыеДокументы");
			МассивТипов =  Новый Массив;
			Для Каждого Документ Из Метаданные.Документы Цикл
				Если Документ.Проведение = Метаданные.СвойстваОбъектов.Проведение.Разрешить Тогда
					МассивТипов.Добавить(Тип("ДокументСсылка."+Документ.Имя));	
					МассивТипов.Добавить(Тип("ДокументОбъект."+Документ.Имя));
				КонецЕсли;	
			КонецЦикла;	
			ПараметрыОкружения.ПроводимыеДокументы	=  Новый ОписаниеТипов(МассивТипов);
		КонецЕсли;
	Исключение
		Формы.Отладка.ЗавершитьСобытие(СобытиеОтладки,"ОченьВажное",ИнформацияОбОшибке().Описание);
		ВызватьИсключение "Не удалось инициализировать, доступные типы данных";
	КонецПопытки;
	Формы.Отладка.ЗавершитьСобытие(СобытиеОтладки);	
КонецПроцедуры 

//Проверяет соответвие загруженных настроек "ДоступныеОбработки" текущей конфигурацией
//на случай их обновления или удаления
//	Параметры:
//		ДоступныеОбработки	- <ДеревоЗначений>. Достпуных обработок файла из настройки.
//		Префикс             - <Строка>. Префикс форм обработки как они заданы в конфигураторе.
//		Удалять				- <Булево>. Удаляет не найденные в метаданных
Процедура вЗагрузитьГрупповыеОбработки(ДоступныеОбработки,Префикс="ОбработкаРезультата_",Удалять=Истина) Экспорт
	СобытиеОтладки=Формы.Отладка.ДобавитьСобытие("Инициализация групповых обработок с перфиксом "+Префикс,"Конструктор");
	Попытка
		ИнициализацияОкнаИсполнения("Инициализация групповых обработок",ЭтотОбъект.Метаданные().Формы.Количество());
		Для каждого Форма из ЭтотОбъект.Метаданные().Формы Цикл
			Если Найти(Форма.Имя,Префикс)=1 Тогда
				Формы.ОкноИсполнения.Подзаголовок = Форма.Синоним;
				СобытиеОтладки_Подключение=Формы.Отладка.ДобавитьСобытие("Подключение групповой обработки """+Форма.Синоним+"""","Конструктор",СобытиеОтладки);
				Попытка
					НайденнаяСтрока 	= ДоступныеОбработки.Строки.Найти(Форма.Имя, "ИмяФормы");
					ОбъектФормы			= ПолучитьФорму(Форма.Имя);
					вПроверитьФормуГрупповойОбработки(ОбъектФормы);
					Если НЕ НайденнаяСтрока = Неопределено Тогда
						НоваяОбработка			= НайденнаяСтрока;
					Иначе
						НоваяОбработка 			= ДоступныеОбработки.Строки.Добавить();
						НоваяОбработка.ИмяФормы = Форма.Имя;
					КонецЕсли;
					
					НоваяОбработка.Обработка 			= Форма.Синоним;
					СвойстваОбработки					= ОбъектФормы.ПолучитьСвойстваОбработки(); 
					ЗаполнитьЗначенияСвойств(НоваяОбработка,СвойстваОбработки);
					Если НЕ СвойстваОбработки.ИспользоватьНастройки Тогда
						НоваяОбработка.Строки.Очистить();
					ИначеЕСли НоваяОбработка.Строки.Количество()>0 Тогда
						//проверим заполнены ли объязательные поля для вложеных настроек, они могут быть сохранены в других версиях например в 1.09
						Для Каждого Настройка ИЗ НоваяОбработка.Строки Цикл
							Если Не ЗначениеЗаполнено(Настройка.Типы) Тогда	
								Настройка.Типы 		= НоваяОбработка.Типы;	
							КонецЕсли;
							Если Не ЗначениеЗаполнено(Настройка.Действие) Тогда	
								Настройка.Действие 	= ДействиеПеретаскивания.Перемещение;	
							КонецЕсли;
						КонецЦикла;	
					КонецЕсли;
				Исключение
					Если НЕ НайденнаяСтрока = Неопределено Тогда
						ДоступныеОбработки.Строки.Удалить(НайденнаяСтрока);
                    КонецЕсли;
					Формы.Отладка.ЗавершитьСобытие(СобытиеОтладки_Подключение,"Информация",ИнформацияОбОшибке().Описание);
					//ВызватьИсключение "Не удалось подключить обработку";
				КонецПопытки;
				Формы.Отладка.ЗавершитьСобытие(СобытиеОтладки_Подключение);	
			КонецЕсли;
			Формы.ОкноИсполнения.Индикация();
		КонецЦикла;
		ОстановкаОкнаИсполнения();
		Если Удалять Тогда
			МассивДляУдаления = Новый Массив;
			Для каждого ДоступнаяОбработка из ДоступныеОбработки.Строки Цикл
				Если ЭтотОбъект.Метаданные().Формы.Найти(ДоступнаяОбработка.ИмяФормы) = Неопределено Тогда
					МассивДляУдаления.Добавить(ДоступнаяОбработка);
				КонецЕсли;
			КонецЦикла;
			Для Каждого Элемент Из  МассивДляУдаления Цикл
				ДоступныеОбработки.Строки.Удалить(Элемент);
			КонецЦикла;
		КонецЕсли;
	Исключение
		Формы.Отладка.ЗавершитьСобытие(СобытиеОтладки,"ОченьВажное",ИнформацияОбОшибке().Описание);
		ВызватьИсключение "Не удалось подключить групповые обработки";
	КонецПопытки;
	Формы.Отладка.ЗавершитьСобытие(СобытиеОтладки);	
КонецПроцедуры // ЗагрузитьОбработки()

//Процедура выполняет проверку формы на соответсвие требованиям
//форма(обработка) должна содержать определенные функции, процедуры.
//Параметры:
//	Форма	-<Форма>. проверяемая форма
//
Процедура вПроверитьФормуГрупповойОбработки(ОбъектФормы)
	СобытиеОтладки=Формы.Отладка.ДобавитьСобытие("Проверка формы ","Конструктор");
	Попытка
		МассивПроцедур	= Новый Массив;
		МассивПроцедур.Добавить(Новый Структура("Выражение","ЭтаФорма.ТекущаяНастройка"));
		МассивПроцедур.Добавить(Новый Структура("Выражение","ЭтаФорма.ПолучитьСвойстваОбработки()"));
		МассивПроцедур.Добавить(Новый Структура("Выражение","ЭтаФорма.ВыполнитьОбработку(Объект,Параметры,ТекущиеДанные,Новый Массив)"));
		МассивПроцедур.Добавить(Новый Структура("Выражение","ЭтаФорма.ЗагрузитьНастройку()"));
        МассивПроцедур.Добавить(Новый Структура("Выражение","ЭтаФорма.ПолучитьТипВозрЗначений()"));
        МассивПроцедур.Добавить(Новый Структура("Выражение","ЭтаФорма.СформироватьАлгоритм()"));
		Для Каждого СлужебныеДанные Из МассивПроцедур Цикл
			вВычислитьЗначение(СлужебныеДанные,,ОбъектФормы);		
		КонецЦикла;	
	Исключение
		Формы.Отладка.ЗавершитьСобытие(СобытиеОтладки,"ОченьВажное",ИнформацияОбОшибке().Описание);
		ВызватьИсключение "Обработка(форма) не соответсвует требованиям";
	КонецПопытки;
	Формы.Отладка.ЗавершитьСобытие(СобытиеОтладки);	
КонецПроцедуры	

//Инициализирует дерево достпных обработок
//проверяет входящие типы и создает необходимые колонки.
//Параметры:
//	Значение  -<Произвольное>. Значенив котором предположительно сохраняются обработки
Процедура вИнициализацияДереваОбработок(Значение)
	СобытиеОтладки=Формы.Отладка.ДобавитьСобытие("Инициализация дерева доступных обработок","Конструктор");
	Попытка
		Информация = "";
		Пока ТипЗнч(Значение) = Тип("ХранилищеЗначения") Цикл
			ОбработкаПрерыванияПользователя();
			Значение=Значение.Получить();	
		КонецЦикла;	
		Если ТипЗнч(Значение) = Тип("ДеревоЗначений") Тогда
			//для совмещения с предыдущими версиями
			Если 	Значение.Колонки.Найти("Картинка") <> Неопределено И 
					Значение.Колонки.Найти("Картинка").ТипЗначения = Новый ОписаниеТипов("Строка")   Тогда
				//удалим колонку предыдущей настройки если они типа строка
				//для настроек сохраненных версие 1.09 и раньше
				Значение.Колонки.Удалить(Значение.Колонки.Найти("Картинка"));
				Значение.Колонки.Добавить("Картинка");
				
				Если Значение.Колонки.Найти("Действие") <> Неопределено И 
					Значение.Колонки.Найти("Действие").ТипЗначения = Новый ОписаниеТипов("Строка") Тогда
					Значение.Колонки.Удалить(Значение.Колонки.Найти("Действие"));
					Значение.Колонки.Добавить("Действие");
				КонецЕсли;
				
				Если Значение.Колонки.Найти("Типы") <> Неопределено И 
					Не Значение.Колонки.Найти("Типы").ТипЗначения = Новый ОписаниеТипов("ОписаниеТипов") Тогда
					Значение.Колонки.Удалить(Значение.Колонки.Найти("Типы"));
					Значение.Колонки.Добавить("Типы",Новый ОписаниеТипов("ОписаниеТипов"));
				КонецЕсли;
				
				Информация = "Загружена настрока сохраненная в предыдущей версии конструктора, не все доступные обработки могут быть конвертированны";
			КонецЕсли;
			
			ДоступныеОбработки = Значение.Скопировать();
			
			//для совмещения с предыдущими версиями
			Если ДоступныеОбработки.Колонки.Найти("Функция") = Неопределено Тогда
				ДоступныеОбработки.Колонки.Добавить("Функция", Новый ОписаниеТипов("Булево"));
			КонецЕсли;
		КонецЕсли;
		Если ПустаяСтрока(Информация) Тогда
			Формы.Отладка.ЗавершитьСобытие(СобытиеОтладки);	
		Иначе
			Формы.Отладка.ЗавершитьСобытие(СобытиеОтладки,"Информация",Информация);	
		КонецЕсли;	
	Исключение
		Формы.Отладка.ЗавершитьСобытие(СобытиеОтладки,"ОченьВажное",ИнформацияОбОшибке().Описание);
		ВызватьИсключение "Не удалось загрузить достпные обработки";
	КонецПопытки;
КонецПроцедуры	

//Очишает текст запроса, от настроек построителя от выражений в {}
//Параметры:
//	ТекстЗапроса-<Строка>. Текст запроса
//Возвращаемое значение:
//	<Строка>
Функция вОчиститьЗапросОтДанныхПостроителя(Знач ТекстЗапроса)
	Возврат ТекстЗапроса;
КонецФункции	

//В таблицах для обеспечения функциональности должны присутсвовать служебные колонки
//отображение этих служебных колонко не всегда объязательно. Данные процедура устанавливет для них необходимые свойства
//Параметры:
//	Элемент	-<ЭлементУправленияФормы> для которого необходимо установить свойства колонок	
Процедура вУстановитьПараметрыСлужебныхКолонок(Элемент)
	Элемент.Колонки["Пометка_Ei"].Данные = ""; 
	Если Элемент.Имя="ВыбранныеОбработки" Тогда
		Элемент.Колонки["Пометка_Ei"].Данные 			= "Условие_Ei";
		Элемент.Колонки["Пометка_Ei"].Данные 			= "Условие_Ei";
        Элемент.Колонки["Пометка_Ei"].ИзменятьВидимость = Ложь;
		Элемент.Колонки["Условие_Ei"].Видимость			= Ложь;
		Элемент.Колонки["Условие_Ei"].ИзменятьНастройку	= Ложь;
		МассивТипов = Новый Массив;
		МассивТипов.Добавить(Тип("Булево"));
		МассивТипов.Добавить(Тип("Число"));
		Элемент.Колонки["Пометка_Ei"].ТекстПодвала	= ЗначениеВСтрокуВнутр(Новый ОписаниеТипов(МассивТипов));
		Если Элемент.Колонки.Количество()>2 Тогда
			Элемент.Колонки[2].ОтображатьИерархию=Истина;
		КонецЕСли;
	Иначе
		Элемент.Колонки["Пометка_Ei"].Ширина=1; //на эту колонку в выбранных обработках можем перемещать Условие выполнения поэтому ее нужно оставить достаточно широкой
		Элемент.Колонки["Пометка_Ei"].ИзменятьНастройку	= Ложь;
	КонецЕСли;	
	Элемент.Колонки["Пометка_Ei"].ДанныеФлажка 		= "Пометка_Ei";
	Элемент.Колонки["Пометка_Ei"].ПодсказкаВШапке 	= "Пометка";
	Элемент.Колонки["Пометка_Ei"].РежимРедактирования = РежимРедактированияКолонки.Непосредственно;
	Если ТипЗнч(Элемент.Значение)=Тип("ДеревоЗначений") Тогда
		Элемент.Колонки["Пометка_Ei"].ТриСостоянияФлажка=(Элемент.Имя="ВыбранныеОбработки");
		Элемент.Колонки["Пометка_Ei"].ОтображатьИерархию = Ложь;
	КонецЕсли;
	Для каждого Колонка из Элемент.Колонки Цикл
		Если Колонка.Ширина>Конструктор_МаксимальнаяШирина Тогда
			Колонка.Ширина=Конструктор_МаксимальнаяШирина;
		КонецЕсли;
		Если Колонка.ИзменятьНастройку Тогда
			Если Элемент.Имя="ВыбранныеОбработки" Тогда 
	        	Колонка.Видимость=(ЭлементыФормы.ТаблицаРезультата.Колонки.Индекс(Колонка)<=Конструктор_КолвоВидмыхКолонок);
			Иначе
				Колонка.ЭлементУправления.КнопкаВыбора=Истина;
				Колонка.ЭлементУправления.КнопкаОткрытия=Истина;
			КонецЕСли;
		КонецЕсли;	
	КонецЦикла;
КонецПроцедуры	

// Устанавливает заголовок формы по имени файла запросов
//
// Параметры:
//  Нет.
//
Процедура вУстановитьЗаголовокФормы()
	
	Если мИмяФайла <> "" Тогда
		Заголовок = мЗаголовокФормы + " : " + мИмяФайла;
	Иначе
		Заголовок = мЗаголовокФормы;
	КонецЕсли;
	
КонецПроцедуры // УстановитьЗаголовокФормы()

// Записывает в дерево запросов тексты запросов и прочие контекстно зависимые настройки
// так же определят изменилось ли строка, в случае изменения устанавливает признак модифицированности
//
// Параметры:
//  Нет.
//
Процедура вСохранитьЗапросТекущейСтроки()
	Если ДеревоЗапросов.Строки.Количество() <> 0 
		И мТекущаяСтрока <> Неопределено Тогда
		СтруктураСохрЗначений=Новый Структура;
		СтруктураСохрЗначений.Вставить("ТекстЗапроса",вПолучитьТекстТекстовогоПоля(Ложь,ЭлементыФормы.ТекстЗапроса));
		СтруктураСохрЗначений.Вставить("ПараметрыЗапроса",мФормаПараметров.Параметры.Скопировать());
		СтруктураСохрЗначений.Вставить("ТекстЗапросаSQL",Новый Структура ("Текст,ТипыВТ")); 
		СтруктураСохрЗначений.ТекстЗапросаSQL.Текст=вПолучитьТекстТекстовогоПоля(Ложь,ЭлементыФормы.ТекстЗапросаSQL);
		СтруктураСохрЗначений.ТекстЗапросаSQL.ТипыВТ=ТипыВТ;
		СтруктураСохрЗначений.Вставить("Язык",вПолучитьТекстТекстовогоПоля(Ложь,ЭлементыФормы.ТекстМодуля));
		СтруктураСохрЗначений.Вставить("Настройки",КомпоновщикНастроек.ПолучитьНастройки());
		
		СтруктураСохрЗначений.Вставить("НастройкиПостроителя",ПостроительЗапроса.ПолучитьНастройки());
		СтруктураСохрЗначений.Вставить("ЗапросПостроителя",ПостроительЗапроса.Текст);
		
		//необязательные параметры из за них не стоит изменять модифицированность
		СтруктураСохрЗначений.Вставить("СпособВыгрузки",мТекущаяСтрока.СпособВыгрузки);
		СтруктураСохрЗначений.Вставить("ВремяВыполнения", мТекущаяСтрока.ВремяВыполнения.Скопировать());
		СтруктураСохрЗначений.Вставить("АвтоЗаполнение",Истина);
		Если Не ЭлементыФормы.КонтМеню.Кнопки.ОбработкаРезультата.Кнопки.ЗакрепитьОбработки.Пометка Тогда
			СформироватьТаблицуВыбранныхОбработок(РезультатЗапроса);  //ВАЖНО не ложно устанавливается признак модифицированности
			СтруктураСохрЗначений.Вставить("ВыбранныеОбработки",ВыбранныеОбработки.Скопировать());
		КонецЕсли;
		Если Не ЭлементыФормы.КонтМеню.Кнопки.МенюРезультататЗапроса.Кнопки.Закрепить.Пометка  Тогда
			//если ставили пометки тогда сохраняем с пометкми
			Если ПолучитьСтроки(РезультатЗапроса,Истина).Количество()>0 Тогда
				мТекущаяСтрока.РезультатЗапроса=РезультатЗапроса.Скопировать();
			КонецЕсли;	
		КонецЕсли;
		//сохраняем
		//проверяем на изменения
		СтрокаИзменена=Ложь;
		Для каждого Элемент из СтруктураСохрЗначений Цикл
			//не все элементы могут вызывать модифицированность строки
			Если ТипЗнч(Элемент.Значение) = ТипЗнч(мТекущаяСтрока[Элемент.Ключ]) Тогда
				СтрокаИзменена=(СтрокаИзменена или 
									(Не ЗначениеВСтрокуВнутр(Элемент.Значение)=ЗначениеВСтрокуВнутр(мТекущаяСтрока[Элемент.Ключ])
										и (Элемент.Ключ="ТекстЗапроса"
											или Элемент.Ключ="ПараметрыЗапроса"
											или Элемент.Ключ="ТекстЗапросаSQL"
											или Элемент.Ключ="Язык"
											или Элемент.Ключ="ВыбранныеОбработки"
											или Элемент.Ключ="Настройки"
											//или Элемент.Ключ="НастройкиПостроителя"    настройки построителя уникальны только если их разбирать на составляющие
											или Элемент.Ключ="ЗапросПостроителя")
											));
			КонецЕсли;								
			мТекущаяСтрока[Элемент.Ключ]=Элемент.Значение
		КонецЦикла;
		Модифицированность=(Модифицированность ИЛИ СтрокаИзменена); //строка может быть модифицированна до сохранения этой строки
		Если СтрокаИзменена Тогда
			мТекущаяСтрока.ДатаИзменения=ТекущаяДата();		
		КонецЕсли;	
	КонецЕсли;
КонецПроцедуры // вСохранитьЗапросТекущейСтроки()

// Сохраняет дерево запросов в файл
//
// Параметры:
//  ЗапрашиватьСохранение - признак необходимости предупрежедния перед сохранением
//	ЗапрашиватьИмяФайла - признак необходимости запроса имени файла.
//
Функция вСохранитьЗапросыВФайл(ЗапрашиватьСохранение = Ложь, ЗапрашиватьИмяФайла = Ложь)
	вСохранитьЗапросТекущейСтроки();
	Если Не ЗапрашиватьИмяФайла Тогда
		Если ЗапрашиватьСохранение Тогда
			Если Не Модифицированность Тогда
				Возврат Истина;
			Иначе
				Ответ = Вопрос("Сохранить текущие запросы?", РежимДиалогаВопрос.ДаНетОтмена);
				Если Ответ = КодВозвратаДиалога.Отмена Тогда
					Возврат Ложь;
				ИначеЕсли Ответ = КодВозвратаДиалога.Нет Тогда
					Возврат Истина;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	Если ПустаяСтрока(мИмяФайла) или ЗапрашиватьИмяФайла Тогда
		Длг = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
		Длг.ПолноеИмяФайла = мИмяФайла;
		Длг.Каталог = мИмяПути;
		Длг.Заголовок = "Укажите файл для списка запросов";
		Длг.Фильтр = "Файлы запросов (*.sel)|*.sel|Файлы консоли отчётов (*.rcf)|*.rcf|Все файлы (*.*)|*.*";
		Длг.Расширение = "sel";
		Если Длг.Выбрать() Тогда
			мИмяФайла = Длг.ПолноеИмяФайла;
			мИмяПути = Длг.Каталог;
		Иначе
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	//теперь просто в первую строку дерева сохраним в колонку обработки дерево доступные обработки
	//первая строка всегда есть
	СохраненноеДерево=ДеревоЗапросов.Скопировать();
	СохраненноеДерево.Строки[0].Обработки=?(ДоступныеОбработки.Строки.Количество()=0,ДеревоЗапросов.Строки[0].Обработки,ДоступныеОбработки);
	СохраненноеДерево.Строки[0].Обработки=Новый ХранилищеЗначения(СохраненноеДерево.Строки[0].Обработки,Новый СжатиеДанных(5));
	СохраненноеДерево.Колонки.Удалить(СохраненноеДерево.Колонки.РезультатЗапроса);
	СохраненноеДерево.Колонки.Удалить(СохраненноеДерево.Колонки.УникальныйИдентификатор);
	ЗначениеВФайл(мИмяФайла, СохраненноеДерево);
	Модифицированность = Ложь;
	вСохранитьИмяФайла();
	вУстановитьЗаголовокФормы();
	Возврат Истина;
КонецФункции // СохранитьЗапросыВФайл()

// Загружает множество доступных обработок из файла, который можно было сохранить до 0.6 версии
//Параметры:
//	Нет.
Процедура вЗагрузитьДоступныеОбработки()
	ДиалогВыбораФайла =	Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	ДиалогВыбораФайла.Фильтр                      =	"Файл сохраненной настройки (*.sav)|*.sav";
	ДиалогВыбораФайла.Заголовок                   =	"Выберите файл";
	ДиалогВыбораФайла.ПредварительныйПросмотр     =	Ложь;
	ДиалогВыбораФайла.Расширение                  =	"sav";
	ДиалогВыбораФайла.ИндексФильтра               =	0;
	ДиалогВыбораФайла.ПроверятьСуществованиеФайла =	Истина;
	Если ДиалогВыбораФайла.Выбрать() Тогда
		ИмяФайла = ДиалогВыбораФайла.ПолноеИмяФайла;
		СохраненнаяНастройка=ЗначениеИзФайла(ИмяФайла);
		Если ТипЗнч(СохраненнаяНастройка)=Тип("Структура") Тогда
			ВыбранныеОбработки=СохраненнаяНастройка.ВыбранныеОбработки;
			СохраненнаяНастройка=СохраненнаяНастройка.ДоступныеОбработки;
		КонецЕсли;	
		вИнициализацияДереваОбработок(СохраненнаяНастройка);
		вЗагрузитьГрупповыеОбработки(ДоступныеОбработки);
	КонецЕсли;
КонецПроцедуры

// Загружает результат запроса в таблицу(Дерево), сводную таблицу или OLAP
//
// Параметры:
//  Результат - ТаблицаЗначени,ДеревоЗначений  в случае если выполняетс SQl запрос или выражени на встроенном языке в который передают таблицу 
Процедура вЗагрузитьРезультат(Результат=Неопределено)
	СобытиеОтладки=Формы.Отладка.ДобавитьСобытие("Разрузка(получение) результатов","Конструктор");
	Попытка
		Если ТипЗнч(Результат)=Тип("ТаблицаЗначений") Тогда
			СобытиеОтладки_Преобразование=Формы.Отладка.ДобавитьСобытие("Преобразование таблицы значений в результат запроса (на основе построителя отчетов)","Конструктор",СобытиеОтладки);
			Попытка
				ЕстьComSaveArray=Ложь;
				//для таблицы формируем построитель его проше вывести
				Если Результат.Количество()=0  Тогда
					Если Результат.Колонки=0 Тогда
						//нужно иногда посмотреть структуру колонок например при использовании временных таблиц
						Возврат;  //при выполнеии встроенного языка не возвращающего результат
					КонецЕсли;	
				Иначе
					//проверим строку если в ней есть ComSaveArray тогда не будем ее пропускать сквозь построитель
					Для каждого Колонка из Результат.Колонки  Цикл
						ЕстьComSaveArray=ТипЗнч(Результат[0][Колонка.Имя])=Тип("ComSafeArray");
						Если ЕстьComSaveArray Тогда
							Прервать;
						КонецЕсли;	
					КонецЦикла;	
					Если ЕстьComSaveArray Тогда
						мТекущаяСтрока.РезультатЗапроса=РезультатЗапроса.Скопировать();
					КонецЕсли;	
				КонецЕсли;
				Если Не ЕстьComSaveArray Тогда 
					//формируем построитель
					ОписаниеИсточникаДанных = Новый ОписаниеИсточникаДанных(Результат);
					ПостроительОтчета=Новый ПостроительОтчета;
					ПостроительОтчета.ИсточникДанных = ОписаниеИсточникаДанных; 	
					Попытка 
						мТекущаяСтрока.РезультатЗапроса = ПостроительОтчета.Результат;
					Исключение
						// из встроенного языка иногда можем получать таблицу, которую сложно подсунуть в построитель
						мТекущаяСтрока.РезультатЗапроса = Результат.Скопировать();
					КонецПопытки;
				КонецЕсли;
			Исключение
				Формы.Отладка.ЗавершитьСобытие(СобытиеОтладки_Преобразование,"ОченьВажное",ИнформацияОбОшибке().Описание);
				ВызватьИсключение "Не преобразовать таблицу";
			КонецПопытки;
			Формы.Отладка.ЗавершитьСобытие(СобытиеОтладки_Преобразование);		
		ИначеЕсли  ТипЗнч(Результат)=Тип("ДеревоЗначений") Тогда
			РезультатЗапроса =Результат.Скопировать();
			СоздатьКолонкиДляРезультатаЗапроса();
			Элементыформы.ПанельРезультата.Страницы[0].Значение = Истина;
			мТекущаяСтрока.РезультатЗапроса=РезультатЗапроса.Скопировать();
		КонецЕсли;
		//окончание изменений Кудяков Г.А.  21 декабря 2007 г. 10:24:24 }
		Если ТипЗнч(мТекущаяСтрока.РезультатЗапроса)=Тип("РезультатЗапроса") 
			 И Не ЭлементыФормы.ПанельРезультата.ТекущаяСтраница.Значение Тогда
			 //Обычные запрос
			Если ЭлементыФормы.ПанельРезультата.ТекущаяСтраница.Имя 	= "Результат" 		Тогда
				ЭлементыФормы.ТаблицаРезультата.Колонки.Очистить();
				НайденныеОбъекты = Неопределено;
				РезультатЗапроса = мТекущаяСтрока.РезультатЗапроса.Выгрузить(?(мТекущаяСтрока.СпособВыгрузки=1,ОбходРезультатаЗапроса.Прямой,ОбходРезультатаЗапроса.ПоГруппировкамСИерархией)).Скопировать();
				СоздатьКолонкиДляРезультатаЗапроса();
				ЭлементыФормы.ПанельРезультата.ТекущаяСтраница.Значение = Истина;
			ИначеЕсли ЭлементыФормы.ПанельРезультата.ТекущаяСтраница.Имя= "ТабличныйДокумент" 	Тогда
				Если ЭлементыФормы.ТабДок.ТекущаяСтраница.Имя= "ТабличныйДокумент"
					И Не ЭлементыФормы.ТабДок.ТекущаяСтраница.Значение Тогда
					ЭлементыФормы.РезультатТабДок.ВставитьОбласть(вВыгрузитьВТабличныйДокумент(мТекущаяСтрока.РезультатЗапроса).Область(),ЭлементыФормы.РезультатТабДок.Область());
				ИначеЕсли Не ЭлементыФормы.ТабДок.ТекущаяСтраница.Значение Тогда	
					СобытиеОтладки_СвобднаяТаб=Формы.Отладка.ДобавитьСобытие("Формирование сводной таблицы","Конструктор");
					Попытка
						ЭлементыФормы.РезультатТабДокСвод.ВстроенныеТаблицы.СводнаяТаблица.ИсточникДанных = мТекущаяСтрока.РезультатЗапроса;
						ЭлементыФормы.РезультатТабДокСвод.ВстроенныеТаблицы.СводнаяТаблица.ОтображатьПоля = Истина;
					Исключение
						Формы.Отладка.ЗавершитьСобытие(СобытиеОтладки_СвобднаяТаб,"ОченьВажное",ИнформацияОбОшибке().Описание);
						ВызватьИсключение "Не удалось сформировать сводную таблицу, возможно в запросе не используются итоги";
					КонецПопытки;
					Формы.Отладка.ЗавершитьСобытие(СобытиеОтладки_СвобднаяТаб);	
				КонецЕсли;
				ЭлементыФормы.ТабДок.ТекущаяСтраница.Значение = Истина;
			ИначеЕсли ЭлементыФормы.ПанельРезультата.ТекущаяСтраница.Имя= "OLAP" 			Тогда
				OLAP_СформироватьКросс(мТекущаяСтрока.РезультатЗапроса.Выгрузить()); 
				ЭлементыФормы.ПанельРезультата.ТекущаяСтраница.Значение = Истина;
			КонецЕсли;
		ИначеЕсли ТипЗнч(мТекущаяСтрока.РезультатЗапроса)=Тип("Структура")  //Это ПроцессорКомпоновкиДанных
			 И Не ЭлементыФормы.ПанельРезультата.ТекущаяСтраница.Значение	Тогда
			 Если ЭлементыФормы.ПанельРезультата.ТекущаяСтраница.Имя 	= "Результат" 		Тогда
				Если  мТекущаяСтрока.РезультатЗапроса.ТипГенератора = Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений") Тогда
					ЭлементыФормы.ТаблицаРезультата.Колонки.Очистить();
					НайденныеОбъекты = Неопределено;
					ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
					Если мТекущаяСтрока.СпособВыгрузки=1 Тогда
						Объект=Новый ТаблицаЗначений;
					Иначе
						Объект=Новый ДеревоЗначений;
					КонецЕсли;
					ПроцессорВывода.УстановитьОбъект(Объект);
					ПроцессорВывода.ОтображатьПроцентВывода=Истина;
					ПроцессорВывода.Вывести(мТекущаяСтрока.РезультатЗапроса.Процессор);
					РезультатЗапроса = Объект.Скопировать();
					
					СоздатьКолонкиДляРезультатаЗапроса();
					ЭлементыФормы.ПанельРезультата.ТекущаяСтраница.Значение = Истина;
				КонецЕсли;	
			ИначеЕсли ЭлементыФормы.ПанельРезультата.ТекущаяСтраница.Имя= "ТабличныйДокумент" 	Тогда
				Если  мТекущаяСтрока.РезультатЗапроса.ТипГенератора = Тип("ГенераторМакетаКомпоновкиДанных") Тогда
	                ЭлементыФормы.РезультатТабДок.Очистить();
				    ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
					ПроцессорВывода.УстановитьДокумент(ЭлементыФормы.РезультатТабДок);
					ПроцессорВывода.ОтображатьПроцентВывода=Истина;
					ПроцессорВывода.Вывести(мТекущаяСтрока.РезультатЗапроса.Процессор);
					
					ЭлементыФормы.ТабДок.ТекущаяСтраница.Значение = Истина;
				КонецЕсли;	
		    КонецЕсли;
		ИначеЕсли ТипЗнч(мТекущаяСтрока.РезультатЗапроса)=Тип("ТаблицаЗначений") 
			 И Не ЭлементыФормы.ПанельРезультата.ТекущаяСтраница.Значение Тогда
			 
			Если ЭлементыФормы.ПанельРезультата.ТекущаяСтраница.Имя 	= "Результат" 		Тогда
	        	ЭлементыФормы.ТаблицаРезультата.Колонки.Очистить();
				НайденныеОбъекты = Неопределено;
				РезультатЗапроса = мТекущаяСтрока.РезультатЗапроса.Скопировать();
				СоздатьКолонкиДляРезультатаЗапроса();
				ЭлементыФормы.ПанельРезультата.ТекущаяСтраница.Значение = Истина;
			ИначеЕсли ЭлементыФормы.ПанельРезультата.ТекущаяСтраница.Имя= "OLAP" 	        Тогда
				OLAP_СформироватьКросс(мТекущаяСтрока.РезультатЗапроса);
			КонецЕсли;	
		КонецЕсли;
	Исключение
		Формы.Отладка.ЗавершитьСобытие(СобытиеОтладки,"ОченьВажное",ИнформацияОбОшибке().Описание);
		ВызватьИсключение "Не удалось загрузить результат";
	КонецПопытки;
	Формы.Отладка.ЗавершитьСобытие(СобытиеОтладки);	
КонецПроцедуры // ЗагрузитьРезультат()

//Создает колонки для результат запроса и выполняет все связанне с этим действия 
//-Установка пометки (колонка нужна для обработки результатов запроса)
//-Регистрации таблицы в контекстной подсказке
//-Формирование аналогичной таблицы выбранных обработок
Процедура СоздатьКолонкиДляРезультатаЗапроса()
	//если колонок нет тогда ничего не делаем
	Если РезультатЗапроса.Колонки.Найти("Пометка_Ei")=Неопределено Тогда
		РезультатЗапроса.Колонки.Вставить(0, "Пометка_Ei", ?(ЭлементыФормы.КонтМеню.Кнопки.МенюРезультататЗапроса.Кнопки.Флажки.Кнопки.ТриСостояния.Пометка,
																			Новый ОписаниеТипов("Число"),
																			Новый ОписаниеТипов("Булево")),"Пометка");
	КонецЕсли;
	РезультатЗапросаДерево=РезультатЗапроса;
	ЭлементыФормы.ТаблицаРезультата.Данные=?(мТекущаяСтрока.СпособВыгрузки=1,"РезультатЗапроса","РезультатЗапросаДерево");
	ЭлементыФормы.ТаблицаРезультата.СоздатьКолонки();
	ВывестиКолВоРезультатовЗапроса();
	Если НЕ ЭлементыФормы.ТаблицаРезультата.Колонки.Найти("Пометка_Ei")=Неопределено Тогда
		вУстановитьПараметрыСлужебныхКолонок(ЭлементыФормы.ТаблицаРезультата);
		СформироватьТаблицуВыбранныхОбработок(РезультатЗапроса);
		ЭлементыФормы.ТаблицаРезультата.Колонки["Пометка_Ei"].Видимость = Ложь;
		Если ЭлементыФормы.ТаблицаРезультата.Колонки.Количество()>1 Тогда
			ЭлементыФормы.ТаблицаРезультата.Колонки[1].ОтображатьИерархию=(мТекущаяСтрока.СпособВыгрузки=2);
		КонецЕсли;	
		Если Не ПолеТекстовогоДокументаСКонтекстнойПодсказкой=Неопределено Тогда
			ПолеТекстовогоДокументаСКонтекстнойПодсказкой.ТекстМодуля.ДобавитьСловоЛокальногоКонтекста(
					"Результат","Свойство",Новый ОписаниеТипов(?(ТипЗнч(РезультатЗапроса)=Тип("ТаблицаЗначений"),
																						"ТаблицаЗначений",
																						"ДеревоЗначений")),РезультатЗапроса);
		КонецЕсли;
	КонецЕсли;																				
КонецПроцедуры

//Процедура подготовлявает или обновляет таблицу выбранных обработок(создает колонки)
//в соответсвии с колонками результата запроса
//Параметры:
//	Источник - <ТаблицаЗначений.ДеревоЗначений> Результат запроса
//	Обновлять - <Булево>.Признак того будет ли структура таблицы обновлятьтся ели уже содержит строки ()
Процедура СформироватьТаблицуВыбранныхОбработок(Источник,Обновить=Ложь)
	Если Обновить ИЛИ ВыбранныеОбработки.Строки.Количество()=0 Тогда
		ВыбранныеОбработки=Новый ДеревоЗначений;
		Для каждого Колонка из Источник.Колонки Цикл
			Если Не Колонка.Имя="Пометка_Ei" Тогда
				ВыбранныеОбработки.Колонки.Добавить(Колонка.Имя,Новый ОписаниеТипов("Строка"),Колонка.Имя,СтрДлина(Колонка.Имя)); //Колонка.ТипЗначения
			КонецЕсли;	
		КонецЦикла;
		ВыбранныеОбработки.Колонки.Вставить(0, "Пометка_Ei", Новый ОписаниеТипов("Число"),"Использовать",3);
		ВыбранныеОбработки.Колонки.Вставить(0, "Условие_Ei", Новый ОписаниеТипов("Строка"));
		ЭлементыФормы.ВыбранныеОбработки.СоздатьКолонки();
		вУстановитьПараметрыСлужебныхКолонок(ЭлементыФормы.ВыбранныеОбработки);
	ИначеЕсли ВыбранныеОбработки.Строки.Количество()>0 Тогда
		ЭлементыФормы.ВыбранныеОбработки.СоздатьКолонки();
		вУстановитьПараметрыСлужебныхКолонок(ЭлементыФормы.ВыбранныеОбработки);
	КонецЕсли;
	//сформирум картику таблицы она особого значения не имеет в дальнейшем 
	Для каждого Колонка из ЭлементыФормы.ВыбранныеОбработки.Колонки Цикл
		Если Не Прав(Колонка.Имя,3)="_Ei" Тогда 
			СформироватьКартинкуНаОсновеТипов(Колонка,РезультатЗапроса);
		КонецЕсли;	
	КонецЦикла;
КонецПроцедуры

// Добавляет строки при копировании строки дерева запросов
//
// Параметры:
//  ТекСтрока - текущая строка
//	ДобСтрока - добавляемая строка
//	Дерево - дерево значений.
//
Процедура вДобавитьСтроки(ТекСтрока, ДобСтрока, Дерево)

	Для Каждого Кол Из Дерево.Колонки Цикл
		//Не все колонки копируем
		Если 	Не Кол.Имя="УникальныйИдентификатор" 
			ИЛИ Не Кол.Имя="РезультатЗапроса" Тогда 
			ДобСтрока[Кол.Имя] = ТекСтрока[Кол.Имя];
		КонецЕсли;	
	КонецЦикла; 
	
	Для Каждого Строка Из ТекСтрока.Строки Цикл
		НоваяСтрока = ДобСтрока.Строки.Добавить();
		вДобавитьСтроки(Строка, НоваяСтрока, Дерево);
	КонецЦикла;

КонецПроцедуры // ДобавитьСтроки()

//Получает струтуру параметров 
//Параметры:
//	МассивИсключений	- <Массив>. Массив ссылок на строки таблицы, которые не должны попасть в итоговую структуру (применяется для вычисляемых параметров)
//Возвращаемое значение:
// <Структура значений>
Функция вПолучитьСтруктуруПараметров(Знач МассивИсключений=Неопределено) Экспорт
	СобытиеОтладки=Формы.Отладка.ДобавитьСобытие("Получение структуры параметров");
	Попытка
		Если МассивИсключений=Неопределено Тогда
			МассивИсключений=Новый Массив;
		КонецЕсли;
		Параметры=Новый Структура;
		Для каждого СтрокаПараметров Из мФормаПараметров.Параметры Цикл
			ОбработкаПрерыванияПользователя();
			СтрокаИсключение=МассивИсключений.Найти(СтрокаПараметров);
			Если Не СтрокаИсключение=Неопределено Тогда
				Продолжить;
			КонецЕсли;	
			СобытиеОтладки_Параметр=Формы.Отладка.ДобавитьСобытие(?(СтрокаПараметров.ЭтоВыражение,"Вычисление","Получение")+" параметра """+СтрокаПараметров.ИмяПараметра+"""",,СобытиеОтладки);
			Попытка
				ИмяПараметра=СтрЗаменить(СтрокаПараметров.ИмяПараметра,"@",""); //этот символ недоспутим в имени структуры но в SQL необходим
				Если Не ПустаяСтрока(ИмяПараметра) Тогда
					//вначале проверяем корректность имени
					Попытка
						Параметры.Вставить(ИмяПараметра);
					Исключение
						Формы.Отладка.ЗавершитьСобытие(СобытиеОтладки_Параметр,"Информация","Неправильно задано имя параметра, или присутсвуют недоспустимые символы, параметр """+СтрокаПараметров.ИмяПараметра+""" не добавлен");
						Продолжить;
					КонецПопытки;
					//теперь добавляем параметр со значением
					Если СтрокаПараметров.ЭтоВыражение Тогда
						Выражение		= мФормаПараметров.ПолучитьСтр(СтрокаПараметров);
							МассивИсключений.Добавить(СтрокаПараметров);
						ОгрПараметры	= вПолучитьСтруктуруПараметров(МассивИсключений);	
						Результат		= вВычислитьЗначение(Новый Структура("Выражение",Выражение),ОгрПараметры,ЭтаФорма);		
						Параметры.Вставить(ИмяПараметра,Результат);
						//Дополним ранее расчитанными параметрами
						Для Каждого ВложенныйПараметр ИЗ ОгрПараметры Цикл
							Параметры.Вставить(ВложенныйПараметр.Ключ,ВложенныйПараметр.Значение);		
						КонецЦикла;	
					ИначеЕсли ТипЗнч(СтрокаПараметров.ЗначениеПараметра)=Тип("Строка") Тогда
						//проверка на занчение во внутреннем формате
						Попытка 
							Параметры.Вставить(ИмяПараметра,ЗначениеИзСтрокиВнутр(мФормаПараметров.ПолучитьСтр(СтрокаПараметров)));	
						Исключение	
							Параметры.Вставить(ИмяПараметра,мФормаПараметров.ПолучитьСтр(СтрокаПараметров));	
						КонецПопытки;	
					Иначе	
						Параметры.Вставить(ИмяПараметра,СтрокаПараметров.ЗначениеПараметра);
					КонецЕсли;
				КонецЕсли;
			Исключение
				Формы.Отладка.ЗавершитьСобытие(СобытиеОтладки_Параметр,"Информация","Параметр """+СтрокаПараметров.ИмяПараметра+""" пропущен "+ИнформацияОбОшибке());
				//ВызватьИсключение  "Не удалось "+?(СтрокаПараметров.ЭтоВыражение,"вычислить","получить")+" параметр "+ИнформацияОбОшибке().Описание;
			КонецПопытки;
			Формы.Отладка.ЗавершитьСобытие(СобытиеОтладки_Параметр);
		КонецЦикла;
	Исключение
		Формы.Отладка.ЗавершитьСобытие(СобытиеОтладки,"ОченьВажное",ИнформацияОбОшибке());
		ВызватьИсключение  "Не удалось получить структуру параметров "+ИнформацияОбОшибке().Описание;
	КонецПопытки;
	Формы.Отладка.ЗавершитьСобытие(СобытиеОтладки);
	Возврат Параметры;
КонецФункции	

//Передает структуру праметров в таблицу значений синхронизации происходит по ключу структуры
//в качетсве структуры используется реквизит обработки, параметры. 
//Праметры:
//	Параметры	-<Структура>. Структура параметров
Процедура вСохранитьСтруктуруПараметровВТаблицу(Параметры)	Экспорт
	Перем НовоеЗначение;
	СобытиеОтладки=Формы.Отладка.ДобавитьСобытие("Востанавливаем параметры из структуры в таблицу значений","Конструктор");
	Попытка
		Для каждого Строка из мФормаПараметров.Параметры Цикл
			Если Не ПустаяСтрока(Строка.ИмяПараметра) Тогда
				Параметры.Свойство(Строка.ИмяПараметра,НовоеЗначение);
				Если Не Строка.ЗначениеПараметра=НовоеЗначение И Не Строка.ЭтоВыражение Тогда
					Если ТипЗнч(НовоеЗначение)=Тип("Строка") Тогда
						мФормаПараметров.УстановитьСтр(Строка,НовоеЗначение);
					ИначеЕсли ТипЗнч(НовоеЗначение)=Тип("Структура")
						ИЛИ ТипЗнч(НовоеЗначение)=Тип("ТаблицаЗначений")
						ИЛИ ТипЗнч(НовоеЗначение)=Тип("ДеревоЗначений") Тогда
						мФормаПараметров.УстановитьСтр(Строка,ЗначениеВСтрокуВнутр(НовоеЗначение));
					Иначе
						Строка.ЗначениеПараметра=НовоеЗначение;
					КонецЕсли;	
					мФормаПараметров.вУстановитьИдентификаторы(Строка);	
				КонецЕсли;
			КонецЕСли;	
		КонецЦикла;
	Исключение
		Формы.Отладка.ЗавершитьСобытие(СобытиеОтладки,"ОченьВажное",ИнформацияОбОшибке().Описание);
		ВызватьИсключение "Не удалось востановить таблицу параметров";
	КонецПопытки;
	Формы.Отладка.ЗавершитьСобытие(СобытиеОтладки);	

КонецПроцедуры

//Снимает признаки вывода результатат в определенный закладки 
//Параметры:
//	Нет.	
Процедура вОбнулитьФлагиВыводаРезультатов()
	Для Каждого СтраницаРезультат из Элементыформы.ПанельРезультата.Страницы Цикл
		СтраницаРезультат.Значение=Ложь;		
	КонецЦикла;
	Для Каждого СтраницаРезультат из Элементыформы.ТабДок.Страницы Цикл
		СтраницаРезультат.Значение=Ложь;		
	КонецЦикла;	
КонецПроцедуры	

//Устанавливает в заголовки страницы кол-во выведенных и отмеченных строк результатов запроса
//
Процедура ВывестиКолВоРезультатовЗапроса()
	НеОтмеченныеСтроки	= ПолучитьСтроки(РезультатЗапроса,Ложь);
	ОтмеченныеСтроки	= ПолучитьСтроки(РезультатЗапроса,Истина);
	ЭлементыФормы.ПанельРезультата.Страницы.Результат.Заголовок=?((ОтмеченныеСтроки.Количество()+НеОтмеченныеСтроки.Количество())>0,
																			"Результат "+(ОтмеченныеСтроки.Количество()+НеОтмеченныеСтроки.Количество())+?(ОтмеченныеСтроки.Количество()>0," ("+ОтмеченныеСтроки.Количество()+")",""),
																			"Результат");
КонецПроцедуры

//Выполняет подготоительные операции для выгрузки результатов выполнения 
//алгоритма на встроенном языке 
//Параметры:
//Результат - пременная в которое возрашется значение при выполнение встроенного языка 
Процедура вПодготовитьРезультатВыполнения(Результат)
	//опрределяем тип результата
	Если ТипЗнч(Результат)=Тип("РезультатЗапроса") Тогда 
		мТекущаяСтрока.РезультатЗапроса=Результат;
	ИначеЕсли ТипЗнч(Результат)=Тип("ДеревоЗначений") Тогда 
		вИзменеиеСпособаВыгрузки(2);
	ИначеЕсли ТипЗнч(Результат)=Тип("ТаблицаЗначений") Тогда 	
		вИзменеиеСпособаВыгрузки(1);
	ИначеЕсли ТипЗнч(Результат)=Тип("ComОбъект") Тогда 	
		Результат=RecSetВТаблицу(Результат);
		вИзменеиеСпособаВыгрузки(1);
	Иначе
		Возврат;
	КонецЕсли;
	//выгружаем 
	вОбнулитьФлагиВыводаРезультатов();
	вЗагрузитьРезультат(Результат);
КонецПроцедуры 	

//Устанавливает время в заголовки сстраницы для которой выполнялось действие
//Параметры:
//	Индекс		- <Число>. Индекс страницы панели, для которой выполнялось изменение времени
//	Значение	- <Число>. Число секунд затраченного времени
//	ЗначениеДоп	- <Число>. Число доп. секунд затраченного времени (для дополнительной временной детализации)
Процедура вИзменитьВремяВыполнения(Индекс,Значение,ЗначениеДоп=0) Экспорт 
	Если мТекущаяСтрока.ВремяВыполнения=Неопределено Тогда
		мТекущаяСтрока.ВремяВыполнения=Новый СписокЗначений();
	КонецЕсли;
	Попытка 
		мТекущаяСтрока.ВремяВыполнения[Индекс].Значение=Значение;
	Исключение
		//запонение осуществляется прямо здесь
		Пока  мТекущаяСтрока.ВремяВыполнения.Количество()<Индекс Цикл
			ОбработкаПрерыванияПользователя();
			мТекущаяСтрока.ВремяВыполнения.Добавить(0);
		КонецЦикла;	
		мТекущаяСтрока.ВремяВыполнения.Вставить(Индекс,Значение);			
	КонецПопытки;
	Префикс=ЭлементыФормы.ПанельТекстаЗапроса.Страницы[Индекс].Имя;
	Если Префикс="Язык" Тогда
		Префикс="Встроенный язык";
	ИначеЕсли Префикс="ОбработкаРезультата" Тогда
		Префикс="Обработка результата";
	КонецЕсли;
	//форматируем значение
	Если ТипЗнч(Значение)=Тип("Число") и Значение>60 Тогда 
		Значение=вФорматироватьВремя(Значение);
	Иначе
		//не сможем сравнить чтроку с числом 
		ЭлементыФормы.ПанельТекстаЗапроса.Страницы[Индекс].Заголовок=Префикс+?(Не Значение=0," "+Значение,"")+?(ЗначениеДоп>0," ("+ЗначениеДоп+")","");
		Возврат;
	КонецЕсли;
	//по любому строка
	ЭлементыФормы.ПанельТекстаЗапроса.Страницы[Индекс].Заголовок=Префикс+" "+Значение+?(ЗначениеДоп>0,"("+ЗначениеДоп+")","");
КонецПроцедуры 	

//Изменяет существующий способ выгрузки, возможно вариант выгрузки в дерево значений или таблицу
//Так же в случае дерева необходимо обработать 3 состояния флажка.
//Параметры:
//	НовоеЗначение	- <Число>. Новое выриант выгрузки  1 - таблица, 2 - дерево.
//
Процедура вИзменеиеСпособаВыгрузки(НовоеЗначение) 
	мТекущаяСтрока.СпособВыгрузки=НовоеЗначение;
	ЭлементыФормы.ПанельРезультата.Страницы[0].КартинкаЗаголовка=ЭлементыФормы.КонтМеню.Кнопки.МенюРезультататЗапроса.Кнопки["Результат"+мТекущаяСтрока.СпособВыгрузки].Картинка;
	ЭлементыФормы.КонтМеню.Кнопки.МенюРезультататЗапроса.Кнопки.Результат1.Пометка=Ложь;
	ЭлементыФормы.КонтМеню.Кнопки.МенюРезультататЗапроса.Кнопки.Результат2.Пометка=Ложь;
	ЭлементыФормы.КонтМеню.Кнопки.МенюРезультататЗапроса.Кнопки["Результат"+мТекущаяСтрока.СпособВыгрузки].Пометка=Истина;
	Если ТипЗнч(мТекущаяСтрока.РезультатЗапроса)=Тип("РезультатЗапроса") Тогда
		вОбнулитьФлагиВыводаРезультатов();
		вЗагрузитьРезультат();
	КонецЕсли;	
	//Разбираемся с тремя состоянимя флажка
	ЭлементыФормы.КонтМеню.Кнопки.МенюРезультататЗапроса.Кнопки.Флажки.Кнопки.ТриСостояния.Доступность=?(НовоеЗначение=1,Ложь,Истина);
	Если Не ЭлементыФормы.КонтМеню.Кнопки.МенюРезультататЗапроса.Кнопки.Флажки.Кнопки.ТриСостояния.Доступность
		и ЭлементыФормы.КонтМеню.Кнопки.МенюРезультататЗапроса.Кнопки.Флажки.Кнопки.ТриСостояния.Пометка Тогда 
		КонтМенюИзменитьСостояниеФлажков(ЭлементыФормы.КонтМеню.Кнопки.МенюРезультататЗапроса.Кнопки.Флажки.Кнопки.ТриСостояния);
	КонецЕсли;	
КонецПроцедуры

//Останавливем все не завершенные фоновые процессы
//Параметры:
//	Нет.
Процедура вОстановитьФоновыеПроцессы()
	//Пытаемся остановить фоновые процессы
	НеЗавершенные=ТаблицаФоновыхПроцессов.НайтиСтроки(Новый Структура("Завершено",Ложь));
	Для Каждого Процесс из НеЗавершенные Цикл
		МассивПотеренныхЗаданий = ФоновыеЗадания.ПолучитьФоновыеЗадания(Новый Структура("Ключ",Процесс.Ключ));
		Для Каждого ФоновоеЗадание из  МассивПотеренныхЗаданий Цикл
			ФоновоеЗадание.Отменить(); 	
		КонецЦикла;	
	КонецЦикла;
КонецПроцедуры

//Заполняет источники данных КД. На основе строк запроса
//Параметры:
//	СхемаКомпоновкиДанных	-<СКД>. Заполняемая СКД.
//	СтрокаДереваЗапросов	-<СтрокаДЗ>. Строка в которой описаны все запросы
//	ВключаяВложенные		-<Булево>. Признак включения вложенных запросов.
Процедура вЗаполнитьИсточникиДанныхСКД(СхемаКомпоновкиДанных, СтрокаДереваЗапросов,ВключаяВложенные=Истина)
	//Заполняем источники данных СКД текстом запроса
	мИсточник = СхемаКомпоновкиДанных.ИсточникиДанных.Добавить();
	мИсточник.Имя = СтрЗаменить(СтрокаДереваЗапросов.Запрос," ","");
	мИсточник.ТипИсточникаДанных = "Local";
	мНабор = СхемаКомпоновкиДанных.НаборыДанных.Добавить(Тип("НаборДанныхЗапросСхемыКомпоновкиДанных"));
	мНабор.Запрос = СтрокаДереваЗапросов.ТекстЗапроса;
	мНабор.Имя = мИсточник.Имя;
	мНабор.ИсточникДанных =  мИсточник.Имя;
	//Заполняем параметры СКД
	Для каждого СтрокаПараметра Из СтрокаДереваЗапросов.ПараметрыЗапроса Цикл
		мПараметр = СхемаКомпоновкиДанных.Параметры.Добавить();
		мПараметр.Имя = СтрокаПараметра.ИмяПараметра;
		Если СтрокаПараметра.ЭтоВыражение Тогда
			//мПараметр.Выражение = мФормаПараметров.ПолучитьСтр(СтрокаПараметра);
			
			//если будет необходимость добавим вручную, слишком высок риск неверного выражения
			СхемаКомпоновкиДанных.Параметры.Удалить(мПараметр);
			Продолжить;
		Иначе
			мПараметр.Значение = СтрокаПараметра.ЗначениеПараметра;	
		КонецЕсли;
		мПараметр.ТипЗначения = СоздатьОписаниеТиповНаОсновеКолекции(ТипЗнч(мПараметр.Значение));
	КонецЦикла;
	Если ВключаяВложенные Тогда
		Для каждого мСтрокаДерева Из СтрокаДереваЗапросов.Строки Цикл
			 вЗаполнитьИсточникиДанныхСКД(СхемаКомпоновкиДанных, мСтрокаДерева);
		КонецЦикла;
	КонецЕсли;	 
КонецПроцедуры

//Определяет источник для СКД
//Параметры:
//	Строка	- <СтрокаДЗ>. Строка дерева запросов настройки которой необходимо инициализировать.	
Процедура вИнициализироватьИсточникКомпоновщикаНастроек(Строка)
	Если Строка.СхемаКомпоновкиДанных <> Неопределено Тогда
		КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(Строка.СхемаКомпоновкиДанных));
	Иначе
		КомпоновщикНастроек.Инициализировать(Неопределено);
	КонецЕсли;
КонецПроцедуры

//Снижает безопасность Excel 
//Разрешает запуск макросов и программный доступ к Объектной можели Макросов
//можно востанавливать безопасность 
Процедура вСнизитьБезопасность() 
  	СобытиеОтладки=Формы.Отладка.ДобавитьСобытие("Понижение безопасности приложение Excel (изменения в реестре)","Внешние компоненты");
	Попытка
		WshShell = Новый COMОбъект("WScript.Shell");
		//СпРеестр=Новый СписокЗначений();
		Приложение="Excel"; //Word
		WshShell.RegWrite("HKCU\Software\Microsoft\Office\","","REG_SZ"); 
		Для к=7 По 12 Цикл 
			WshShell.RegWrite("HKCU\Software\Microsoft\Office\"+к+".0\","","REG_SZ"); 
			WshShell.RegWrite("HKCU\Software\Microsoft\Office\"+к+".0\"+Приложение+"\","","REG_SZ"); 
			WshShell.RegWrite("HKCU\Software\Microsoft\Office\"+к+".0\"+Приложение+"\Security\","","REG_SZ");
			//низкая безопасность 
			Попытка 
				//СпРеестр.Установить("HKCU\Software\Microsoft\Office\"+к+".0\"+Приложение+"\Security\Level",WshShell.RegRead("HKCU\Software\Microsoft\Office\"+к+".0\"+Приложение+"\Security\Level")); 
				WshShell.RegWrite("HKCU\Software\Microsoft\Office\"+к+".0\"+Приложение+"\Security\Level", 1, "REG_DWORD"); 
			Исключение 
				WshShell.RegWrite("HKCU\Software\Microsoft\Office\"+к+".0\"+Приложение+"\Security\Level", 1, "REG_DWORD"); 
				//СпРеестр.Установить("HKCU\Software\Microsoft\Office\"+к+".0\"+Приложение+"\Security\Level",WshShell.RegRead("HKCU\Software\Microsoft\Office\"+к+".0\"+Приложение+"\Security\Level")); 
			КонецПопытки; 
			//доступ к VBA
			Попытка 
				//СпРеестр.Установить("HKCU\Software\Microsoft\Office\"+к+".0\"+Приложение+"\Security\AccessVBOM",WshShell.RegRead("HKCU\Software\Microsoft\Office\"+к+".0\"+Приложение+"\Security\Level")); 
				WshShell.RegWrite("HKCU\Software\Microsoft\Office\"+к+".0\"+Приложение+"\Security\AccessVBOM", 1, "REG_DWORD"); 
			Исключение 
				WshShell.RegWrite("HKCU\Software\Microsoft\Office\"+к+".0\"+Приложение+"\Security\AccessVBOM", 1, "REG_DWORD"); 
				//СпРеестр.Установить("HKCU\Software\Microsoft\Office\"+к+".0\"+Приложение+"\Security\AccessVBOM",WshShell.RegRead("HKCU\Software\Microsoft\Office\"+к+".0\"+Приложение+"\Security\Level")); 
			КонецПопытки; 
		КонецЦикла;
	Исключение
		Формы.Отладка.ЗавершитьСобытие(СобытиеОтладки,"ОченьВажное",ИнформацияОбОшибке().Описание);
		ВызватьИсключение  "Ошибка правки реестра";
	КонецПопытки;
	Формы.Отладка.ЗавершитьСобытие(СобытиеОтладки);		
КонецПроцедуры

//Функция получает символ букву по номеру
//используется для обращения к столбцам Excel
//Параметры:
//	Ном	-<Число>. Порядковый номер буквы
Функция вБукваПоНомеру(Ном)
    КодА=КодСимвола("A");
    КодБуквы=КодА+Ном-1;
    Буква=Символ(КодБуквы);
    возврат Буква;
КонецФункции //БукваПоНомеру(ном)

//Фукция получает название столбца по его номеру
//до 26 все понятно, после 26 комбиная 2,3 и более букв
//Параметры:
//	Ном	-<Число>. Порядковый номер столбца
//
Функция вНазваниеСтолбца(Ном)
	// возвращает название столбца в Excel
	Если Ном=0 Тогда Ном=26 КонецЕсли; 
	Если Ном<=26 Тогда
	    Назв=вБукваПоНомеру(Ном)
	Иначе
	    Ост=Ном-Цел((Ном-1)/26)*26;
	    Част=Цел((Ном-1)/26);
	    Назв=вНазваниеСтолбца(Част)+вНазваниеСтолбца(Ост)
	КонецЕсли;    
	   Возврат Назв   
КонецФункции

//Сохраняет текст(SQL запрос) в файл
//Параметры
//	Текст		-<Строка>. Исходный текст, который сохраняем.
//	ИмяФайла	-<Строка>. Имя файла в который сохраняем.
//  Кодировка   -<Строка>. Кодировка результирующего файла.
//
Процедура вСохранитьТекст(Текст,ИмяФайла=Неопределено,Кодировка=Неопределено)
	Если ИмяФайла=Неопределено Тогда
		Длг = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
		Длг.Заголовок = "Укажите файл для списка запросов";
		Длг.Фильтр = "Файлы запросов (*.sql)|*.sql|Все файлы (*.*)|*.*";
		Длг.Расширение = "sql";
		
		Если Длг.Выбрать() Тогда
			ИмяФайла = Длг.ПолноеИмяФайла;
			ИмяПути = Длг.Каталог;
		Иначе
			Возврат;
		КонецЕсли;
	КонецЕсли;	
	ТекстовыйДокумент = Новый ТекстовыйДокумент;
	ТекстовыйДокумент.УстановитьТекст(Текст);
	ТекстовыйДокумент.Записать(ИмяФайла,Кодировка);
КонецПроцедуры	

//Устанавливает флажки(пометки) для определенного уровня в дереве
//
Процедура вФлажкиДляУровня(Значение,Уровень=0);
	ВвестиЗначение(Уровень,"Укажите уровень",Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(0,0,ДопустимыйЗнак.Неотрицательный)));
	Строки=ПолучитьСтроки(РезультатЗапроса,Не Значение, Истина);	
	Для каждого Строка из Строки Цикл
		Если Строка.Уровень()=Уровень Тогда 
			Строка["Пометка_Ei"]=Значение;
		КонецЕсли;	
	КонецЦикла;	
КонецПроцедуры 

//Добавляет параметр к текущему запросу,
//используется в основнм в шаблонах
Процедура вВставитьПараметр(Имя,Значение) Экспорт
	СтрокаПараметра=мФормаПараметров.Параметры.Найти(Имя,"ИмяПараметра");
	Если Имя="ИспользоватьGameWithFire" Тогда
		//прверяем можем ли использовать   GameWithFire
		Если Не ADOUtils=Неопределено Тогда
            Значение=(Не ADOUtils=Неопределено);
		Иначе
			Значение=Не Истина;
		КонецЕсли;	
	КонецЕсли;	
	Если СтрокаПараметра=Неопределено Тогда
		СтрокаПараметра = мФормаПараметров.Параметры.Добавить();
		СтрокаПараметра.ИмяПараметра=Имя;
	КонецЕсли;
	СтрокаПараметра.ЗначениеПараметра=Значение;
КонецПроцедуры 

//Копирует настройки из одного построителя в другой
//Параметры:
//	Назначение	-<ПостроительОтчета>. Куда копируем настройки.
//	Источник	-<ПостроительОтчета>. Откуда копируем настройки.
Процедура вСкопироватьНастройкиПостроителя(Назначение,Источник,ПеречислениеНастроек)
	Для Каждого Настройка из ПеречислениеНастроек Цикл
		Для каждого ЭлементНастройки из Источник[Настройка.Ключ] Цикл
			Если Назначение[Настройка.Ключ].Найти(ЭлементНастройки.Имя)=Неопределено Тогда
				Попытка
					//добавляем только то что можно добавить
					НоваяНастройка=Назначение[Настройка.Ключ].Добавить(ЭлементНастройки.ПутьКДанным,ЭлементНастройки.Имя);		
					ЗаполнитьЗначенияСвойств(НоваяНастройка,ЭлементНастройки,,"Имя,ПутьКДанным");
				Исключение
				КонецПопытки;	
			КонецЕсли;	
		КонецЦикла;
	КонецЦикла;	
КонецПроцедуры	

//Выгружает занчение в табличный документ
//	Значение- <Результат запроса> Результат запроса или процессор компановки данных
Функция вВыгрузитьВТабличныйДокумент(Значение)
	Перем ЗаголовокКолонки;
	СобытиеОтладки=Формы.Отладка.ДобавитьСобытие("Выгрузка таблицы значений(результата запроса) в табличный документ","Конструктор");
	Попытка
		ТабДок = Новый ТабличныйДокумент;
		Если ТипЗнч(мТекущаяСтрока.РезультатЗапроса)=Тип("РезультатЗапроса") Тогда
			КоличествоКолонок = мТекущаяСтрока.РезультатЗапроса.Колонки.Количество();
			Выборка = мТекущаяСтрока.РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.Прямой);

	        ДетальнаяСтрока = ТабДок.ПолучитьОбласть(1, , 1, );
			ОбластьОбщихИтогов = ТабДок.ПолучитьОбласть(1, , 1, );
		    ОбластьОбщихИтогов.Область().Шрифт = Новый Шрифт(ОбластьОбщихИтогов.Область().Шрифт, , , Истина, , ,);
			ОбластьИерархическихЗаписей = ТабДок.ПолучитьОбласть(1, , 1, );
		    ОбластьИерархическихЗаписей.Область().Шрифт = Новый Шрифт(ОбластьИерархическихЗаписей.Область().Шрифт, , , Истина, , ,);
			ОбластьГрупповыхЗаписей = ТабДок.ПолучитьОбласть(1, , 1, );
		    ОбластьГрупповыхЗаписей.Область().Шрифт = Новый Шрифт(ОбластьГрупповыхЗаписей.Область().Шрифт, , , Истина, , ,);
			ОбластьЗаголвка = ТабДок.ПолучитьОбласть(1, , 1, );
			
			Для ТекущееПоле = 0 По КоличествоКолонок - 1 Цикл
				Область = ОбластьЗаголвка.Область(1, ТекущееПоле + 1);
				Область.Текст = мТекущаяСтрока.РезультатЗапроса.Колонки[ТекущееПоле].Имя;
	            Область.ШиринаКолонки = мТекущаяСтрока.РезультатЗапроса.Колонки[ТекущееПоле].Ширина;
			КонецЦикла;
			ТабДок.Вывести(ОбластьЗаголвка);
			ОбластьЗаголвка = ТабДок.Область(1, 1, 1, КоличествоКолонок);
			
			ОбластьЗаголвка.Шрифт = Новый Шрифт(ОбластьЗаголвка.Шрифт, , , Истина, , ,);
			ОбластьЗаголвка.ЦветФона = Новый Цвет(137, 132, 119);
			ОбластьЗаголвка.ГраницаСнизу = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная, 1);

	        ТабДок.НачатьАвтогруппировкуСтрок();
			ИнициализацияОкнаИсполнения("Выгрузка строк в табличный документ",Выборка.Количество());
			
			Индекс=0;
			//так же будем Формировать тз группировок 
			Пока Выборка.Следующий() Цикл
				Индекс=Индекс+1;
				Если Выборка.ТипЗаписи() = ТипЗаписиЗапроса.ИтогПоГруппировке Тогда 
					ИсходнаяСтрока = ОбластьГрупповыхЗаписей;
				ИначеЕсли Выборка.ТипЗаписи() = ТипЗаписиЗапроса.ИтогПоИерархии Тогда 
					ИсходнаяСтрока = ОбластьИерархическихЗаписей;
				ИначеЕсли Выборка.ТипЗаписи() = ТипЗаписиЗапроса.ОбщийИтог Тогда 
					ИсходнаяСтрока = ОбластьОбщихИтогов;
				Иначе
					ИсходнаяСтрока = ДетальнаяСтрока;
				КонецЕсли;
				 //Формируем таблицу группировок 
				Для ТекущееПоле = 0 По КоличествоКолонок - 1 Цикл
					Область = ИсходнаяСтрока.Область(1, ТекущееПоле + 1);
					Область.Текст = Выборка[ТекущееПоле];
				КонецЦикла;
				ТабДок.Вывести(ИсходнаяСтрока, Выборка.Уровень());
				//поставим прогресс 
				Формы.ОкноИсполнения.Подзаголовок =""+Выборка.Количество()+" объектов";
			 	Формы.ОкноИсполнения.Индикация();
			КонецЦикла;
			ОстановкаОкнаИсполнения();
			ТабДок.ЗакончитьАвтогруппировкуСтрок();
		Иначе
			
		КонецЕсли;
	Исключение
		Формы.Отладка.ЗавершитьСобытие(СобытиеОтладки,"ОченьВажное",ИнформацияОбОшибке().Описание);
		ВызватьИсключение  "Ошибка выгрузки в табличный документ";
	КонецПопытки;
	Формы.Отладка.ЗавершитьСобытие(СобытиеОтладки);
	Возврат ТабДок;
КонецФункции // ВыгрузитьРезультат()

//Формирует OLAP куб, на основе таблицы значений
//Параметры:
//	ТЗ	-<ТаблицаЗначений>. Исходная таблица значений
//
Процедура OLAP_СформироватьКросс(ТЗ)
	СобытиеОтладки=Формы.Отладка.ДобавитьСобытие("Формирование OLAP куба","Внешние компоненты");
	Попытка
		Попытка 
	    	ЭлементыФормы.OLAP.RefresMem();
		Исключение
			ЗарегистрироватьБиблиотеку("OLAP.ocx",СобытиеОтладки);
			ВызватьИсключение "ActiveX компонента не была зарегистрирована, перезапустите обработку";
		КонецПопытки;	
		Колонок = 0;
		КолонкаДТ = -1;
		Для Каждого Колонка Из ТЗ.Колонки Цикл
			Имя = Колонка.Заголовок;
			Если Колонка.ТипЗначения.СодержитТип(Тип("Число")) Тогда
				ЭлементыФормы.OLAP.CreateField(Имя,1);
	            Колонок = Колонок+1;
				Продолжить;	
			ИначеЕсли Колонка.ТипЗначения.СодержитТип(Тип("Булево")) Тогда
				ЭлементыФормы.OLAP.CreateField(Имя,2);
				Колонок = Колонок+1;
				Продолжить;	
			ИначеЕсли Колонка.ТипЗначения.СодержитТип(Тип("Дата")) Тогда
	            КолонкаДТ = ТЗ.Колонки.Индекс(Колонка);
				Колонок = Колонок+1;
				Продолжить;
			Иначе
	            ЭлементыФормы.OLAP.CreateField(Имя,0);
				Колонок = Колонок+1;
			КонецЕсли;
		КонецЦикла; 
		// заполнить таблицу
		Для каждого Стр  Из ТЗ Цикл
			ЭлементыФормы.OLAP.AppendRecord();
			а = 2;
			Для к=0 По Колонок-1 Цикл
				Если Стр[к] = null Тогда
					Продолжить;
				КонецЕсли; 	
				Тп = Стр[к];
				Если (ТипЗнч(Тп)<>Тип("Строка")) и (ТипЗнч(Тп)<>Тип("Число"))и (ТипЗнч(Тп)<>Тип("Дата") и (ТипЗнч(Тп)<>Тип("Булево"))) Тогда
					Зн = Строка(Стр[к]);
				Иначе
					Зн = Стр[к];
				КонецЕсли;
				Если к = КолонкаДТ Тогда
					ЭлементыФормы.OLAP.SetValue(Зн,1);
					а = 1;
				Иначе 
					ЭлементыФормы.OLAP.SetValue(Зн,к+а);
				КонецЕсли;  
			КонецЦикла;
		КонецЦикла;
		ЭлементыФормы.OLAP.ClearFields();
	Исключение
		Если Найти(ОписаниеОшибки(),"ни одного показателя")>0 Тогда
			ТекстОшибки="Определите хотябы один показатель(числовое значение)";
		Иначе
			ТекстОшибки=ИнформацияОбОшибке().Описание;
		КонецЕсли;
		Формы.Отладка.ЗавершитьСобытие(СобытиеОтладки,"ОченьВажное",ИнформацияОбОшибке().Описание);
		ВызватьИсключение ТекстОшибки;
	КонецПопытки;
	Формы.Отладка.ЗавершитьСобытие(СобытиеОтладки);
КонецПроцедуры

//Выполняет анализ данных по указанным методикам
//Парарметры:
//	ТипАнализа -<ТипАнализа>. Который необходимо использовать
//
Процедура ВыполнитьАнализ(ТипАнализа)
	
	Построитель = Новый ПостроительОтчетаАнализаДанных;
	Построитель.ТипАнализа = ТипАнализа;
	Построитель.ИсточникДанных = мТекущаяСтрока.РезультатЗапроса;
	
	ФормаНастроек = ПолучитьФорму("ПараметрыАнализа");
	ФормаНастроек.Построитель = Построитель;
	ФормаНастроек.Инициализировать();
	
	Если ТипАнализа = Тип("АнализДанныхОбщаяСтатистика") Тогда 
		ФормаНастроек.ТолькоКолонки = Истина;
	КонецЕсли;
	
	Если ФормаНастроек.ОткрытьМодально() = Истина Тогда
		Форма = ПолучитьФорму("ФормаАнализа", ЭтаФорма, Новый УникальныйИдентификатор);
		Форма.Построитель = Построитель;
		Форма.Инициализировать(Построитель.ИсточникДанных, ЭлементыФормы.ДеревоЗапросов.ТекущиеДанные.Запрос, ТипАнализа);
		Форма.Открыть();
		Форма.ВыполнитьАнализ();
	КонецЕсли;
	
КонецПроцедуры

//Выделяет шапку колонки определенным цветом
//Параметры:
//	СтрокаКолонок	-<Строка>. Строковое представление колонок
//	Цвет			-<Цвет>. Новый цвет колонки
//
Процедура вВыделитьКолонкиЦветом(СтрокаКолонок,Цвет)
	Для каждого Колонка из СтрокуВСписок(СтрокаКолонок) Цикл
		НайденаяКолонка=ЭлементыФормы.ТаблицаРезультата.Колонки.Найти(Колонка);
		Если НайденаяКолонка<>Неопределено Тогда
			НайденаяКолонка.ЦветФонаШапки=Цвет;	
		КонецЕсли;	
	КонецЦикла;	
КонецПроцедуры	

//Процедура открывает форму групповой обработки
//Параметры:
//	СтрокаОбработки - <СтрокаДереваЗначений>. Строка в дереве доступных обработок.
//	Позиция			- <Cтруктура>. Позиция в дереве доступных обработок
//Возвращаемое значение:
//	Форма обработки.
Функция вПолучитьОбработку(СтрокаОбработки=Неопределено,Позиция)
	ТекущаяНастройка	= Новый Структура();
	Если 	Позиция.Свойство("Строка") 
		И 	Позиция.Свойство("Колонка") Тогда
		Если СтрокаОбработки=Неопределено Тогда
			СтрокаОбработки=вНайтиОбработку(Позиция);
			Если СтрокаОбработки=Неопределено Тогда 
					Возврат Неопределено;
			КонецЕсли;
		КонецЕсли;		
		ТекущаяНастройка.Вставить("Позиция",Позиция);
    КонецЕсли;

	ТекущаяНастройка.Вставить("СтрокаОбработки",СтрокаОбработки);
	
  	ФормаОбр = ПолучитьФорму(СтрокаОбработки.ИмяФормы,ЭтаФорма,СтрокаОбработки.Обработка);
	Если СтрокаОбработки.Уровень()>0 Тогда
		Если Не ФормаОбр.Открыта() Тогда
			ФормаОбр.Заголовок	= ФормаОбр.Заголовок+" <"+СтрокаОбработки.Обработка+"> ";
		КонецЕсли;	
	КонецЕсли;	
	ФормаОбр.ТекущаяНастройка	= ТекущаяНастройка;
	ФормаОбр.ЗагрузитьНастройку();
	Возврат ФормаОбр;//
КонецФункции

//Получает имя формы групповой обработки
//Параметры
//	СтрокаДерева	-<СтрокаДереваЗначений>. Строка в дереве доступные обработки	
Функция вПолучитьСтрокуДоступнойОбработки(СтрокаДерева)
	Если СтрокаДерева.Уровень()=0  Тогда
		СтрокаДерева=СтрокаДерева;
	Иначе	
		СтрокаДерева=СтрокаДерева.Родитель;
	КонецЕсли;
	Возврат СтрокаДерева;
КонецФункции	

//Показывам картину обработки на основе данных в табличном поле "Доступные обработки" 
//Параметры:
//	Элемент			-<ЭлеметФормы>. Элемент в котором показываем картинку
//  Колонка			-<КолонкаТабличногоПоля>. Колонка
//	ОформлениеСтроки-<ОформлениеСтроки>.
//	ДанныеСтроки	-<СтрокаТЗ,ДЗ>. Строка для которой показываем картинку
//Возвращаемое значение:
//	СтрокаДереваЗначений	ДоступныхОбработок.
Функция вПоказатьКартинкуОбработки(Элемент, Колонка, ОформлениеСтроки, ДанныеСтроки)
	СтрокаОбработки=вНайтиОбработку(ДанныеСтроки[Колонка.Данные]);
	Если Не СтрокаОбработки=Неопределено Тогда
		Пометка=?(Элемент.Имя="ВыбранныеОбработки",ДанныеСтроки["Пометка_Ei"],Истина);
		ОформлениеСтроки.Ячейки[Колонка.Имя].ОтображатьКартинку = Пометка;
		ОформлениеСтроки.Ячейки[Колонка.Имя].Картинка=вПолучитьСтрокуДоступнойОбработки(СтрокаОбработки).Картинка;
		Возврат СтрокаОбработки; 
	Иначе
		ОформлениеСтроки.Ячейки[Колонка.Имя].ОтображатьКартинку = Ложь;
	КонецЕсли;
КонецФункции

//Функция формирут таблицу выбраннх обороботок, чтобы для каждой строки результата запроса не формировать циклы 
//
Процедура вСформироватьТаблицуВыбранныхОбработок()
	СобытиеОтладки=Формы.Отладка.ДобавитьСобытие("Формирование таблицы выбранных обработок(на основе дерева)","Конструктор");
	Попытка
		ТаблицаВыбранныхОбработок.Очистить();
		Для каждого Строка из ВыбранныеОбработки.Строки Цикл
			Если Не Строка["Пометка_Ei"] Тогда
				//только отмеченные
				Продолжить;	
			КонецЕсли;
			//теперь проходимся по колонкам 
			Для каждого Колонка Из ВыбранныеОбработки.Колонки Цикл
				Если Прав(Колонка.Имя,3)="_Ei" Тогда
					Продолжить; //это служебная колонка
				КонецЕсли;	
				ОбработкаПрерыванияПользователя();
				вДобавитьОбработкуВТаблицу(Новый Структура("Строка,Колонка",Строка,Колонка));
			КонецЦикла;
		КонецЦикла;
	Исключение
		Формы.Отладка.ЗавершитьСобытие(СобытиеОтладки,"ОченьВажное",ИнформацияОбОшибке().Описание);
		ВызватьИсключение "Не удалось сформировать таблицу выбранных обработок";
	КонецПопытки;
	Формы.Отладка.ЗавершитьСобытие(СобытиеОтладки);	
КонецПроцедуры

//Добавляет в таблицу выбранных обработок подчиненные(вложенные обработки)
//Параметры:
//	Позиция				-<Структура>. Позиция родителя
Процедура вДобавитьПодчиненныеОбработки(ПозицияРодителя)
	Для каждого ПодчиненнаяСтрока из ПозицияРодителя.Строка.Строки Цикл
		ОбработкаПрерыванияПользователя();
		Если Не ПодчиненнаяСтрока["Пометка_Ei"] Тогда
			Продолжить;	
		КонецЕсли;
		Позиция	=  Новый Структура("Строка,Колонка",ПодчиненнаяСтрока,ПозицияРодителя.Колонка);
		вДобавитьОбработкуВТаблицу(Позиция,ПозицияРодителя);
	КонецЦикла	
КонецПроцедуры	

//Добавляет обработку в таблицу выбранных обработок
//Параметры:
//	Позиция			-<Структура>. Позиция добавляемой обработки
//	ПозицияРодителя -<Структура>. Позиция родителя
Процедура вДобавитьОбработкуВТаблицу(Позиция,ПозицияРодителя=Неопределено) Экспорт
	СтрокаОбработки=вНайтиОбработку(Позиция);
	Если Не СтрокаОбработки=Неопределено Тогда
		НоваяСтрока=ТаблицаВыбранныхОбработок.Добавить();
		Если Не ПозицияРодителя = Неопределено Тогда
			НоваяСтрока.Родитель					= ПозицияРодителя;
		КонецЕсли;	
		НоваяСтрока.Позиция						= Позиция;
		НоваяСтрока.Обработка 					= вПолучитьОбработку(,Позиция);
		НоваяСтрока.Условие						= вПолучитьУсловиеВыполненияОбработки(Позиция.Строка);
		НоваяСтрока.ДополнительныеСтроки		= Новый Массив;
		вДобавитьПодчиненныеОбработки(Позиция);
	КонецЕсли;
КонецПроцедуры	

//Получает условия при которых выполняется строка дерева выбранных обработок.
//Параметры:
//	СтрокаДерева - <СтрокаДереваЗначений>. Строка дерева выбранны обработок
//Возращаемое значение:
//	Строка - Выражение на встроенном языке.
Функция вПолучитьУсловиеВыполненияОбработки(СтрокаТаблицы)
	Условие="";
	ОбработкаУсловия			= вНайтиОбработку(СтрокаТаблицы.Условие_EI);
	Если Не ОбработкаУсловия	= Неопределено И 
			ТипЗнч(ОбработкаУсловия.Настройка) = Тип("Структура") Тогда
		Если ОбработкаУсловия.Настройка.Свойство("Текст") Тогда	
			Условие	= ОбработкаУсловия.Настройка.Текст;
		ИначеЕсли ОбработкаУсловия.Настройка.Свойство("ТекстМодуля") Тогда
			Условие	= ОбработкаУсловия.Настройка.ТекстМодуля;
        КонецЕсли;
	КонецЕсли;
	Возврат Условие;
КонецФункции

//Функция - определяет по имении, текущую позицию обработки. 
//Параметры
//	ИмяНастройки	-<Строка>. Имя настройки. ДоступныеОбработки.Обработка
//Возвращаемые значения: 
//	Если позиция определена, тогда возвращаем структуру(Строка,Колонка), иначе Неопределено
Функция вОпределитьПозициюОбработки(ИмяНастройки) Экспорт
	Для каждого Колонка Из ЭлементыФормы.ВыбранныеОбработки.Колонки Цикл
		Строка			= ВыбранныеОбработки.Строки.Найти(ИмяНастройки,Колонка.Имя,Истина);
		Если Не Строка	= Неопределено Тогда 
			Возврат Новый Структура("Строка,Колонка",Строка,Колонка);	
		КонецЕсли;
	КонецЦикла;	
КонецФункции	

//Функция определеяет возможно ли посместить обработку в эту позицию выбранных обработок
//Здесь два подхода либо обработка перемещается на пустую строку либо на другую обработку 
//в последнем случае нужно проверять, возвращает ли обработка на которую перемащаем значение, 
//если да то проверям тип этого значения и только при соответсвии разрешаем пеермещать 
//
//Параметры:
//	Позиция				-<Структура>. Выбранная позиция.
//	ОграничениеТипов    -<ОписаниеТипов>. Для которых может использоваться эта обработка
//Возвращаемое значение:
//	<Булево>
Функция вПозицияДоступнаДляОбработки(Позиция, ОграничениеТипов) Экспорт
	Результат	= Ложь;
	Если ТипЗнч(Позиция.Колонка) = Тип("КолонкаТабличногоПоля") И  Не Позиция.Колонка.ИзменятьВидимость Тогда
		//это специальная колонка на нее могут перемещатся только обработки определенного типа	
		Результат = (ЗначениеИзСтрокиВнутр(Позиция.Колонка.ТекстПодвала) = ОграничениеТипов);
	Иначе
		//обычная колонка 
		ОбработкаНаКоторуюПеремещаем=вНайтиОбработку(Позиция);
		Если Не ОбработкаНаКоторуюПеремещаем=Неопределено Тогда
			//на обработку 
			Если ОбработкаНаКоторуюПеремещаем.Функция Тогда
				Обработка=вПолучитьОбработку(ОбработкаНаКоторуюПеремещаем,Новый Структура());
				Если Не Обработка=Неопределено Тогда
					Если вОписаниеТиповПересекаются(ОграничениеТипов,Обработка.ПолучитьТипВозрЗначений()) Тогда
						Результат	= Истина;
					КонецЕсли;
				КонецЕсли;	
			 КонецЕсли;	   
		Иначе
			//перемещаем в пустую ячейку
			Если вОписаниеТиповПересекаются(ОграничениеТипов,вПолучитьДоступныеТипы(Позиция)) Тогда
				Результат	= Истина
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;	
	Возврат  Результат;
КонецФункции	

//Функция возвращает строку доступной обработки
//Параметры:
//	Позиция	-<Строка,Структура>. Позийия или строковое представление обработки
//
Функция вНайтиОбработку(Позиция) Экспорт
	Если ТипЗнч(Позиция)=Тип("Структура") Тогда
		Имя	=?(ТипЗнч(Позиция.Колонка) = Тип("КолонкаДереваЗначений"),Позиция.Колонка.Имя,Позиция.Колонка.Данные);
		ИмяНастройки	= Позиция.Строка[Имя];
	Иначе
		ИмяНастройки	= Позиция;
	КонецЕсли;
	Возврат ДоступныеОбработки.Строки.Найти(ИмяНастройки,"Обработка",Истина);
КонецФункции	

//Функция получает достпуные типы для указанной позиции
//Параметры:
//	Позиция	-<Структура>. Стурктура позиции, в дереве выбранных обработок.
//
Функция вПолучитьДоступныеТипы(Позиция) Экспорт
	ОписаниеТипов	= Новый ОписаниеТипов;
	Если Позиция.Строка.Уровень()=0	Тогда
		КолонкаЗначения=РезультатЗапроса.Колонки.Найти(Позиция.Колонка.Имя);
		Если  Не КолонкаЗначения=Неопределено Тогда
			ОписаниеТипов=КолонкаЗначения.ТипЗначения; //?(КолонкаЗначения.ТипЗначения.Типы().Количество()=0,Новый ОписаниеТипов("Число"),КолонкаЗначения.ТипЗначения);//из Excel можно загрузить колонку неопределенного типа, сэмулируем новый тип		
		Иначе
			Предупреждение("Колонка """+Позиция.Колонка.Имя+""" не найдена в результатах запроса.
				|Обновите структуру, или выберите другую колонку.",25);
        КонецЕсли;
	Иначе
		//это вложенная обработка
		ОбработкаРодитель=вНайтиОбработку(Новый Структура("Колонка,Строка",Позиция.Колонка,Позиция.Строка.Родитель));
		Если Не ОбработкаРодитель=Неопределено Тогда
			Если ОбработкаРодитель.Функция Тогда
				Обработка=вПолучитьОбработку(ОбработкаРодитель,Новый Структура());
				Если Не Обработка=Неопределено Тогда
					ОписаниеТипов	= Обработка.ПолучитьТипВозрЗначений();
				КонецЕсли;	
			КонецЕсли;
		КонецЕсли;	
	КонецЕсли;
	Возврат ОписаниеТипов;
КонецФункции

//Функция формирует позицию, изменяя колонку у исходной позиции на основе строковых данных
//Параметры:	
//	ИсходнаяПозиция	-<Структура>. Исходная позиция
//	Путь			-<Строка>. Предстваление пути (ОБРАЗЕЦ: ТекущиеДанные.Колонка1)
//Возвращаемое значение:
//	Структура
Функция вСкорректироватьКолонкуПозиции(Знач ИсходнаяПозиция,Путь) Экспорт
	СписокПути=СтрокуВСписок(Путь,".");
	Если СписокПути.Количество()>1 Тогда
		ИмяКолонки=СписокПути[1].Значение;
		Колонка=ЭлементыФормы.ВыбранныеОбработки.Колонки.Найти(ИмяКолонки);
		Если Не Колонка=Неопределено Тогда
			НоваяПозиция	= Новый Структура("Строка",ИсходнаяПозиция.Строка);
			НоваяПозиция.Вставить("Колонка",Колонка);
			Возврат НоваяПозиция;
		КонецЕсли;	
	КонецЕсли;	
КонецФункции	

//Очищает указанную позицию в дереве выбранных обработок
//Параметры:
//	Позиция	-<Структура>. Позиция колонки	
Процедура вОчиститьПозициюОбработки(Позиция) Экспорт
	Позиция.Строка[Позиция.Колонка.Данные]="";
	Для Каждого Строка ИЗ Позиция.Строка.Строки Цикл
		вОчиститьПозициюОбработки(Новый Структура("Строка,Колонка",Строка,Позиция.Колонка))	
	КонецЦикла;	
КонецПроцедуры

//Перемещает обработку из одной позиции в другую
//Параметры:
//	Имя				-<Строка>. Имя(представление) настройки обработки
//	НоваяПозиция	-<Структура>. Новая позиция обработки
//	СтараяПозиция	-<Структура>. Страя позиция обработки
//
Процедура вИзменитьПозициюОбработки(Имя,НоваяПозиция,СтараяПозиция=Неопределено) Экспорт
	Если ПустаяСтрока(НоваяПозиция.Строка[НоваяПозиция.Колонка.Данные]) ИЛИ НоваяПозиция.Колонка.Данные="Условие_" Тогда
		//перемещаем на пустое место
		НоваяПозиция.Строка[НоваяПозиция.Колонка.Данные]=Имя;
	Иначе
		//Определим как добавить(создать) строку, рядом или вложить в текущую
		//найдем обработку на которую хотим что то переместить 
		СтрокаОбработки=вНайтиОбработку(НоваяПозиция);
		Если Не СтрокаОбработки=Неопределено Тогда
			Если СтрокаОбработки.Функция Тогда
				//это функция поэтому вкладываем в нее
				НоваяСтрока	= НоваяПозиция.Строка.Строки.Добавить();
				ЭлементыФормы.ВыбранныеОбработки.Развернуть(НоваяПозиция.Строка);
			Иначе
			   	//создаем на следующей строке
				Родитель	= ?(НоваяПозиция.Строка.Родитель=Неопределено,ВыбранныеОбработки,НоваяПозиция.Строка.Родитель); 
				Индекс		= Родитель.Строки.Индекс(НоваяПозиция.Строка);
				НоваяСтрока = Родитель.Строки.Вставить(Индекс);
			КонецЕсли;	
			НоваяСтрока["Пометка_Ei"]					=	Истина;
			НоваяСтрока[НоваяПозиция.Колонка.Данные]	=	Имя;
			ЭлементыФормы.ВыбранныеОбработки.ОбновитьСтроки();
			
			//внесем изменения в позицию
			НоваяПозиция.Строка = НоваяСтрока; 
		КонецЕсли;	
	КонецЕсли;
	
	Если Не СтараяПозиция=Неопределено Тогда
		вОчиститьПозициюОбработки(СтараяПозиция);		
	КонецЕсли;	
КонецПроцедуры	

//Функция получает уникальное имя 
//Параметры:
//	Префикс - <Строка> Префикс имени
Функция вПолучитьУникальноеИмя(Префикс)
	Число	= 0;
	Имя		= Префикс;
	Пока Не вИмяУникально(ДоступныеОбработки,"Обработка",Имя,0) Цикл 
		Число=Число+1;
		Имя=Префикс+"_"+Число;
		ОбработкаПрерыванияПользователя();
	КонецЦикла;
	Возврат Имя;
КонецФункции

//Функция проверят имя на уникальность
//Параметры:
//	Дерево		- <ДеревоЗначений>. Дерево, в котором определяется уникальность.
//	ИмяКолонки  - <Строка>. Имя колонки, в которой должны быть уникальные значения.
//	Имя 		- <Строка>. Имя настройки
//	Граница 	- <Число>. Граница по которой принимяется решение. 
Функция вИмяУникально(Дерево,ИмяКолонки,Имя,Граница=1)  Экспорт
	Если Дерево.Строки.НайтиСтроки(Новый Структура(ИмяКолонки,Имя),Истина).Количество()<=Граница Тогда 
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;	
КонецФункции

//Получает структуру текущих данных для групповых обработок
//Либо первую выделенную строку либо, если не одна не выделена, просто первую строку
//Параметры:
//	Нет.
//Возвращаемое значние: <СтрокаТаблицы(Дерева)Значений>
Функция вПолучитьТекущиеДанные() Экспорт
	Строки	= ПолучитьСтроки(РезультатЗапроса,Истина);
	Если Строки.Количество()=0 Тогда
		Возврат ЭлементыФормы.ТаблицаРезультата.ТекущиеДанные;	
	Иначе
		Возврат Строки[0];
	КонецЕсли;	
КонецФункции

//Получает текущий объект для групповых обрабток 
//Параметры:
//	Позиция	-<Структура>. Позиция групповой обработки.
//
Функция вПолучитьТекущийОбъект(Позиция) Экспорт
	ТекущиеДанные 	= вПолучитьТекущиеДанные();
	Если Не ТекущиеДанные = Неопределено Тогда
		ИмяКолонки = ?(ПустаяСтрока(Позиция.Колонка.ДанныеФлажка),Позиция.Колонка.Данные,Позиция.Колонка.ДанныеФлажка);
		Если Не ТекущиеДанные.Владелец().Колонки.Найти(ИмяКолонки) = Неопределено Тогда
			Объект			= ТекущиеДанные[ИмяКолонки];
			ДоступныеТипы	= вПолучитьДоступныеТипы(Позиция);
			Возврат  ДоступныеТипы.ПривестиЗначение(Объект);
		КонецЕсли;	
	КонецЕсли;	
КонецФункции	

//Получает список вложенных обработок на основе рекомендованных
//Параметры:
//	СписокРекомендуемых - <СпиокЗначений>. Список рекомендуемых вложенных обработок	
Функция вПолучитьСписокВложенныхОбработок(СписокРекомендуемых) Экспорт
	СписокОбработок = Новый СписокЗначений;
	Для Каждого РекОбработка Из СписокРекомендуемых Цикл
		СтрокаОбработки = вНайтиОбработку(РекОбработка.Значение);
		Если Не СтрокаОбработки = Неопределено Тогда
			Обработка =  вПолучитьОбработку(СтрокаОбработки,Новый Структура());
			СписокОбработок.Добавить(Обработка,РекОбработка.Значение,РекОбработка.Пометка,СтрокаОбработки.Картинка);	
		КонецЕсли;	
	КонецЦикла;
	Возврат СписокОбработок;
КонецФункции	

//Формирует дополнительную структуру параметров для формы выбора типа, объекта групповых обработок
//Вызывается из групповых обработок
//Параметры:
//	Элемент				-<ЭлементФормы>. Открытие которого производится.
//  СвойстваОбработки   -<СвойстваОбработки>. Структура свойств обработки.
//	ТекущаяНастройка    -<Структура>. Текущая настройка обработки
Функция вСформироватьСтруктуруДляФормыВыбораТипа(Элемент,СвойстваОбработки,ТекущаяНастройка) Экспорт 
	СтруктураДопПараметров=Новый Структура();
	СтруктураДопПараметров.Вставить("ТекущиеДанные",Новый Структура("ЭтоВыражение,ЗначениеПараметра",(ТипЗнч(Элемент.Значение)=Тип("Строка")),Элемент.Значение));
	СтруктураДопПараметров.Вставить("ОграничениеТипа",Новый ОписаниеТипов(СвойстваОбработки.Типы,"СписокЗначений"));
	СтруктураДопПараметров.Вставить("ЗапретитьВстроенныйЯзык");
	//к доступным переменным относятся Параметры и ТекущиеДанные
	СтруктураДопПараметров.Вставить("ДоступныеСтруктуры",Новый Структура);
		Если ТекущаяНастройка.Свойство("Позиция") Тогда
			СтруктураДопПараметров.ДоступныеСтруктуры.Вставить("ТекущиеДанные",	вПолучитьТекущиеДанные());
		Иначе	
			СтруктураДопПараметров.ДоступныеСтруктуры.Вставить("Параметры",		вПолучитьСтруктуруПараметров());
		КонецЕсли;	
	Возврат СтруктураДопПараметров;
КонецФункции

//Загружает свойства объектов метаданных, является общей процедурой для обработок "Загрузка данных" и "Установка реквизитов" 
//
//Параметры:	
//	Строка	- <СтрокаДереваЗначений>. Строка объекта метаданных
Процедура ЗагрузитьСвойства(Строка) Экспорт
	Если Строка.Родитель.Представление = "РегистрыБухгалтерии" Тогда
		//Вставим субконто сразу после счета (для наглядности)
		МД = Метаданные.НайтиПоТипу(Строка.Тип.Типы()[0]);
		Если (Не МД = Неопределено) И (Не МД.ПланСчетов.ВидыСубконто = Неопределено) Тогда
			СписокСубконто = Новый СписокЗначений;
			Если МД.Корреспонденция Тогда
				СписокСубконто.Добавить(Строка.Свойства.Найти("СчетДт","ИмяПараметра"),"СубконтоДт");
				СписокСубконто.Добавить(Строка.Свойства.Найти("СчетКт","ИмяПараметра"),"СубконтоКт");	
			Иначе	
				СписокСубконто.Добавить(Строка.Свойства.Найти("Счет","ИмяПараметра"),"Субконто");	
			КонецЕсли;
			Для Каждого ЭлементСубконто Из  СписокСубконто Цикл
				Для Инд=1 По МД.ПланСчетов.МаксКоличествоСубконто Цикл
					Если ЭлементСубконто.Значение = Неопределено Тогда
						НовоеСвойство 					= Строка.Свойства.Добавить();			
					Иначе
						НовоеСвойство 					= Строка.Свойства.Вставить(Строка.Свойства.Индекс(ЭлементСубконто.Значение)+Инд);			
					КонецЕсли;	
					НовоеСвойство.ИмяПараметра		= ЭлементСубконто.Представление + Инд;
					НовоеСвойство.ОграничениеТипа	= МД.ПланСчетов.ВидыСубконто.Тип;
				КонецЦикла;
			КонецЦикла;	
		КонецЕсли;	
	КонецЕсли; 
КонецПроцедуры	

//Создает построитель запроса на основе результатов
//Параметры:
//	ПроверитьКолонки - <Булево>. Выполняет проверку колонок, если состав колонок такой же построитель не создается
//	
Процедура вСоздатьПостроительИзТаблицы(ПроверитьКолонки = Ложь)
	Если ТипЗнч(РезультатЗапроса) = Тип("ТаблицаЗначений") Тогда
		СобытиеОтладки=Формы.Отладка.ДобавитьСобытие("Создание построителя на основе таблицы значений","Конструктор");
		Попытка								
			КопияРезультата=РезультатЗапроса.Скопировать();
			СлужебнаяКолонка=КопияРезультата.Колонки.Найти("Пометка_Ei");
			Если Не СлужебнаяКолонка=Неопределено Тогда
				КопияРезультата.Колонки.Удалить(СлужебнаяКолонка);	
			КонецЕсли;
			СоздатьПостроитель = Истина;
			Если ПроверитьКолонки И Не ПостроительЗапроса.ИсточникДанных = Неопределено Тогда
				СоздатьПостроитель = Ложь;
				//Если набор колонок соотвествуют источнику данных - построитель не создаем 
				Для Каждого Колонка ИЗ ПостроительЗапроса.ИсточникДанных.Колонки Цикл
					Если КопияРезультата.Колонки.Найти(Колонка.Имя) = Неопределено Тогда
						СоздатьПостроитель	= Истина;
						Прервать;
					КонецЕсли;	
				КонецЦикла;	
			КонецЕсли;	
			Если СоздатьПостроитель Тогда
				ОписаниеИсточникаДанных = Новый ОписаниеИсточникаДанных(КопияРезультата);
				ПостроительЗапроса=Новый ПостроительОтчета;
				ПостроительЗапроса.ИсточникДанных = ОписаниеИсточникаДанных;
				ПостроительЗапроса.ЗаполнитьНастройки();
			КонецЕсли;	
		Исключение
			Формы.Отладка.ЗавершитьСобытие(СобытиеОтладки,"ОченьВажное",ИнформацияОбОшибке().Описание);
			ВызватьИсключение "Не удалось создать построитель";
		КонецПопытки;
		Формы.Отладка.ЗавершитьСобытие(СобытиеОтладки);
	КонецЕсли;
КонецПроцедуры	

//Добавлет в отбор построителя значение,
//если колонка уже существиет в отборе е тип будет расширен
//Параметры
//	ДобЗначение  - <Произволный> Добавляемое значение.
Процедура вДобавитьОтборВПостроитель(ДобЗначение)
	Если Не ЭлементыФормы.ТаблицаРезультата.ТекущаяКолонка = Неопределено Тогда
		ИмяКолонки	= ?(ТипЗнч(ДобЗначение) = Тип("ПолеПостроителяОтчета"),
							ДобЗначение.ПутьКДанным,	
							ЭлементыФормы.ТаблицаРезультата.ТекущаяКолонка.Имя);
		//проверим определен ли для колонки тип
		КолонкаОтбора	= ЭлементыФормы.ТаблицаРезультата.Колонки.Найти(ИмяКолонки);
		Если НЕ КолонкаОтбора = Неопределено 
			И КолонкаОтбора.ЭлементУправления.ТипЗначения = Новый ОписаниеТипов() Тогда
			Предупреждение("Для колонки не определен тип, поле не может быть использавано в отборе",20,"Построитель отчета");
			Возврат;
		КонецЕсли;	
		СобытиеОтладки=Формы.Отладка.ДобавитьСобытие("Добавление отбора в построитель запроса по колонке """+ИмяКолонки+"""","Конструктор");
		Попытка								
			мПолеОтбора = ПостроительЗапроса.Отбор.Найти(ИмяКолонки);
			Если мПолеОтбора = Неопределено Тогда
				мПолеОтбора = ПостроительЗапроса.Отбор.Добавить(ИмяКолонки);
			Иначе
				мПолеОтбора.ВидСравнения 	= ВидСравнения.ВСписке;
				мПолеОтбора.Использование 	= Истина;
			КонецЕсли;	
			
			Если Не мПолеОтбора.ВидСравнения 	= ВидСравнения.ВСписке Тогда
				Если ТипЗнч(ДобЗначение) = Тип("ПолеПостроителяОтчета") Тогда
					мПолеОтбора.Установить(ДобЗначение[ИмяКолонки]);
				ИначеЕсли ТипЗнч(ДобЗначение) = Тип("Массив") Тогда
					мСписокОтбора = Новый СписокЗначений;
					Для Каждого Элемент ИЗ ДобЗначение Цикл
						мСписокОтбора.Добавить(Элемент[ИмяКолонки]);
					КонецЦикла;	
					Если мСписокОтбора.Количество() = 1 Тогда
						мПолеОтбора.Установить(мСписокОтбора.Получить(0).Значение);
					Иначе
						мПолеОтбора.ВидСравнения 	= ВидСравнения.ВСписке;
						мПолеОтбора.Значение 		= мСписокОтбора;
						мПолеОтбора.Использование 	= Истина;
					КонецЕсли; 
				КонецЕсли;
			Иначе
				Если ТипЗнч(мПолеОтбора.Значение) = Тип("СписокЗначений") Тогда
					мСписокОтбора = мПолеОтбора.Значение;
				Иначе	
					мСписокОтбора = Новый СписокЗначений;
		            мСписокОтбора.Добавить(мПолеОтбора.Значение);
				КонецЕсли;
				Если ТипЗнч(ДобЗначение) = Тип("ПолеПостроителяОтчета") Тогда
					мСписокОтбора.Добавить(ДобЗначение);
				ИначеЕсли ТипЗнч(ДобЗначение) = Тип("Массив") Тогда
					Для Каждого Элемент ИЗ ДобЗначение Цикл
						мСписокОтбора.Добавить(Элемент[ИмяКолонки]);
					КонецЦикла;	
				КонецЕсли;	
				мПолеОтбора.Значение 		= мСписокОтбора;
			КонецЕсли;	
		Исключение
			Формы.Отладка.ЗавершитьСобытие(СобытиеОтладки,"ОченьВажное",ИнформацияОбОшибке().Описание);
			ВызватьИсключение "Не удалось создать отбор";
		КонецПопытки;
		Формы.Отладка.ЗавершитьСобытие(СобытиеОтладки);
	КонецЕсли;	
КонецПроцедуры 	
////////////////////////////////////////////////////////////////////////////////
// ВСПОМОГАТЕЛЬНЫЕ ПРОЦЕДУРЫ ДЛЯ ФОРМИРОВАНИЯ СТРУКТУРЫ ЗАПРОСА

//Получает текст запроса на языке 1С и помещает его в дерево запросов
//Параметры:
//	СтруктураЗапроса-	<СтруктураЗначений>. Структура определяет вложенность одного запроса в другой.	
Процедура вПолучитьТекстЗапросаИзСтруктуры(СтруктураЗапроса,Родитель,СтрокаОтбора)
	НоваяСтрока=Родитель.Строки.Добавить();
	НоваяСтрока.ТекстЗапроса=СобратьЗапросИзСтруктуры(СтруктураЗапроса,СтрокаОтбора,Истина);
	НоваяСтрока.Запрос=вСформироватьНаименованиеСтруктурыЗапроса(СтруктураЗапроса,СтрокаОтбора);
	НоваяСтрока.ДатаИзменения=ТекущаяДата();
	Для каждого Строка из СтрокаОтбора.Строки Цикл
		вПолучитьТекстЗапросаИзСтруктуры(СтруктураЗапроса,НоваяСтрока,Строка);	
	КонецЦикла;	
КонецПроцедуры	

//Строим дерево запросов где как раз определяется вложеннсоть одного запроса в друнгой
//Параметры:
//	СтруктураЗапроса-	<СтруктураЗначений>. Структура определяет вложенность одного запроса в другой.	
Функция вСформироватьДеревоЗапросов(СтруктураЗапроса)
	Дерево=Новый ДеревоЗначений;
	Дерево.Колонки.Добавить("Пакет");		//
	Дерево.Колонки.Добавить("Запрос");
	Дерево.Колонки.Добавить("Таблица");
	Дерево.Колонки.Добавить("Шаблон",Новый ОписаниеТипов("Строка"));
	Для Каждого Пакет из СтруктураЗапроса.Пакеты Цикл
		//пакеты все на первом уровне там всегда  запрос
		СтрокаПакета=Дерево.Строки.Добавить();
		СтрокаПакета.Пакет=Пакет;
		СтрокаПакета.Шаблон=Пакет.Шаблон;
		вДобавитьЗапросыВДерево(СтруктураЗапроса,СтрокаПакета,"Пакет");
	КонецЦикла;
	Возврат Дерево;
КонецФункции

//Добавлеет вложенные запросы
//Вызывается рекурсивно, запросы могут быть как для пакета так и для вложенного запроса.
//Параметры:
//	СтруктураЗапроса-	<СтруктураЗначений>. Структура определяет вложенность одного запроса в другой.	
//	СтрокаОснование -	<СтрокаДЗ>. К этой строке будем добавлять все запросы.
//	ИмяКолонки		-	<Строка>. Имя колонки в строке основании, которая определяет родеителя для вложенных элементов.
Процедура вДобавитьЗапросыВДерево(СтруктураЗапроса,СтрокаОснование,ИмяКолонки)
	ЗапросыПакета=СтруктураЗапроса.Вложенность.НайтиСтроки(Новый Структура("Родитель",СтрокаОснование[ИмяКолонки]));
	Для Каждого Запрос из  ЗапросыПакета Цикл
		СтрокаЗапроса=?(ЗапросыПакета.Количество()>1,СтрокаОснование.Строки.Добавить(),СтрокаОснование);
		СтрокаЗапроса.Пакет 	=СтрокаОснование.Пакет;
		СтрокаЗапроса.Запрос	=Запрос.Ссылка;
		СтрокаЗапроса.Таблица	=Неопределено; //необходимо когда в запросе только один вложенный запрос, очащаем таблицу // 15.02.2009

		//найдем таблицы запросов
		ТаблицыЗапроса=вДобавитьТаблицыВДерево(СтруктураЗапроса,СтрокаЗапроса);
		//определяем под какую таблицу включить таблицы выражений
		
		//найдем таблицы выражений
		ТаблицыВыражений=СтруктураЗапроса.Таблицы.НайтиСтроки(Новый Структура("СтрокаЗапроса,Псевдоним,ВложенныйЗапрос",СтрокаЗапроса.Запрос,"",Истина));
		Если  ТаблицыЗапроса.Количество()>1 Тогда
			Для Каждого ТаблицаВыражения из ТаблицыВыражений Цикл
				//определим в какое выражение входит наша таблица
				Таблицы=СтруктураЗапроса.Вложенность.НайтиСтроки(Новый Структура("Ссылка",ТаблицаВыражения));
				Для Каждого Таблица из Таблицы Цикл
					//определим какой таблицы это выражение
					ВыраженияТаблицы=СтруктураЗапроса.Вложенность.НайтиСтроки(Новый Структура("Ссылка",Таблица.Родитель));
					Для Каждого ВыражениеТаблицы из ВыраженияТаблицы Цикл	
						Для Каждого Строка из СтрокаЗапроса.Строки Цикл
							ПредствалениеПоля=ПредставлениеПоля(СтруктураЗапроса,ВыражениеТаблицы,Строка.Таблица);
							Если Не ПустаяСтрока(ПредствалениеПоля) Тогда
								НоваяСтрокаТаблицыВыражения=Строка.Строки.Добавить();
								НоваяСтрокаТаблицыВыражения.Пакет=Строка.Пакет;
								НоваяСтрокаТаблицыВыражения.Шаблон=ТаблицаВыражения.Шаблон;
								НоваяСтрокаТаблицыВыражения.Таблица=ТаблицаВыражения;
								вДобавитьЗапросыВДерево(СтруктураЗапроса,НоваяСтрокаТаблицыВыражения,"Таблица");
								Если СтруктураЗапроса.Вложенность.НайтиСтроки(Новый Структура("Родитель,Ключ",ТаблицаВыражения,"Запросы")).Количество()>1 Тогда
									НоваяСтрокаТаблицыВыражения.Таблица=Неопределено;
								КонецЕсли;	
								Прервать;
							КонецЕсли;	
						КонецЦикла;
					КонецЦикла;
				КонецЦикла;	
			КонецЦикла;
		ИначеЕсли ТаблицыВыражений.Количество()>1 Тогда
			//просто таблицы выражений под эту строку быз вычисления принадлежности
			Для Каждого ТаблицаВыражения из ТаблицыВыражений Цикл
				НоваяСтрокаТаблицыВыражения=СтрокаЗапроса.Строки.Добавить();
				НоваяСтрокаТаблицыВыражения.Пакет=СтрокаЗапроса.Пакет;
				НоваяСтрокаТаблицыВыражения.Шаблон=ТаблицаВыражения.Шаблон;
				НоваяСтрокаТаблицыВыражения.Таблица=ТаблицаВыражения;
				вДобавитьЗапросыВДерево(СтруктураЗапроса,НоваяСтрокаТаблицыВыражения,"Таблица");
				Если СтруктураЗапроса.Вложенность.НайтиСтроки(Новый Структура("Родитель,Ключ",ТаблицаВыражения,"Запросы")).Количество()>1 Тогда
					НоваяСтрокаТаблицыВыражения.Таблица=Неопределено;
				КонецЕсли;	
			КонецЦикла;	
		КонецЕсли;	
	КонецЦикла;	
КонецПроцедуры 	

//Добавляет таблицы для запроса в дерево
//Параметры:
//	СтруктураЗапроса	-	<СтруктураЗначений>. Структура определяет вложенность одного запроса в другой.	
//	СтрокаЗапроса			<СтрокаДЗ>. Строка в которой описан запрос;
//Возвращаемо значение:
//	Строки таблиц значений;
Функция вДобавитьТаблицыВДерево(СтруктураЗапроса,СтрокаЗапроса)
	ТаблицыЗапроса=СтруктураЗапроса.Таблицы.НайтиСтроки(Новый Структура("СтрокаЗапроса",СтрокаЗапроса.Запрос));
	Для Каждого Таблица из ТаблицыЗапроса Цикл
		Если Таблица.ВложенныйЗапрос Тогда
			Если ПустаяСтрока(Таблица.Псевдоним)  Тогда
				//Эта таблица выражений
				Продолжить;
			Иначе
				СтрокаТаблицы=СтрокаЗапроса.Строки.Добавить();
				СтрокаТаблицы.Пакет 	=СтрокаЗапроса.Пакет;
				СтрокаТаблицы.Шаблон	=Таблица.Шаблон;
				СтрокаТаблицы.Запрос	=СтрокаЗапроса.Запрос;
				СтрокаТаблицы.Таблица	=Таблица;
				вДобавитьЗапросыВДерево(СтруктураЗапроса,СтрокаТаблицы,"Таблица");
				Если СтруктураЗапроса.Вложенность.НайтиСтроки(Новый Структура("Родитель,Ключ",Таблица,"Запросы")).Количество()>1 Тогда
					СтрокаТаблицы.Запрос	=Неопределено;
					СтрокаТаблицы.Таблица	=Неопределено;
				КонецЕсли;
			КонецЕсли
		Иначе
			СтрокаТаблицы=?(ТаблицыЗапроса.Количество()>1,СтрокаЗапроса.Строки.Добавить(),СтрокаЗапроса);
			СтрокаТаблицы.Пакет 	=СтрокаЗапроса.Пакет;
			СтрокаТаблицы.Запрос	=СтрокаЗапроса.Запрос;
			СтрокаТаблицы.Таблица	=Таблица;
		КонецЕсли;	
	КонецЦикла;
	Возврат ТаблицыЗапроса;
КонецФункции

//Формирует наименование структуры запроса, осноываясь на данных отбора
//Параметры:
//	СтруктураЗапроса	-	<СтруктураЗначений>. Структура определяет вложенность одного запроса в другой.	
//	СтрокаОтбора			<СтрокаДЗ>. Строка в которой описан запрос;
//Возвращаемо значение:
//	Предложенное Наимнование запроса;
Функция вСформироватьНаименованиеСтруктурыЗапроса(СтруктураЗапроса,СтрокаОтбора)
	Если Не СтрокаОтбора.Таблица=Неопределено Тогда
		Возврат СокрЛП(""+СтрокаОтбора.Таблица.Псевдоним+" ("+СтрокаОтбора.Таблица.Имя+")");
	ИначеЕсли Не СтрокаОтбора.Запрос=Неопределено Тогда
		//Все таблицы запроса
		ТаблицыЗапроса=СтруктураЗапроса.Таблицы.НайтиСтроки(Новый Структура("СтрокаЗапроса",СтрокаОтбора.Запрос));
		Представление="";
		Для каждого Таблица из ТаблицыЗапроса Цикл
			Представление=Представление+", "+Таблица.Псевдоним;	
		КонецЦикла;
		Возврат Сред(Представление,3);
	Иначе 
		Возврат "Пакет "+(СтруктураЗапроса.Пакеты.индекс(СтрокаОтбора.Пакет)+1);
	КонецЕсли;	
КонецФункции	

	
///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ ТАБЛИЧНОГО ПОЛЯ ТИПЫ ВРЕМЕННЫХ ТАБЛИЦ

//Выводим картинку для типа колонки
//
Процедура ТипыВТПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	СформироватьКартинкуНаОсновеТипов(ОформлениеСтроки.Ячейки.ОписаниеТипов);
	ОформлениеСтроки.Ячейки.ОписаниеТипов.ОтображатьКартинку=истина;
	ОформлениеСтроки.Ячейки.Имя.ОтображатьКартинку=истина;
	ОформлениеСтроки.Ячейки.Имя.ИндексКартинки=0;
КонецПроцедуры

//Заполняем список выбора текущими колонками результата запроса
//
Процедура ТипыВТКолонкиРезультатНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	Элемент.СписокВыбора.Очистить();
	Для каждого Колонка из ЭлементыФормы.ТаблицаРезультата.Колонки Цикл
		Если Колонка.Видимость Тогда
			Элемент.СписокВыбора.Добавить(Колонка.Имя);
		КонецЕсли;	
	КонецЦикла;	
КонецПроцедуры

//Обработка выбора
//
Процедура ТипыВТКолонкиРезультатОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	СтандартнаяОбработка=ложь;
	Элемент.Значение=Элемент.Значение+?(ПустаяСтрока(Элемент.Значение),"",",")+ВыбранноеЗначение; 
КонецПроцедуры

//Устанавливаем фон
//
Процедура ТипыВТПриАктивизацииЯчейки(Элемент)
		//сбрасываем цвет
	Для каждого Колонка из  ЭлементыФормы.ТаблицаРезультата.Колонки Цикл
		Колонка.ЦветФонаШапки=Новый Цвет;	
	КонецЦикла;
	Если Элемент.ТекущаяКолонка.Имя="КолонкиРезультат" Тогда
		Индекс=ТипыВТ.Индекс(Элемент.ТекущаяСтрока);
		//текущую .. спереди и сзади
		вВыделитьКолонкиЦветом(Элемент.ТекущиеДанные.КолонкиРезультат,ЭлементыФормы.ТипыВТ.ЦветФонаВыделения);
		Если Не Индекс=0 Тогда
			вВыделитьКолонкиЦветом(ТипыВТ[Индекс-1].КолонкиРезультат,Новый Цвет(217,176,255));
		КонецЕсли;
		Если Не ТипыВТ.Количество()-1=Индекс Тогда
			вВыделитьКолонкиЦветом(ТипыВТ[Индекс+1].КолонкиРезультат,Новый Цвет(148,229,151));
		КонецЕсли;
	КонецЕсли;	
КонецПроцедуры



 ///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	Отказ=вУстановитьТабличнуюЧасть(ЭтаФорма,"Монитор");
КонецПроцедуры

// Обработчик события при открытии формы
//
Процедура ПриОткрытии()
	// Создадим структуру дерева запросов
	ДеревоЗапросов=вИнициализацияДерева().Скопировать();
	// Попытаемся загрузить последний открывавшийся файл запросов
	вВосстановитьИмяФайла();
	Если ПустаяСтрока(мИмяФайла) Тогда
		вСоздатьНовыйФайлЗапросов();
	Иначе
		вЗагрузитьЗапросыИзФайла();
		мТекущаяСтрока = НеОпределено;
	КонецЕсли;
	ЭлементыФормы.ПанельТекстаЗапроса.ТекущаяСтраница=ЭлементыФормы.ПанельТекстаЗапроса.Страницы.Получить(0);
	ВосстановитьЗначенияПометок(ЭтаФорма,"КонтМеню.Кнопки.МенюРезультататЗапроса");
	ВосстановитьЗначенияПометок(ЭтаФорма,"КонтМеню.Кнопки.ОбработкаРезультата");
	ВосстановитьЗначенияПометок(ЭтаФорма,"КоманднаяПанель1");

	ПодключитьОбработчикОжидания("вЗаполнитьСтрокуСостояния",120,Истина);
	
	Если Не Метаданные.Обработки.Найти("ирПлатформа")=Неопределено
		и ПравоДоступа("Использование", Метаданные.Обработки.ирПлатформа) Тогда
		Состояние("Инициализация контекстной подсказки");
		// +++.КЛАСС.ПолеТекстовогоДокументаСКонтекстнойПодсказкой
		ПолеТекстовогоДокументаСКонтекстнойПодсказкой = Новый Структура;
		
		Обработки.ирКлсПолеТекстовогоДокументаСКонтекстнойПодсказкой.Создать().Инициализировать(ПолеТекстовогоДокументаСКонтекстнойПодсказкой,
			ЭтаФорма, ЭлементыФормы.ТекстЗапроса, ЭлементыФормы.КонтМеню.Кнопки.Предприятие.Кнопки.Дополнительно, Истина);

		Обработки.ирКлсПолеТекстовогоДокументаСКонтекстнойПодсказкой.Создать().Инициализировать(ПолеТекстовогоДокументаСКонтекстнойПодсказкой,
			ЭтаФорма, ЭлементыФормы.ТекстМодуля,ЭлементыФормы.КонтМеню.Кнопки.Язык.Кнопки.Дополнительно, Ложь);
		//Удалим кнопку выполнение встренного языка уже такая есть
		ЭлементыФормы.КонтМеню.Кнопки.Язык.Кнопки.Дополнительно.Кнопки.Удалить(0);
		МассивТипов = Новый Массив;
		МассивТипов.Добавить(Тип("ДеревоЗначений"));
		МассивТипов.Добавить(Тип("ТаблицаЗначений"));
		МассивТипов.Добавить(Тип("РезультатЗапроса"));
		ПолеТекстовогоДокументаСКонтекстнойПодсказкой.ТекстМодуля.ДобавитьСловоЛокальногоКонтекста(
				"Результат","Свойство",Новый ОписаниеТипов(МассивТипов));
		ПолеТекстовогоДокументаСКонтекстнойПодсказкой.ТекстМодуля.ДобавитьСловоЛокальногоКонтекста(
				"Параметры","Свойство",Новый ОписаниеТипов("Структура"));
		ПолеТекстовогоДокументаСКонтекстнойПодсказкой.ТекстМодуля.ДобавитьСловоЛокальногоКонтекста(
				"ПолучитьСодержаниеМетаданных","Метод",Новый ОписаниеТипов("СписокЗначений"),,Истина);				
				
		ПолеТекстовогоДокументаСКонтекстнойПодсказкой.ТекстМодуля.ДобавитьСловоЛокальногоКонтекста(
				"СохранитьСодержаниеМетаданных","Метод",,,Истина);
				
		ПолеТекстовогоДокументаСКонтекстнойПодсказкой.ТекстМодуля.ДобавитьСловоЛокальногоКонтекста(
				"ПолучитьОбъектыМетаданных","Метод",Новый ОписаниеТипов("Структура"),,Истина);
				
		ПолеТекстовогоДокументаСКонтекстнойПодсказкой.ТекстМодуля.ДобавитьСловоЛокальногоКонтекста(
				"ЗаменитьСписокОбъектаМетаданных","Метод",,,Истина);

		ПолеТекстовогоДокументаСКонтекстнойПодсказкой.ТекстМодуля.ДобавитьСловоЛокальногоКонтекста(
				"ОбновитьВерсииИзменныхМетаданных","Метод",,,Истина);
				
		ПолеТекстовогоДокументаСКонтекстнойПодсказкой.ТекстМодуля.ДобавитьСловоЛокальногоКонтекста(
				"ОбъектМетаданных","Метод",Новый ОписаниеТипов("Структура"),,Истина);
				
				
		// ---.КЛАСС.ПолеТекстовогоДокументаСКонтекстнойПодсказкой
	КонецЕсли;
    КонтМенюРежимВТ(ЭлементыФормы.КонтМеню.Кнопки.SQL.Кнопки.РежимВТ,Ложь);
	КонтМенюЗакрепить(ЭлементыФормы.КонтМеню.Кнопки.МенюРезультататЗапроса.Кнопки.Закрепить,Ложь);
	КонтМенюЗакрепить(ЭлементыФормы.КонтМеню.Кнопки.ОбработкаРезультата.Кнопки.ЗакрепитьОбработки,Ложь);
	ПодключитьОбработчикОжидания("ИницилизацияВозможнойОтладки",0.1,Истина);
	Если ПараметрыОкружения.СерверныйРежим Тогда
		ЭлементыФормы.КоманднаяПанель1.Кнопки.ВыполнитьЗапрос.Кнопки.ВыполнитьФоном.Доступность=Истина;
		ПодключитьОбработчикОжидания("ПолучитьРезультатФоновыхЗаданий",1);
	КонецЕсли;
	//ЭлементыФормы.КоманднаяПанель1.Кнопки.ВыполнитьЗапрос.Кнопки.Трассировка.Доступность=ПараметрыОкружения.СерверныйРежим;
КонецПроцедуры // ПриОткрытии()

// Обработчик события преред закрытием формы
//
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	Если вСохранитьЗапросыВФайл(Истина) Тогда
	Иначе
        СтандартнаяОбработка = Ложь;
		Отказ = Истина;
	КонецЕсли;
КонецПроцедуры // ПередЗакрытием()

//Удаление экземпляра контекстной подсказки
Процедура ПриЗакрытии()
	Если Не Метаданные.Обработки.Найти("ирПлатформа")=Неопределено
		и ПравоДоступа("Использование", Метаданные.Обработки.ирПлатформа) Тогда
		// +++.КЛАСС.ПолеТекстовогоДокументаСКонтекстнойПодсказкой
		// Уничтожение всех экземпляров компоненты. Обязательный блок.
		Для Каждого Экземпляр Из ПолеТекстовогоДокументаСКонтекстнойПодсказкой Цикл
			Экземпляр.Значение.Уничтожить();
		КонецЦикла;
		ЭлементыФормы.КонтМеню.Кнопки.Предприятие.Кнопки.Дополнительно.Кнопки.Очистить();
		ЭлементыФормы.КонтМеню.Кнопки.Язык.Кнопки.Дополнительно.Кнопки.Очистить();
		// ---.КЛАСС.ПолеТекстовогоДокументаСКонтекстнойПодсказкой
	КонецЕсли;
	вОстановитьФоновыеПроцессы();
	вОсвободитьТабличнуюЧасть(ЭлементыФормы.Монитор.Данные);
КонецПроцедуры
 
// Обработчик события выбора в подчиненной форме
// необходим для конструктора СКД
Процедура ОбработкаВыбора(ЗначениеВыбора, Источник)
	Если ТипЗнч(Источник) = Тип("КонструкторСхемыКомпоновкиДанных") Тогда
		Если РедактируемаяКонструкторомСтрока.СхемаКомпоновкиДанных <> ЗначениеВыбора Тогда
			РедактируемаяКонструкторомСтрока.СхемаКомпоновкиДанных = ЗначениеВыбора;
			Модифицированность=Истина;
		КонецЕсли;	
		Если РедактируемаяКонструкторомСтрока = мТекущаяСтрока Тогда
			вИнициализироватьИсточникКомпоновщикаНастроек(мТекущаяСтрока);
			Если Вопрос(НСТР("ru='Загрузить стандартные настройки?'"), РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Да Тогда
				КомпоновщикНастроек.ЗагрузитьНастройки(РедактируемаяКонструкторомСтрока.СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
			КонецЕсли;
			РедактируемаяКонструкторомСтрока = Неопределено;
		КонецЕсли;	
	КонецЕсли;	 
КонецПроцедуры // ОбработкаВыбора()

 //////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ ОЖИДАНИЯ

//Получает результат фоновых заданий в результат запроса или алгоритма на встроенном языке
//Параметры:
//	Нет.
Процедура ПолучитьРезультатФоновыхЗаданий()
	//время ожидания тех журнала 
	Если ПараметрыОкружения.ПериодичностьТехЖурнала=Неопределено Тогда
		Граница=60;
	Иначе
		Граница=ПараметрыОкружения.ПериодичностьТехЖурнала-Секунда(ТекущаяДата());
		Граница=?(Граница<0,60+Граница,Граница);
	КонецЕсли;
	ЭлементыФормы.КоманднаяПанель1.Кнопки.ВыполнитьЗапрос.Кнопки.Трассировка.Текст="Трассировать ("+Граница+")";
	
	//Теперь фоновые процессы 
	НеЗавершенные=ТаблицаФоновыхПроцессов.НайтиСтроки(Новый Структура("Завершено",Ложь));
	Для Каждого Процесс из НеЗавершенные Цикл
		//Пытаемся получить строку
		СтрокаИнициаторПроцесса=ДеревоЗапросов.Строки.Найти(Процесс.Ключ,"УникальныйИдентификатор",Истина);
		Если СтрокаИнициаторПроцесса=Неопределено Тогда
			//Строка пропала возможно загрузили новый список запросов
			Процесс.Завершено=Истина;
        	МассивПотеренныхЗаданий = ФоновыеЗадания.ПолучитьФоновыеЗадания(Новый Структура("Ключ",Процесс.Ключ));
			Для Каждого ФоновоеЗадание из  МассивПотеренныхЗаданий Цикл
				ФоновоеЗадание.Отменить(); 	
			КонецЦикла;	
			Продолжить;
		Иначе
			//сделаем живым индикатор времени что бы было понятно что выполняется
			Если СтрокаИнициаторПроцесса=мТекущаяСтрока Тогда
				вИзменитьВремяВыполнения(Процесс.ИндексСтраницы,ТекущаяДата()-Процесс.ДатаЗапуска);
			КонецЕсли;
		КонецЕсли;	
    	МассивЗаданий = ФоновыеЗадания.ПолучитьФоновыеЗадания(Новый Структура("Ключ,Состояние,Начало", Процесс.Ключ, СостояниеФоновогоЗадания.ЗавершеноАварийно,Процесс.ДатаЗапуска));
		Для каждого Задание из  МассивЗаданий Цикл
			//получаем результаты задания
			Процесс.Завершено=Истина;
			Попытка 
				СтруктураПроцесса=ЗначениеИзСтрокиВнутр(Задание.ИнформацияОбОшибке.Описание);
			Исключение
				Сообщить("Не удалось выполнить задание на сервере "+Задание.ИнформацияОбОшибке.Описание);
				Продолжить;
			КонецПопытки;
			Если СтруктураПроцесса.Свойство("Запрос") 
				ИЛИ СтруктураПроцесса.Свойство("ВстроенныйЯзык")
				ИЛИ СтруктураПроцесса.Свойство("ПостроительЗапроса")
				ИЛИ СтруктураПроцесса.Свойство("SQLЗапрос") Тогда
				СтрокаИнициаторПроцесса.РезультатЗапроса=СтруктураПроцесса.Результат.Получить();
			КонецЕсли;
			//если выдленная текущая строка тогда обновим табличные поля
			Если СтрокаИнициаторПроцесса=мТекущаяСтрока Тогда
				вОбнулитьФлагиВыводаРезультатов();			
				вЗагрузитьРезультат();
			КонецЕсли;
			Прервать;
		КонецЦикла;	
	КонецЦикла;	
КонецПроцедуры	

//Выполняет необходимые действия связанные с отладкой
//Параметры:
//	Нет.
Процедура ИницилизацияВозможнойОтладки()
	Если ВладелецФормы.МодальныйРежим Тогда 
		//это режим отладки 
		ЭлементыФормы.КартинкаОтладки.Видимость=Истина;
		НоваяСтрока=ДобавитьЗапросВДерево(ЗапросОтладки,ДеревоЗапросов,ЗаголовокЗапросаОтладки);
		ЭлементыФормы.ДеревоЗапросов.ТекущаяСтрока=НоваяСтрока;
		Сигнал();
	КонецЕсли;	
КонецПроцедуры

//Загружает переданную таблицу в результат запроса для последующей групповой обработки
//Параметры:
//	Нет. Поскольку вызывается через обработчик ожидания	
Процедура вЗагрузитьТаблицуДляОбработки()
	вПодготовитьРезультатВыполнения(РезультатЗапроса);
	ЭлементыФормы.ПанельТекстаЗапроса.ТекущаяСтраница=ЭлементыФормы.ПанельТекстаЗапроса.Страницы["ОбработкаРезультата"];
КонецПроцедуры

//Заполняем строку состоаяния
//Параметры:
//	Нет.
Процедура вЗаполнитьСтрокуСостояния()
	УстановитьСтрокуСостояния(ЭтаФорма);
КонецПроцедуры

	

///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ СМЕНЫ СТРАНИЦЫ

//При семен страницы пытаемся вывести результат полученный заранее
//Параметры:
//	Элемент			-<ЭлементФормы>. Текущий элемент на котором располагается страница
//	ТекущаяСтраница -<ТекущаяСтроканица>
Процедура ПанельРезультатаПриСменеСтраницы(Элемент, ТекущаяСтраница)
	вЗагрузитьРезультат();
КонецПроцедуры 

//При семен страницы пытаемся блокируем некотрые кнопки или пытаемся загрузить выбранные обработки
//Параметры:
//	Элемент			-<ЭлементФормы>. Текущий элемент на котором располагается страница
//	ТекущаяСтраница -<ТекущаяСтроканица>
Процедура ПанельТекстаЗапросаПриСменеСтраницы(Элемент, ТекущаяСтраница)
	ТекущаяСтраницаДерева=Неопределено;
	
	//востанавливаем страницу если до этого были на 3 странице  а то всегда будет отображатся структура 
	//при переходе с 3 закладки на 0,1 или 2
	Если Не СтраницаПанелиЗапросов=Неопределено Тогда
		ЭлементыФормы.ПанельЗапросОбработки.ТекущаяСтраница=СтраницаПанелиЗапросов; 
	КонецЕсли;
	//окночание изменений Кудяков Г.А.  8 августа 2007 г. 10:48:01 }
	
	//обрабатываем страницы 
	Если ТекущаяСтраница<=1 Тогда
		СтраницаПанелиЗапросов										= Неопределено;
		//0 и 1 первая строница во многом схожи проставим для них
		ВидимостьПометок											= Ложь;
        ЭлементыФормы.КоманднаяПанель1.Кнопки.Параметры.Доступность	= Истина;
		ВидимостьКорзины											= Ложь;
	ИначеЕсли ТекущаяСтраница=2 Тогда
		СтраницаПанелиЗапросов										= Неопределено;
		ВидимостьПометок											= Ложь;
		ЭлементыФормы.КоманднаяПанель1.Кнопки.Параметры.Доступность	= Истина;
		ВидимостьКорзины											= Ложь;
		//это серверный режим проверим версию
	ИначеЕсли ТекущаяСтраница=3 Тогда
		//запоминаем 
		СтраницаПанелиЗапросов							= ЭлементыФормы.ПанельЗапросОбработки.ТекущаяСтраница; 
		ТекущаяСтраницаДерева							= ЭлементыФормы.ПанельЗапросОбработки.Страницы.СтраницаОбработки;
		ВидимостьПометок											= Истина;
		ЭлементыФормы.КоманднаяПанель1.Кнопки.Параметры.Доступность	= Истина;
		//и работем только с таблицей результата сводная таблица нам не к чему
		ЭлементыФормы.ПанельРезультата.ТекущаяСтраница 	= ЭлементыФормы.ПанельРезультата.Страницы.Результат;
		//покажем дерево что бы было понятно что и откуда
		Если Не ЭлементыФормы.КоманднаяПанель1.Кнопки.ДеревоЗапросов.Пометка Тогда
			СкрытьОтобразитьДерево(ЭлементыФормы.КоманднаяПанель1.Кнопки.ДеревоЗапросов);
		КонецЕсли;
		ВидимостьКорзины											= Истина;
		ПроверитьКлюч();
	КонецЕсли;
	ЭлементыФормы.Корзина.Видимость												= ВидимостьКорзины;
	ЭлементыФормы.ПанельЗапросОбработки.Страницы.СтраницаОбработки.Видимость	= ВидимостьПометок;
	Если Не ТекущаяСтраницаДерева=Неопределено Тогда
		ЭлементыФормы.ПанельЗапросОбработки.ТекущаяСтраница			= ТекущаяСтраницаДерева;
	КонецЕсли;	
	//теперь флажки в таблице результата
	СлужебнаяКолонка=ЭлементыФормы.ТаблицаРезультата.Колонки.Найти("Пометка_Ei");
	Если Не СлужебнаяКолонка=Неопределено Тогда
		СлужебнаяКолонка.Видимость = ВидимостьПометок;
	КонецЕсли;
	ЭлементыФормы.ПанельЗапросОбработки.ОтображениеЗакладок=?(ВидимостьПометок,ОтображениеЗакладок.НеИспользовать,ОтображениеЗакладок.СверхуСПрокруткой);
	Для Каждого Кнопка ИЗ ЭлементыФормы.КонтМеню.Кнопки.МенюРезультататЗапроса.Кнопки.Флажки.Кнопки Цикл
		Кнопка.Доступность=ВидимостьПометок;
	КонецЦикла;
	//меняем картинку на кнопке выполнить, тем самым показаы что она контекстно зависима
	Картинка=ЭлементыФормы.КонтМеню.Кнопки[ЭлементыФормы.ПанельТекстаЗапроса.ТекущаяСтраница.Имя].Кнопки.Выполнить.Картинка;
	ЭлементыФормы.КоманднаяПанель1.Кнопки.ВыполнитьЗапрос.Картинка=Картинка;
	ВыбранныеОбработкиПриПолученииДанных(Неопределено,Неопределено);
КонецПроцедуры

//Подгружаем настройки построителя отчета, и СКД
//Параметры:
//	Элемент			-<ЭлементФормы>. Текущий элемент на котором располагается страница
//	ТекущаяСтраница -<ТекущаяСтроканица>
Процедура ПанельЗапросПриСменеСтраницы(Элемент, ТекущаяСтраница)
	вСохранитьЗапросТекущейСтроки();
КонецПроцедуры

//Обработчик события при смене страницы
//
Процедура ПанельЗапросОбработкиПриСменеСтраницы(Элемент, ТекущаяСтраница)
	Если ТекущаяСтраница=1 Тогда
		Если ДоступныеОбработки.Строки.Количество()=0 Тогда
			вВыполнитьПодготовительныеДействияГрупповыхОбработок();
			вИнициализацияДереваОбработок(ДеревоЗапросов.Строки[0][7]);
			вЗагрузитьГрупповыеОбработки(ДоступныеОбработки);
		КонецЕсли;
 	КонецЕсли;	
КонецПроцедуры

//Скрываем колонки и устанавливаем время в заголовке
//
Процедура ПанельМонитораПриСменеСтраницы(Элемент, ТекущаяСтраница)
	//проверяем весрию и в зависимости от его типа скрываем колонки 
	Если ТекущаяСтраница=1 Тогда
		Для каждого Колонка из ЭлементыФормы.Монитор.Колонки Цикл
			Если Найти(Колонка.ПодсказкаВШапке,"SQL")>0 и Колонка.Видимость Тогда	
				Колонка.Видимость=ПараметрыОкружения.СерверныйРежим;
			КонецЕсли;	
		КонецЦикла;
		//сформируем время
		Если Не ПустаяСтрока(ЭлементыФормы.Монитор.Колонки["Время"].ТекстПодвала) Тогда
			ЭлементыФормы.Монитор.Колонки["Объект"].ТекстПодвала="~"+вФорматироватьВремя(Число(ЭлементыФормы.Монитор.Колонки["Время"].ТекстПодвала));
		КонецЕСли;
	КонецЕсли;
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ КОМАНДНОЙ ПАНЕЛИ

// Обработчик нажатия кнопки командной панели "Новый список запросов"
//
Процедура НовыйФайл()
	Если вСохранитьЗапросыВФайл(Истина) Тогда
		вСоздатьНовыйФайлЗапросов();
	КонецЕсли;
    Модифицированность=Ложь;
КонецПроцедуры // НовыйФайл()

// Обработчик нажатия кнопки командной панели "Открыть файл запросов"
//
Процедура ОткрытьФайл()
	Если ЭлементыФормы.ПанельТекстаЗапроса.ТекущаяСтраница.Имя="ОбработкаРезультата" Тогда 
		вЗагрузитьДоступныеОбработки();	
	Иначе	
		Если вСохранитьЗапросыВФайл(Истина) Тогда
			Длг = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
			Длг.ПолноеИмяФайла = мИмяФайла;
			Длг.Каталог = мИмяПути;
			Длг.Заголовок = "Выберите файл со списком запросов";
			Длг.Фильтр = "Файлы запросов (*.sel)|*.sel|Все файлы (*.*)|*.*";
			Длг.Расширение = "sel";
			Если Длг.Выбрать() Тогда
				мИмяФайла = Длг.ПолноеИмяФайла;
				мИмяПути = Длг.Каталог;
				вЗагрузитьЗапросыИзФайла();
				мТекущаяСтрока = НеОпределено;
				вСохранитьИмяФайла();
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;	
КонецПроцедуры // ОткрытьФайл()

// Обработчик нажатия кнопки командной панели "Сохранить"
//
Процедура Сохранить()
   	вСохранитьЗапросыВФайл();
КонецПроцедуры // Сохранить()

// Обработчик нажатия кнопки командной панели "Сохранить как"
//
Процедура СохранитьКак()
	вСохранитьЗапросыВФайл(Ложь, Истина);
КонецПроцедуры // СохранитьКак()

//Обработчик нажатия кнопки командной панели "Выполнить"
//в зависмисти от текущей страница будет выполненна, та или иная функция на выполнение 
//Параметры:
//	ОбъектТрассировки	-<Форма>. Экземпляр тарссировки. Трассировку необходимо остановить сразу после выполнения запроса, (до получение результатов)
Процедура ВыполнитьВКонтексте(ОбъектТрассировки=Неопределено)
	Если Не ТипЗнч(ОбъектТрассировки)=Тип("Форма") Тогда 
		ОбъектТрассировки=Неопределено;	
	КонецЕсли;
	
	Если ЭлементыФормы.ПанельТекстаЗапроса.ТекущаяСтраница.Имя		= "Предприятие" 		Тогда
		
		ВыполнитьЗапрос(ЭлементыФормы.ПанельЗапрос.ТекущаяСтраница.Имя,,,Ложь,ОбъектТрассировки);
		
	ИначеЕсли ЭлементыФормы.ПанельТекстаЗапроса.ТекущаяСтраница.Имя	= "Язык" 				Тогда
		
		ВыполнитьВстроенныйЯзык(ОбъектТрассировки);
		
	ИначеЕсли ЭлементыФормы.ПанельТекстаЗапроса.ТекущаяСтраница.Имя	= "ОбработкаРезультата" Тогда
		
		ВыполнитьОбработкаРезультата(Неопределено);
		
	Иначе
		
		ВыполнитьSQLЗапрос();
		
	КонецЕсли; 	
КонецПроцедуры

//Выполяняет запрос или построитель запроса 1С, Если выделен верно тогда выделенную часть
//В случае фонового выпонения возврашает структуру параметров которая будет отпрвлена на сервер
//Параметры:
//	ИмяСтраницы			-<Строка>. Для определения построитель это или запрос.
//  ПрефиксЗапроса		-<Строка>. Для выполненения запроса толь к истонику данных. Например "Выбрать * ИЗ"+ВыделеннаяЧасть.
//	ПроверятьСелект		-<Булево>. Провереять или нет перед выполенением запроса. Наличие инструкции SELECT
//  Пакет				-<Булево>. Признак выполнения пакета с последующей возможностью. выбрать один из нескольких результатов выполнения пакетов запроса.
//	ОбъектТрассировки	-<Форма>. Экземпляр тарссировки.
//	ФоновоеВыполнение   -<Булево>. Признак выполнения в фоне
//
Функция ВыполнитьЗапрос(ИмяСтраницы = "",ПрефиксЗапроса="",
									ПроверятьСелект=Истина,
									Пакет=Истина,
									ОбъектТрассировки=Неопределено,
									ФоновоеВыполнение=Ложь)
	Если ИмяСтраницы = "ПостроительЗапроса" Тогда
		СтрокаСообщения="Выполнение построителя отчета";
	ИначеЕсли ИмяСтраницы = "СКД" Тогда
		СтрокаСообщения="Выполнение СКД";
	Иначе
		СтрокаСообщения="Выполнение запроса";
	КонецЕсли;	
	СобытиеОтладки=Формы.Отладка.ДобавитьСобытие(СтрокаСообщения+?(ФоновоеВыполнение," в фоновом режиме",""),"Конструктор");
	Попытка								
		ПараметрыЗапроса=вПолучитьСтруктуруПараметров();
		Если ИмяСтраницы = "ПостроительЗапроса" Тогда
			//Работаем через построиетль
			Для каждого Параметр из ПараметрыЗапроса Цикл
				ПостроительЗапроса.Параметры.Вставить(Параметр.Ключ,Параметр.Значение);			
			КонецЦикла;	
			Если ФоновоеВыполнение Тогда
				СтруктураФоновогоПроцесса=Новый Структура();
				СтруктураФоновогоПроцесса.Вставить("ПостроительОтчета",ПостроительЗапроса);
				СтруктураФоновогоПроцесса.Вставить("ПараметрыЗапроса",ПараметрыЗапроса);
				СтруктураФоновогоПроцесса.Вставить("Настройки",ПостроительЗапроса.ПолучитьНастройки());
				Формы.Отладка.ЗавершитьСобытие(СобытиеОтладки);
				Возврат СтруктураФоновогоПроцесса;
			КонецЕСли;	
				ДатаДо=ПолучитьТекущееВремя();
					ПостроительЗапроса.Выполнить(); 
					мТекущаяСтрока.РезультатЗапроса = ПостроительЗапроса.Результат;
				ДатаКонцаВыполнения = ПолучитьТекущееВремя(Ложь);
				Если ТипЗнч(ОбъектТрассировки)=Тип("Форма") Тогда
					ОбъектТрассировки.ОтключитьТехнологическиеЖурналы();		
				КонецЕсли;	
				вОбнулитьФлагиВыводаРезультатов();			
				вЗагрузитьРезультат();
				ДатаКонца =ПолучитьТекущееВремя(Ложь);
		ИначеЕсли ИмяСтраницы = "СКД" Тогда	
			//Используем компоновку 
			СКД=мТекущаяСтрока.СхемаКомпоновкиДанных;
			Если СКД=Неопределено Тогда
				Формы.Отладка.ЗавершитьСобытие(СобытиеОтладки);
				Возврат Неопределено;	
			КонецЕСли;
			ДатаДо=ПолучитьТекущееВремя();

			//Проверка параметров
			ИсполняемыеНастройки = КомпоновщикНастроек.Настройки;
			Для Каждого ПараметрКомпановки из ИсполняемыеНастройки.ПараметрыДанных.Элементы Цикл
				Использование=ПараметрыЗапроса.Свойство(Строка(ПараметрКомпановки.Параметр));
				Если Использование Тогда
					ЗначениеПараметра=ПараметрыЗапроса[Строка(ПараметрКомпановки.Параметр)];
					ПараметрКомпановки.Значение=ЗначениеПараметра;
				Иначе
					Если Не ПараметрКомпановки.Использование Тогда
						Продолжить;
					КонецЕсли;
					Параметры();
					Формы.Отладка.ЗавершитьСобытие(СобытиеОтладки,"Информация","Не установлен параметр <"+Строка(ПараметрКомпановки.Параметр)+">");
					Возврат Неопределено;
				КонецЕсли;
			КонецЦикла;	
			
			//Компановка макета 
			КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
			Если ЭлементыФормы.ПанельРезультата.ТекущаяСтраница = ЭлементыФормы.ПанельРезультата.Страницы[1] Тогда
				ТипГенератора = Тип("ГенераторМакетаКомпоновкиДанных");
				стрСообщение  = "Генерация макета";
			Иначе
				ТипГенератора = Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений");
				стрСообщение  = "Генерация макета коллекции значений";
			КонецЕсли;
			СобытиеОтладки_Макет=Формы.Отладка.ДобавитьСобытие(стрСообщение,"Конструктор",СобытиеОтладки);
			Попытка								
				МакетКомпоновкиДанных = КомпоновщикМакета.Выполнить(СКД, ИсполняемыеНастройки,,,ТипГенератора);
			Исключение
				Формы.Отладка.ЗавершитьСобытие(СобытиеОтладки_Макет,"ОченьВажное",ИнформацияОбОшибке());
				ВызватьИсключение "Не удалось скомпановать макет, возможно настройки не могут быть выведенные в текущий тип макета (измените текущую закладку панели результата)";
			КонецПопытки;	
			Формы.Отладка.ЗавершитьСобытие(СобытиеОтладки_Макет);

			//Процессор
			СобытиеОтладки_Процессор=Формы.Отладка.ДобавитьСобытие("Инициализация процессора компановки","Конструктор",СобытиеОтладки);
			Попытка
				ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
				ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновкиДанных,,,Истина);
			Исключение
				Формы.Отладка.ЗавершитьСобытие(СобытиеОтладки_Процессор,"ОченьВажное",ИнформацияОбОшибке());
				ВызватьИсключение "Не удалось выполнить инциализацию процессора компановки данных";
			КонецПопытки;
			Формы.Отладка.ЗавершитьСобытие(СобытиеОтладки_Процессор);
			
			мТекущаяСтрока.РезультатЗапроса	=	Новый Структура("Процессор,ТипГенератора",ПроцессорКомпоновкиДанных,ТипГенератора);
			вОбнулитьФлагиВыводаРезультатов();			
			вЗагрузитьРезультат();
			ДатаКонцаВыполнения =ПолучитьТекущееВремя(Ложь);
		Иначе
			вСохранитьЗапросТекущейСтроки();
			ОбъектЗапрос = Новый Запрос;
			ОбъектЗапрос.Текст = СтрЗаменить(вПолучитьТекстТекстовогоПоля(Истина,ЭлементыФормы.ТекстЗапроса,ПроверятьСелект), "|", "");
			
			Если ПустаяСтрока(ОбъектЗапрос.Текст) Тогда
				Формы.Отладка.ЗавершитьСобытие(СобытиеОтладки,"ОченьВажное","Не заполнен текст запроса!");
				Возврат Неопределено;
			КонецЕсли;
			Для каждого Свойство из ПараметрыЗапроса Цикл
				ОбъектЗапрос.УстановитьПараметр(Свойство.Ключ,Свойство.Значение);
			КонецЦикла;
			//допоняем префикс и отчистим от данных построителя если некотороые таблице не обязательны то может и не выполнится.
			ОбъектЗапрос.Текст=ПрефиксЗапроса+вОчиститьЗапросОтДанныхПостроителя(ОбъектЗапрос.Текст);
			//ОбъектЗапрос.Текст=ПрефиксЗапроса+ОбъектЗапрос.Текст;
			ОбъектЗапрос.МенеджерВременныхТаблиц=МенеджерВременныхТаблиц;
			ДатаНачала = ТекущаяДата();
			Если ФоновоеВыполнение Тогда
				СтруктураФоновогоПроцесса=Новый Структура();
				СтруктураФоновогоПроцесса.Вставить("Запрос",ОбъектЗапрос.Текст);
				СтруктураФоновогоПроцесса.Вставить("ПараметрыЗапроса",ПараметрыЗапроса);
				Формы.Отладка.ЗавершитьСобытие(СобытиеОтладки);
				Возврат СтруктураФоновогоПроцесса;
			КонецЕСли;	
			ДатаДо=ПолучитьТекущееВремя();
			Если Пакет Тогда
				мРезЗапросаМассив = вВыполнитьЗапрос(ОбъектЗапрос,Истина);
				НомерПакета=мРезЗапросаМассив.Количество()-1;
				Если ВвестиЗначение(НомерПакета,"Выберите пакет результат, которого необходимо вернуть (по умолчанию последний)") Тогда
					мТекущаяСтрока.РезультатЗапроса=мРезЗапросаМассив[НомерПакета];
				КонецЕсли;	
			Иначе
				мТекущаяСтрока.РезультатЗапроса = вВыполнитьЗапрос(ОбъектЗапрос);
			КонецЕсли;	
			ДатаКонцаВыполнения = ПолучитьТекущееВремя(Ложь);
			Если Не ОбъектТрассировки=Неопределено Тогда
				ОбъектТрассировки.ОтключитьТехнологическиеЖурналы();		
			КонецЕсли;	
			вОбнулитьФлагиВыводаРезультатов();			
			вЗагрузитьРезультат();
			ДатаКонца = ТекущаяДата();
		КонецЕсли;	
		вИзменитьВремяВыполнения(0,ДатаКонцаВыполнения-ДатаДо);
		Если ДатаКонцаВыполнения-ДатаДо>15 Тогда 
			Сигнал();
		КонецЕсли;
	Исключение
		Если Найти(ОписаниеОшибки(),"Не задано значение параметра")>0 Тогда
			Параметры();
			Формы.Отладка.ЗавершитьСобытие(СобытиеОтладки,"Информация","Не все параметры запроса продекларированы, выполните заполнение по тексту запроса");
			Возврат Неопределено;
		ИначеЕсли Найти(ОписаниеОшибки(),"Временная таблица уже существует")>0 Тогда
			Если Вопрос("Создаваемая временная таблица уже существует.
				|Очистить менеджер временных таблиц?",РежимДиалогаВопрос.ПовторитьОтмена)=КодВозвратаДиалога.Повторить Тогда
				МенеджерВременныхТаблиц=Новый МенеджерВременныхТаблиц;
				ВыполнитьЗапрос(ИмяСтраницы,ПрефиксЗапроса,ПроверятьСелект,Пакет,ОбъектТрассировки,ФоновоеВыполнение);
			Иначе
				Формы.Отладка.ЗавершитьСобытие(СобытиеОтладки);
				Возврат Неопределено;
			КонецЕсли;	
		Иначе
			Формы.Отладка.ЗавершитьСобытие(СобытиеОтладки,"ОченьВажное",ИнформацияОбОшибке());
			Возврат Неопределено;
		КонецЕсли;	
	КонецПопытки;
    Формы.Отладка.ЗавершитьСобытие(СобытиеОтладки);
КонецФункции // ВыполнитьЗапрос()

//Выполняет SQL запрос, и пытается вернуть последний результат.Если выделен тогда выделенную часть запроса
//Праметры:
//	ФоновоеВыполнение   -<Булево>. Признак выполнения в фоне
//
Функция ВыполнитьSQLЗапрос(ФоновоеВыполнение=Ложь)
	СобытиеОтладки=Формы.Отладка.ДобавитьСобытие("Выполнение запроса к источнику данных"+?(ФоновоеВыполнение," в фоновом режиме",""),"Конструктор");
	Попытка								
		Если Не ОбработкаСоединения()=Истина Тогда
			Возврат Неопределено;
		КонецЕсли;
		ТекстЗапроса = СтрЗаменить(вПолучитьТекстТекстовогоПоля(Истина,ЭлементыФормы.ТекстЗапросаSQL), "|", "");
		ПараметрыЗапроса=вПолучитьСтруктуруПараметров();
		ДатаДо=ПолучитьТекущееВремя();
		Если Не ЭлементыФормы.ПанельРезультата.ТекущаяСтраница.Имя="Grid" Тогда
			Если ФоновоеВыполнение Тогда
				СтруктураФоновогоПроцесса=Новый Структура();
				СтруктураФоновогоПроцесса.Вставить("SQLЗапрос",ТекстЗапроса);
				СтруктураФоновогоПроцесса.Вставить("СтрокаПодключения",СтрокаПодключения);
				Возврат СтруктураФоновогоПроцесса;
			КонецЕсли;	
			RecSet=ВыполнитьЗапросСУБД(ТекстЗапроса,ПараметрыЗапроса,,Истина);
			ДатаПосле=ПолучитьТекущееВремя(Ложь);
			вОбнулитьФлагиВыводаРезультатов();			
			Результат=RecSetВТаблицу(RecSet,,Истина);
			Если ТипЗнч(Результат)=Тип("РезультатЗапроса") Тогда
				мТекущаяСтрока.РезультатЗапроса=Результат;	
			КонецЕсли;	
		    вЗагрузитьРезультат(Результат);
		Иначе
			//выпонение Grid
			ЭлементыФормы.Grid.Команда = ТекстЗапроса;
			ЭлементыФормы.Grid.СтрокаСоединения = СтрокаПодключения;
			ЭлементыФормы.Grid.Загрузить();
	        ДатаПосле=ПолучитьТекущееВремя(Ложь);
		КонецЕсли;	
		ДатаКонца=ПолучитьТекущееВремя(Ложь);
		вИзменитьВремяВыполнения(1,ДатаПосле-ДатаДо,Окр(ДатаКонца-ДатаПосле,1));
		вИзменеиеСпособаВыгрузки(1);
	Исключение
		Формы.Отладка.ЗавершитьСобытие(СобытиеОтладки,"ОченьВажное",ИнформацияОбОшибке().Описание);
		ВызватьИсключение  "Ошибка выполнения запроса";
	КонецПопытки;
	Формы.Отладка.ЗавершитьСобытие(СобытиеОтладки);
	Возврат Результат;
КонецФункции

//Выполняет SQL запрос через типизацию по временной таблице
//
Процедура ВыполнитьSQLЗапросЧерезВТ(ТекстЗапроса,ВернутьДанныеИзВТ=Ложь)
	СобытиеОтладки=Формы.Отладка.ДобавитьСобытие("Выполнение прямого запроса через временные таблицы","Конструктор");
	Попытка								
		Если Найти(Нрег(ТекстЗапроса),"tempdb..##tt")=0 Тогда
			Предупреждение("Не найденно не одного обращения к временной таблице (tempdb..##tt). 
			|Испольлзуйте пункт меню ""INSERT INTO tempdb..##tt  [....]"" 
			|или передайте необходимы данные в таблицу tempdb..##tt самостоятельно.");
			Формы.Отладка.ЗавершитьСобытие(СобытиеОтладки);
			Возврат;
		КонецЕсли;	
		Если Не ОбработкаСоединения()
			ИЛИ ТипыВТ.Количество()=0 Тогда
			Формы.Отладка.ЗавершитьСобытие(СобытиеОтладки);
			Возврат;
		КонецЕсли;
		СобытиеОтладки_Описание=Формы.Отладка.ДобавитьСобытие("Описание временной таблицы","Конструктор",СобытиеОтладки);
		Попытка	
			Запрос = Новый Запрос("ВЫБРАТЬ
			               |	ТЗ_Null.*
			               |ПОМЕСТИТЬ ТЗ
			               |ИЗ
			               |	&ТЗ КАК ТЗ_Null");
			МенеджерВТ				 		= Новый МенеджерВременныхТаблиц;
			Запрос.МенеджерВременныхТаблиц 	= МенеджерВТ;
			ТЗ=Новый ТаблицаЗначений;
			Для каждого КолонкаВТ из ТипыВТ Цикл
				ТЗ.Колонки.Добавить(КолонкаВТ.Имя,КолонкаВТ.ОписаниеТипов);
			КонецЦикла;	
			Запрос.УстановитьПараметр("ТЗ", ТЗ);
		Исключение
			Формы.Отладка.ЗавершитьСобытие(СобытиеОтладки_Описание,"ОченьВажное",ИнформацияОбОшибке().Описание);
			ВызватьИсключение  "Ошибка описания";
		КонецПопытки;
		Формы.Отладка.ЗавершитьСобытие(СобытиеОтладки_Описание);
        СобытиеОтладки_Изменение=Формы.Отладка.ДобавитьСобытие("Изменение имени временной таблицы","SQL",СобытиеОтладки);
		~ВТ:
		Попытка	
			ДатаДо=ПолучитьТекущееВремя();
			//Зафиксируем время
			ДатаОтсчета=RecSetПолучитьЗапись("Select GETDATE() as CDate");
			//создаем временную таблицу 
			вВыполнитьЗапрос(Запрос);
			//переименовывем временную таблицу чтобы она была доступна из другой сессии
			ТекстЗапросаTSQL="DECLARE @table_name varchar(100)
				|--Перименовывем таблицу
				|set @table_name = 'temp_'+Left(cast(newid() as varchar(36)),8)
				|Select @table_name as table_name
				|update tempdb..sysobjects
				|set name = @table_name
				|where id in (SELECT top 1
				|id
				|FROM
				|tempdb..sysobjects
				|WHERE
				|Len(Name)=128 and  info >= "+ТЗ.Колонки.Количество()+" and
				|CRDate >= "+вКонвертироватьДату(ДатаОтсчета)+")";
			 
				RecSetRead=ВыполнитьЗапросСУБД(ТекстЗапросаTSQL);
				RecSetRead.MoveFirst();
				ИмяВТ=RecSetRead.Fields(0).Value;
		Исключение
			Если Найти(ОписаниеОшибки(),"Ad hoc updates to system catalogs are not enabled")>0 Тогда
				Состояние("Настройка параметров сервера");
				НастройкиSQL="execute sp_configure 'allow updates', 1
								|reconfigure with override
								|execute sp_configure";
				//нет прав редактировать системные имена
				ВыполнитьЗапросСУБД(НастройкиSQL);
				Перейти ~ВТ; //пробуем еще раз
			Иначе
				Формы.Отладка.ЗавершитьСобытие(СобытиеОтладки_Изменение,"ОченьВажное",ИнформацияОбОшибке().Описание);
				ВызватьИсключение  "Ошибка изменения временной таблицы";
			КонецЕсли;	
		КонецПопытки;
		Формы.Отладка.ЗавершитьСобытие(СобытиеОтладки_Изменение);
        СобытиеОтладки_Выполнение=Формы.Отладка.ДобавитьСобытие("Выполнение запроса (помещение данных во временную таблицу tempdb.."+ИмяВТ+")","SQL",СобытиеОтладки);
		Попытка	
			RecSet=ВыполнитьЗапросСУБД(СтрЗаменить(ТекстЗапроса,"tempdb..##tt","tempdb.."+ИмяВТ));
		Исключение
			//обработем ошибки .. сдесь могут быть следующие варианты
			Если Найти(ИнформацияОбОшибке().Описание,"Insert Error: Column name or number of supplied values does not match table definition")>0 Тогда
				СтрокаОшибки="Состав колонок запроса не соответсвует задекларированным колонкам временной таблицы";
				ВыполнитьЗапросСУБД("DROP TABLE tempdb.."+ИмяВТ);
			ИначеЕсли Найти(ИнформацияОбОшибке().Описание,"Invalid object name 'tempdb..")>0 Тогда
				СтрокаОшибки="Не удалось определить временную таблицу в tempdb";
			Иначе
				СтрокаОшибки="Ошибка выполнения запроса";
			КонецЕсли;
			Формы.Отладка.ЗавершитьСобытие(СобытиеОтладки_Выполнение,"ОченьВажное",ИнформацияОбОшибке().Описание);
			ВызватьИсключение СтрокаОшибки;
		КонецПопытки;
		Формы.Отладка.ЗавершитьСобытие(СобытиеОтладки_Выполнение);
		
		Если Не ВернутьДанныеИзВТ ТОгда
			//возвращаем результат
			Запрос.Текст = "ВЫБРАТЬ
						   |	ТЗ.*
						   |ИЗ
						   |	ТЗ КАК ТЗ";
			Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
			Состояние("Выборка данных из временной таблицы");
			мТекущаяСтрока.РезультатЗапроса = вВыполнитьЗапрос(Запрос);
		КонецЕсли;
		ДатаПосле = ПолучитьТекущееВремя(Ложь);
	    вОбнулитьФлагиВыводаРезультатов();
		вЗагрузитьРезультат(?(ВернутьДанныеИзВТ,RecSetВТаблицу(RecSet,Ложь),неопределено));
		ДатаКонца = ПолучитьТекущееВремя(Ложь);
		вИзменитьВремяВыполнения(1,ДатаПосле-ДатаДо,Окр(ДатаКонца-ДатаПосле,1));
		ВыполнитьЗапросСУБД("DROP TABLE tempdb.."+ИмяВТ);
		Если ДатаПосле-ДатаДо>15 Тогда 
			Сигнал();
		КонецЕсли;
	Исключение
		Формы.Отладка.ЗавершитьСобытие(СобытиеОтладки,"ОченьВажное",ИнформацияОбОшибке().Описание);
		ВызватьИсключение  "Ошибка выполнения запроса через временные таблицы";
	КонецПопытки;
	Формы.Отладка.ЗавершитьСобытие(СобытиеОтладки);
КонецПРоцедуры	

//Выполняет выражение на встроенном языке. Если выделена часть, тогда только его
//Параметры:
//	ОбъектТрассировки		- <Форма>.Экземпляр тарссировки.
//	ФоновоеВыполнение   	- <Булево>. Признак выполнения в фоне
//  ВозможностьОтладки 	- <Булево>. Признак выполненя как внешней формы.
Функция ВыполнитьВстроенныйЯзык(ОбъектТрассировки=Неопределено,ФоновоеВыполнение=Ложь,ВозможностьОтладки=Ложь)
	СобытиеОтладки=Формы.Отладка.ДобавитьСобытие("Выполнение выражения на втроенном языке"+?(ФоновоеВыполнение," в фоновом режиме",""),"Конструктор");
	Попытка
		ТекстАлгоритма=вПолучитьТекстТекстовогоПоля(Истина,ЭлементыФормы.ТекстМодуля);
		Если ПустаяСтрока(ТекстАлгоритма) Тогда
			Возврат Неопределено;
		КонецЕсли;	
		Параметры=вПолучитьСтруктуруПараметров();
		Если ФоновоеВыполнение Тогда
			СтруктураФоновогоПроцесса=Новый Структура();
			СтруктураФоновогоПроцесса.Вставить("ВстроенныйЯзык",ТекстАлгоритма);
			СтруктураФоновогоПроцесса.Вставить("Параметры",Параметры);
			ЭмуляцияФормы=Новый Структура();
			ЭмуляцияФормы.Вставить("РезультатЗапроса",РезультатЗапроса);
			СтруктураФоновогоПроцесса.Вставить("ЭтаФорма",ЭмуляцияФормы);
			Формы.Отладка.ЗавершитьСобытие(СобытиеОтладки);
			Возврат СтруктураФоновогоПроцесса;
		КонецЕСли;	
		ДатаДо=ПолучитьТекущееВремя();
		Результат=вВычислитьЗначение(Новый Структура("Выражение",ТекстАлгоритма),Параметры,ЭтаФорма);
		ДатаКонцаВыполнения = ПолучитьТекущееВремя(Ложь);
		Если ТипЗнч(ОбъектТрассировки)=Тип("Форма") Тогда
			ОбъектТрассировки.ОтключитьТехнологическиеЖурналы();		
		КонецЕсли;	
		вПодготовитьРезультатВыполнения(Результат);	
		ДатаКонца = ТекущаяДата();
		вИзменитьВремяВыполнения(2,ДатаКонцаВыполнения-ДатаДо);
	Исключение
		Формы.Отладка.ЗавершитьСобытие(СобытиеОтладки,"ОченьВажное",ИнформацияОбОшибке().Описание);
		//ВызватьИсключение "Не удалось выполнить выражение на встроенном языке";
		Возврат Неопределено;
	КонецПопытки;
	Формы.Отладка.ЗавершитьСобытие(СобытиеОтладки);		
КонецФункции

//Выполняет обработку результата
//Параметры:
//	Нет.
Процедура ВыполнитьОбработкаРезультата(Кнопка)
	ТекущийЭлемент=ЭлементыФормы.ТаблицаРезультата;
	вСформироватьТаблицуВыбранныхОбработок();
	ВыполнитьОбработки();
КонецПроцедуры

//Выполняет групповые операции над результатами запроса.
//Параметры:
//	Нет.
Процедура ВыполнитьОбработки() Экспорт
	зВыполнитьОбработки(ЭтаФорма);	
КонецПроцедуры //ВыполнитьОбработки()

// Обработчик нажатия кнопки командной панели "Параметры"
//
Процедура Параметры()
	Если мФормаПараметров.Открыта() = Истина Тогда
		мФормаПараметров.Активизировать();
	Иначе
		мФормаПараметров.Открыть();
	КонецЕсли;
КонецПроцедуры // Параметры()

//Выполняет трассировку выполняемых действия в сосответсвии с контекстом
//
Процедура Трассировка(Кнопка)
	Если ПараметрыОкружения.СерверныйРежим Тогда
		//подключаемся чтобы определить параметры БД
		Если Не ОбработкаСоединения()=Истина Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;	
	ОбъектТрассировки=ПолучитьФорму("Трассировка",ЭтаФорма,мТекущаяСтрока.Запрос);
	ОбъектТрассировки.ТекущаяСтрокаДереваЗапросов=мТекущаяСтрока;
	ОбъектТрассировки.Заголовок="Трассировка <"+мТекущаяСтрока.Запрос+">";
	Если ОбъектТрассировки.ВключитьТехнологическиеЖурналы() Тогда
		ВыполнитьВКонтексте(ОбъектТрассировки);
		ОбъектТрассировки.Открыть();
	Иначе
		ОбъектТрассировки.ОтключитьТехнологическиеЖурналы();
	КонецЕсли;	
КонецПроцедуры	

//Выполняет выражение или запрос в фоне на сервере
//Параметры:
//	Нет.
Процедура ВыполнитьВФоне(Кнопка)
	//проверка на прикрепленную область результата
	Если ЭлементыФормы.КонтМеню.Кнопки.МенюРезультататЗапроса.Кнопки.Закрепить.Пометка Тогда
		Если Вопрос("Закреплена область результата. Необходимо снять закрепление что бы получить результаты фонового запроса. Продолжить?", РежимДиалогаВопрос.ОКОтмена) = КодВозвратаДиалога.ОК Тогда
			ЭлементыФормы.КонтМеню.Кнопки.МенюРезультататЗапроса.Кнопки.Закрепить.Пометка=Ложь;
		Иначе
			Возврат;
		КонецЕсли;	
	КонецЕсли;	
		
	Если ЭлементыФормы.ПанельТекстаЗапроса.ТекущаяСтраница.Имя		= "Предприятие" 		Тогда
		
		СтруктураПроцесса=ВыполнитьЗапрос(ЭлементыФормы.ПанельЗапрос.ТекущаяСтраница.Имя,,,Ложь,,Истина);
		
	ИначеЕсли ЭлементыФормы.ПанельТекстаЗапроса.ТекущаяСтраница.Имя	= "Язык" 				Тогда
		
		СтруктураПроцесса=ВыполнитьВстроенныйЯзык(,Истина);
		
	ИначеЕсли ЭлементыФормы.ПанельТекстаЗапроса.ТекущаяСтраница.Имя	= "Sql" Тогда
		
		СтруктураПроцесса=ВыполнитьSQLЗапрос(Истина);
		
	КонецЕсли;
	Если ТипЗнч(СтруктураПроцесса)=Тип("Структура") Тогда
		НовыйПроцесс=ТаблицаФоновыхПроцессов.Добавить();
		НовыйПроцесс.Ключ=мТекущаяСтрока.УникальныйИдентификатор;
		НовыйПроцесс.Завершено=Ложь;
		НовыйПроцесс.ИндексСтраницы=ЭлементыФормы.ПанельТекстаЗапроса.Страницы.Индекс(ЭлементыФормы.ПанельТекстаЗапроса.ТекущаяСтраница);
		НовыйПроцесс.ДатаЗапуска=ТекущаяДата();
		МассивПараметров = Новый Массив();
    	МассивПараметров.Добавить(СтруктураПроцесса);
		Попытка 
			ФоновыеЗадания.Выполнить("МодульРегламентныхЗаданий.ФоноваяФункция", МассивПараметров, НовыйПроцесс.Ключ, "Ei."+мТекущаяСтрока.Запрос);
		Исключение
			ТаблицаФоновыхПроцессов.Удалить(НовыйПроцесс);
			Если Найти(ОписаниеОшибки(),"ФоноваяФункция")>0 Тогда
				//
				Сообщить("В модуле регламентных заданий, не существует процедуры ""ФоноваяФункция"", подробности http://main.1c-ei.ru",СтатусСообщения.Информация);
			КонецЕсли;	
		КонецПопытки;	
	КонецЕсли;	
КонецПроцедуры

//Открывает форму конструктора КД.
//
Процедура ОткрытьКонтрукторСКД(Элемент)
	Если мТекущаяСтрока <> Неопределено Тогда
		РедактируемаяКонструкторомСтрока = мТекущаяСтрока;
		КонструкторСхемы = Новый КонструкторСхемыКомпоновкиДанных;
		Если РедактируемаяКонструкторомСтрока.СхемаКомпоновкиДанных = Неопределено Тогда
			//схема пустая попытаемся поместить в источники данных сразу запрос текущей строки
			РедактируемаяКонструкторомСтрока.СхемаКомпоновкиДанных	= Новый СхемаКомпоновкиДанных;
			Если Не ПустаяСтрока(мТекущаяСтрока.ТекстЗапроса) Тогда
				вЗаполнитьИсточникиДанныхСКД(РедактируемаяКонструкторомСтрока.СхемаКомпоновкиДанных,мТекущаяСтрока,Ложь);
			КонецЕсли;	
		КонецЕсли;
		КонструкторСхемы.УстановитьСхему(РедактируемаяКонструкторомСтрока.СхемаКомпоновкиДанных);
		КонструкторСхемы.Редактировать(ЭтаФорма);
	КонецЕсли;
КонецПроцедуры

//Запроняет настройки построителя на основе текста запроса и уже установленных настроек
//
Процедура ЗаполнитьНастрокиПостроителя(Кнопка)
	Перем КопияПостроителя;
	СобытиеОтладки=Формы.Отладка.ДобавитьСобытие("Создание построителя на основе таблицы значений","Конструктор");
	Попытка								
		//определям есть ли настройки построителя
		БылиНастройки=ПостроительЗапроса.Отбор.Количество()>0 
						ИЛИ  ПостроительЗапроса.УсловноеОформление.Количество()>0
						ИЛИ  ПостроительЗапроса.Порядок.Количество()>0;
		Если БылиНастройки   Тогда
			КопияПостроителя=Новый ПостроительОтчета;
			Если ПустаяСтрока(ПостроительЗапроса.Текст) Тогда
				КопияПостроителя.ИсточникДанных = Новый ОписаниеИсточникаДанных(ПостроительЗапроса.ИсточникДанных.ИсточникДанных);	
			Иначе
				КопияПостроителя.Текст=ПостроительЗапроса.Текст;
			КонецЕсли;
			КопияПостроителя.ЗаполнитьНастройки();
			КопияПостроителя.УстановитьНастройки(ПостроительЗапроса.ПолучитьНастройки());
		КонецЕсли;				

		Если Булево(Число(Кнопка.Пояснение)) Тогда
			//На основе источника данных (из результата)
			вСоздатьПостроительИзТаблицы();
		Иначе	
			ПостроительЗапроса.ИсточникДанных = Неопределено;
			Если ПостроительЗапроса.Текст<>мТекущаяСтрока.ТекстЗапроса Тогда
				ПостроительЗапроса = Новый ПостроительОтчета;
				Если Не ПустаяСтрока(мТекущаяСтрока.ТекстЗапроса) Тогда
					ПостроительЗапроса.Текст = мТекущаяСтрока.ТекстЗапроса;
					Если ПостроительЗапроса.ВыбранныеПоля.Количество()=0 Тогда
						//возьмем настройки из теста запроса.
						ПостроительЗапроса.ЗаполнитьНастройки();	
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;	
		//настройки были пробуем подставить
		Если БылиНастройки Тогда
			вСкопироватьНастройкиПостроителя(ПостроительЗапроса,КопияПостроителя,Новый Структура("ВыбранныеПоля,Отбор,УсловноеОформление,Порядок"));					
		КонецЕсли;
	Исключение
		Формы.Отладка.ЗавершитьСобытие(СобытиеОтладки,"ОченьВажное",ИнформацияОбОшибке().Описание);
		ВызватьИсключение "Не удалось создать построитель";
	КонецПопытки;
	Формы.Отладка.ЗавершитьСобытие(СобытиеОтладки);
КонецПроцедуры

//Очищает настройки построителя
//
Процедура ПостроительОчистить(Кнопка)
	Если Вопрос("Очистить настройки построителя?",РежимДиалогаВопрос.ОКОтмена,20,,"Построитель отчета") = КодВозвратаДиалога.ОК Тогда
		ПостроительЗапроса = Новый ПостроительОтчета;
	КонецЕсли;	
КонецПроцедуры

//Очищает СКД для текущей строки
//
Процедура СКДОчистить(Кнопка)
	Если Вопрос("Очистить СКД?",РежимДиалогаВопрос.ОКОтмена,20,,"Система компановки данных") = КодВозвратаДиалога.ОК Тогда
		мТекущаяСтрока.СхемаКомпоновкиДанных = Неопределено;
		КомпоновщикНастроек.Инициализировать(Неопределено);
		КомпоновщикНастроек.ЗагрузитьНастройки(Новый НастройкиКомпоновкиДанных());
	КонецЕсли;	
КонецПроцедуры


//Обработчик нажатия кнопки командной панели "Действия-Настройки"
//Открывает форму настроек в текущем контексте
Процедура КоманднаяПанельНастройки(Кнопка)
	ОкноНастройки=ПолучитьФорму("Настройка",Этаформа);
	ОкноНастройки.Открыть();
	ОкноНастройки.ЭлементыФормы.ПанельНастройки.ТекущаяСтраница =ОкноНастройки.ЭлементыФормы.ПанельНастройки.Страницы.Найти("КонструкторЗапроса");
	Если  ЭлементыФормы.ПанельТекстаЗапроса.ТекущаяСтраница.Имя="ОбработкаРезультата" Тогда 
		ОкноНастройки.ЭлементыФормы.Трассировка.ТекущаяСтраница =ОкноНастройки.ЭлементыФормы.Трассировка.Страницы.Найти("Обработки");
	КонецЕсли;	
КонецПроцедуры

//Обработчик нажатия кнопки командной панели "Действия-Новый конструктор"
//Открывает новый конструктор
Процедура КоманднаяПанельКонструктор(Кнопка)
	ОкнаКонструкторПредставления =ПолучитьФорму("КонструкторПредставления",ВладелецФормы,Новый УникальныйИдентификатор());
	ОкнаКонструкторПредставления.Открыть();
КонецПроцедуры

//Обработчик нажатия кнопки командной панели "Действия-Копия конструктора"
//Открывает копию текущего конструктора
Процедура КоманднаяПанельСкопироватьКонструктор(Кнопка)
	// Вставить содержимое обработчика.
	ОкнаКонструкторПредставления =ПолучитьФорму("КонструкторПредставления",ВладелецФормы,Новый УникальныйИдентификатор());
	СохранитьЗначение("КонсольЗапросов_ИмяФайла", Неопределено);
	СохранитьЗначение("КонсольЗапросов_ИмяПути",  Неопределено);
	ОкнаКонструкторПредставления.Открыть();
	СохранитьЗначение("КонсольЗапросов_ИмяФайла", мИмяФайла);
	СохранитьЗначение("КонсольЗапросов_ИмяПути",  мИмяПути);
	//могли что то изменить в строке
	вСохранитьЗапросТекущейСтроки();
	//дерево запросов копируем
	ОкнаКонструкторПредставления.РезультатЗапроса=РезультатЗапроса.Скопировать();		
	ОкнаКонструкторПредставления.ДеревоЗапросов=ДеревоЗапросов.Скопировать();
	ОкнаКонструкторПредставления.ДоступныеОбработки=ДоступныеОбработки.Скопировать();
	ОкнаКонструкторПредставления.ВыбранныеОбработки=ВыбранныеОбработки.Скопировать();
	//офрмлям таблицу результатов
	Если Элементыформы.ПанельРезультата.Страницы[0].Значение Тогда
		ОкнаКонструкторПредставления.ЭлементыФормы.ТаблицаРезультата.СоздатьКолонки();
		ОкнаКонструкторПредставления.Элементыформы.ПанельРезультата.Страницы[0].Значение=Истина;
		ОкнаКонструкторПредставления.ЭлементыФормы.ПанельТекстаЗапроса.ТекущаяСтраница=ОкнаКонструкторПредставления.ЭлементыФормы.ПанельТекстаЗапроса.Страницы[ЭлементыФормы.ПанельТекстаЗапроса.ТекущаяСтраница.Имя];
		вУстановитьПараметрыСлужебныхКолонок(ОкнаКонструкторПредставления.ЭлементыФормы.ТаблицаРезультата);
		//ВывестиКолВоРезультатовЗапроса(ОкнаКонструкторПредставления);
		//на сонове таблицы результатов формируем таблицу выбранных обработок
		ОкнаКонструкторПредставления.ВыбранныеОбработки=ВыбранныеОбработки;
		ОкнаКонструкторПредставления.СформироватьТаблицуВыбранныхОбработок(РезультатЗапроса);
	КонецЕСли;	
КонецПроцедуры

//Скрывает панель дерева запросов
//
Процедура СкрытьОтобразитьДерево(Кнопка,Сохранять=Истина)  Экспорт  //можеть быть восстановлена из значений пометок
	Сохранять		= ?(Сохранять=Неопределено,Истина,Сохранять);
	Кнопка.Пометка	= Не Кнопка.Пометка;
	Если НЕ ЭлементыФормы.ПанельЗапросОбработки.Свертка = РежимСверткиЭлементаУправления.Лево Тогда
			//ну вначале изменим привязки чтобы эл управления могли сложиться
				//сбросим привязки
				ЭлементыФормы.ПанельЗапросОбработки.УстановитьПривязку(ГраницаЭлементаУправления.Право);	
				////теперь установим привязки (без сброса этих привязок установить их не получится)
				ЭлементыФормы.РазделительВертикальный.УстановитьПривязку(ГраницаЭлементаУправления.Лево,ЭлементыФормы.ПанельЗапросОбработки,ГраницаЭлементаУправления.Право);
		//сворачиваем
		ЭлементыФормы.РазделительВертикальный.Свертка = РежимСверткиЭлементаУправления.Лево;
		ЭлементыФормы.ПанельЗапросОбработки.Свертка = РежимСверткиЭлементаУправления.Лево;
	Иначе
		//востанавливаем
		ЭлементыФормы.ПанельЗапросОбработки.Свертка = РежимСверткиЭлементаУправления.Нет;
		ЭлементыФормы.РазделительВертикальный.Свертка = РежимСверткиЭлементаУправления.Нет;
			////так же востанавливаем и привязки 
			//	//сбросим привязки 
				ЭлементыФормы.РазделительВертикальный.УстановитьПривязку(ГраницаЭлементаУправления.Лево);
			//	//установим 
				ЭлементыФормы.ПанельЗапросОбработки.УстановитьПривязку(ГраницаЭлементаУправления.Право,ЭлементыФормы.РазделительВертикальный,ГраницаЭлементаУправления.Лево);
	КонецЕсли;
	СохранитьЗначениеПометки(Кнопка,Сохранять);	
КонецПроцедуры	

//Скрывает таблицу результата
//
Процедура СкрытьОтобразитьРезультат(Кнопка) Экспорт  //можеть быть восстановлена из значений пометок
	Кнопка.Пометка=Не Кнопка.Пометка;
	Если НЕ ЭлементыФормы.ПанельРезультата.Свертка = РежимСверткиЭлементаУправления.Низ Тогда
		//изменим привязки чтобы эл управления могли сложиться
		ЭлементыФормы.РазделительГоризонтальный.УстановитьПривязку(ГраницаЭлементаУправления.Низ,ЭлементыФормы.ПанельРезультата,ГраницаЭлементаУправления.Верх);

		//сворачиваем
		ЭлементыФормы.ПанельРезультата.Свертка = РежимСверткиЭлементаУправления.Низ;
		ЭлементыФормы.РазделительГоризонтальный.Свертка = РежимСверткиЭлементаУправления.Низ;
	Иначе
		//востанавливаем
		ЭлементыФормы.ПанельРезультата.Свертка = РежимСверткиЭлементаУправления.Нет;
		ЭлементыФормы.РазделительГоризонтальный.Свертка = РежимСверткиЭлементаУправления.Нет;
		//возвращаем прявязки 
		ЭлементыФормы.РазделительГоризонтальный.УстановитьПривязку(ГраницаЭлементаУправления.Низ,ЭлементыФормы.РазделительГоризонтальный,ГраницаЭлементаУправления.Верх);

	КонецЕсли;
	СохранитьЗначениеПометки(Кнопка);
КонецПроцедуры

//Перетаскивание на карзину
//
Процедура КорзинаПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка)
	Если ТипЗнч(ПараметрыПеретаскивания.Значение)=Тип("Структура") Тогда
		СтандартнаяОбработка=Ложь;
		ПараметрыПеретаскивания.Действие=ДействиеПеретаскивания.Перемещение;
	КонецЕсли;	
КонецПроцедуры

//Процедура проверят наличие ключа
//
Процедура ПроверитьКлюч(Элемент = Неопределено)
	Если Не GetHASPObject() = Неопределено Тогда
		ЭлементыФормы.ПанельЗащиты.Видимость							= Ложь;
	Иначе
		ЭлементыФормы.ПанельЗащиты.Видимость							= Истина;
	КонецЕсли;	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНОГО ПОЛЯ ВЫБРАННЫЕ ОБРАБОТКИ

//Запрешаем копирование и проверям возмыжны ли поджстроки для данной строки
//для дерево добавление только на уровень ниже... 
//Параметры:
//	Нет.
//
Процедура ВыбранныеОбработкиПередНачаломДобавления(Элемент, Отказ, Копирование)
	ТекущаяСтрока=ЭлементыФормы.ВыбранныеОбработки.ТекущаяСтрока;
	Если Копирование Тогда 
		Отказ=Истина;
	ИначеЕсли Не ТекущаяСтрока=Неопределено Тогда
		ОформлениеСтроки=ЭлементыФормы.ВыбранныеОбработки.ОформлениеСтроки(ТекущаяСтрока);
		Если ОформлениеСтроки.Шрифт.Подчеркивание=Истина Тогда
			Предупреждение("Для данной строки не может быть подстрок",10,"Выбранные обработки Enterpris Integrator");
			НоваяСтрока=ВыбранныеОбработки.Строки.Добавить();
			Отказ=Истина;
		КонецЕсли;
	КонецЕсли;	
КонецПроцедуры

//Открытие выбранной обработки
//Параметры:
//	Нет.
//
Процедура ВыбранныеОбработкиВыбор(Элемент, ВыбраннаяСтрока, Колонка, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ФормаОбр=вПолучитьОбработку(,Новый Структура("Строка,Колонка",ВыбраннаяСтрока,Колонка));
	Если Не ФормаОбр=Неопределено Тогда
		ФормаОбр.Открыть();
	КонецЕсли;	
КонецПроцедуры // ВыбранныеОбработкиВыбор()

 //Отбражаем картинку для каждой колонки и изменяем шрифт в случае условного выполнения
//Параметры:
//	Нет.
Процедура ВыбранныеОбработкиПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	Для каждого Колонка из Элемент.Колонки Цикл
		Если Колонка.Видимость Тогда
			СтрокаОбработки=вПоказатьКартинкуОбработки(Элемент,Колонка, ОформлениеСтроки, ДанныеСтроки);
			Если Не СтрокаОбработки=Неопределено Тогда
				Цвет=?(Не ДанныеСтроки.Пометка_Ei,Новый Цвет(124, 119, 108),Новый Цвет (0,0,0));
			Иначе
				Цвет=Новый Цвет (255,0,0); //красный
			КонецЕсли;
			ОформлениеСтроки.Ячейки[Колонка.Имя].ЦветТекста	= Цвет;
		КонецЕсли;	
	КонецЦикла;
	
	Если ДанныеСтроки["Пометка_Ei"] И Не ПустаяСтрока(ДанныеСтроки["Условие_Ei"]) Тогда
		//для условных делаем шрифт курсивом
		ОформлениеСтроки.Шрифт=Новый Шрифт(ОформлениеСтроки.Шрифт,,,,Истина);
	КонецЕсли;	
КонецПроцедуры

//Проверяем возможность удаления строки. Для подчиныенных строк это не всегда возможно.
//Параметры:
//	Нет.
Процедура ВыбранныеОбработкиПередУдалением(Элемент, Отказ)
	ОформлениеСтроки=ЭлементыФормы.ВыбранныеОбработки.ОформлениеСтроки(ЭлементыФормы.ВыбранныеОбработки.ТекущаяСтрока);
	Если ОформлениеСтроки.Шрифт.Подчеркивание=Истина Тогда
		Отказ=Истина;
		Предупреждение("Строка не может быть изменена, она обязательна для текущей группы",10,"Выбранные обработки Enterprise Integrator");
	КонецЕсли;
КонецПроцедуры

Процедура ВыбранныеОбработкиПриИзмененииФлажка(Элемент, Колонка)
	ИзменениеФлажка(Элемент.ТекущаяСтрока, Колонка.ДанныеФлажка, Колонка.Данные);	
КонецПроцедуры

//Позиционируемся на текущей обработке из доступных если есть
//Параметры:
//	Нет.
Процедура ВыбранныеОбработкиПриАктивизацииЯчейки(Элемент)
	Если ТекущийЭлемент=Элемент Тогда
		Если 	Не Элемент.ТекущаяКолонка	= Неопределено 
			И 	Не Элемент.ТекущиеДанные	= Неопределено Тогда 
			Значение=Элемент.ТекущиеДанные[Элемент.ТекущаяКолонка.Имя];
			Если Не Значение=Неопределено Тогда
				//Доступные обработки
				Строка=вНайтиОбработку(Значение);
				Если Не Строка=Неопределено Тогда 
					ЭлементыФормы.ДоступныеОбработки.ТекущаяСтрока	= Строка;
					ТекущийЭлемент	= Элемент;
				КонецЕсли;
				//ТабицаРезультата
				Колонка	= ЭлементыФормы.ТаблицаРезультата.Колонки.Найти(Элемент.ТекущаяКолонка.Имя);
				Если Не Колонка=Неопределено Тогда
					Если Колонка.Видимость Тогда
						ЭлементыФормы.ТаблицаРезультата.ТекущаяКолонка	= Колонка;
						ТекущийЭлемент	= Элемент;
					КонецЕсли;	
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;	
КонецПроцедуры

//Перемещение обработок внутри .. а то очень не удобно приходится добавлять строку
//
Процедура ВыбранныеОбработкиНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка)
	//положем в струкутру координаты текущей ячейки 
	ПараметрыПеретаскивания.Значение=Новый Структура("Колонка,Строка",Элемент.ТекущаяКолонка,Элемент.ТекущиеДанные);
КонецПроцедуры


//Проверка перетаскивания из дерева доступных обработок
//
Процедура ВыбранныеОбработкиПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Колонка)
	Если НЕ ПараметрыПеретаскивания.Действие	= ДействиеПеретаскивания.Отмена   Тогда
		//сдесь будем управлять иконкой отображения
		МассивТипов		= Новый Массив;
		МассивТипов.Добавить(Тип("СтрокаДереваЗначений"));
		МассивТипов.Добавить(Тип("Структура"));
		ДоступныеТипы	= Новый ОписаниеТипов(МассивТипов);
		
		Если ДоступныеТипы.СодержитТип(ТипЗнч(ПараметрыПеретаскивания.Значение)) Тогда
			СтандартнаяОбработка=Ложь;
			ПараметрыПеретаскивания.Действие=ДействиеПеретаскивания.Отмена;
			Если НЕ Колонка	= Неопределено  Тогда
				
				//Добавим строку если нет пустой для этой колонки
				Если ВыбранныеОбработки.Строки.Найти("",Колонка.Данные,Ложь)=Неопределено Тогда
					НоваяСтрока=ВыбранныеОбработки.Строки.Добавить();
					НоваяСтрока["Пометка_Ei"]=Истина;                                      
					Элемент.ОбновитьСтроки();                                              
				КонецЕсли;
				
				Если ТипЗнч(ПараметрыПеретаскивания.Значение)= Тип("Структура") Тогда
					СтрокаОбработки = вНайтиОбработку(ПараметрыПеретаскивания.Значение);		
				Иначе
					СтрокаОбработки	= ПараметрыПеретаскивания.Значение;
				КонецЕсли;
				
				Если вПозицияДоступнаДляОбработки(Новый Структура("Строка,Колонка",Строка, Колонка),СтрокаОбработки.Типы) Тогда
					ПараметрыПеретаскивания.Действие	= СтрокаОбработки.Действие;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;	
КонецПроцедуры

//Очистим ячейку перетащенную на корзину
//
Процедура ВыбранныеОбработкиОкончаниеПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка)
	Если ПараметрыПеретаскивания.Действие=ДействиеПеретаскивания.Перемещение Тогда
		вОчиститьПозициюОбработки(ПараметрыПеретаскивания.Значение);
	КонецЕсли;	
КонецПроцедуры

//Процедура возникает при отпусканни (окнчании перетаскивания)
//здесь  в зависимости от типа пертаскивая выполняем те или иные действия
Процедура ВыбранныеОбработкиПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Колонка)
	Если ТипЗнч(ПараметрыПеретаскивания.Значение)=Тип("Структура") Тогда
		СтрокаДоступнойОбработки	= вНайтиОбработку(ПараметрыПеретаскивания.Значение);
		СтараяПозиция				= ПараметрыПеретаскивания.Значение;
	Иначе	
		СтрокаДоступнойОбработки	= ПараметрыПеретаскивания.Значение;
		СтараяПозиция				= Неопределено;
	КонецЕсли;	
	Если СтрокаДоступнойОбработки.Действие=ДействиеПеретаскивания.Копирование Тогда
		//это настраиваемая обработка создадим новую настройку с уникальным именем
		НоваяОбработка					= СтрокаДоступнойОбработки.Строки.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяОбработка,СтрокаДоступнойОбработки,,"Действие,Обработка,Родитель,Строки,Функция");
		НоваяОбработка.Обработка 		= вПолучитьУникальноеИмя(Колонка.Данные); //изменим имя если онo не уникально
		НоваяОбработка.Действие  		= ДействиеПеретаскивания.Перемещение;
		СтрокаДоступнойОбработки		= НоваяОбработка;
		//Функция всегда ложь в истину устанавливаем при сохранении настройки (если настройка возвращает значения)
	КонецЕсли;
	Позиция	= Новый Структура("Строка,Колонка",Строка, Колонка);
	вИзменитьПозициюОбработки(СтрокаДоступнойОбработки.Обработка,Позиция,СтараяПозиция);
	
	//проверяем есть ли рекомендуемые вложеные обработки 
	ФормаОбр=вПолучитьОбработку(,Позиция);
	Если Не ФормаОбр=Неопределено Тогда
		СвойстваОбработки	= ФормаОбр.ПолучитьСвойстваОбработки();
		Для каждого ВложеннаяОбр Из СвойстваОбработки.РекомендуемыеВложенные Цикл 
		    Обработка=вНайтиОбработку(ВложеннаяОбр.Значение);
			Если Не Обработка=Неопределено Тогда
				Если Позиция.Строка.Строки.Найти(ВложеннаяОбр,Колонка.Данные,Ложь)= Неопределено Тогда
					НоваяВложеннаяОбр					= Позиция.Строка.Строки.Добавить();
					НоваяВложеннаяОбр["Пометка_Ei"]		= ВложеннаяОбр.Пометка;
					НоваяВложеннаяОбр[Колонка.Данные]	= ВложеннаяОбр.Значение;
					Элемент.ОбновитьСтроки();
					Элемент.Развернуть(Позиция.Строка);
				КонецЕсли;	
			КонецЕсли;	
		КонецЦикла;	
		
		Если СтрокаДоступнойОбработки.Действие=ДействиеПеретаскивания.Копирование Тогда
			//теперь открываем
			ФормаОбр.Открыть();
		КонецЕсли;
	КонецЕсли;	
КонецПроцедуры

//Скрываем указатель
//
Процедура ВыбранныеОбработкиПриПолученииДанных(Элемент, ОформленияСтрок)
	ЭлементыФормы.ПеретащитеСюда.Видимость=(ВыбранныеОбработки.Строки.Количество()=0);
	Если ВыбранныеОбработки.Строки.Количество()>0 Тогда
		ЭлементыФормы.ПанельЗащиты.Видимость= Ложь;
	КонецЕсли;	
КонецПроцедуры

//Проверим можно ли использовать это обработку здесь
//
Процедура ВыбранныеОбработкиПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	Если Не ОтменаРедактирования Тогда
		ИмяНастройки	= Элемент.ТекущиеДанные[Элемент.ТекущаяКолонка.Данные];
		Если Не ПустаяСтрока(ИмяНастройки) Тогда 
			Отказ=Истина;
			Строка=вНайтиОбработку(ИмяНастройки);
			Если Не Строка=Неопределено Тогда 
				Если вПозицияДоступнаДляОбработки(Новый Структура("Строка,Колонка",Элемент.ТекущиеДанные,Элемент.ТекущаяКолонка),Строка.Типы) Тогда
					Отказ	= Ложь;
				Иначе
					Предупреждение("Данная обработка не может использоваться в текущей позиции(расположении).
					|Выберите другую ""колонку"" или измените вложенность.",20);
				КонецЕсли;	
			Иначе
				Предупреждение("Укажите верное имя настройки(обработки).",10);
			КонецЕсли;
		КонецЕсли;
	Иначе
		Элемент.ТекущиеДанные[Элемент.ТекущаяКолонка.Данные]=мИмяНастройки;	
	КонецЕсли;	
КонецПроцедуры

//Запоминаем имя настройки
//
Процедура ВыбранныеОбработкиПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	мИмяНастройки = Элемент.ТекущиеДанные[Элемент.ТекущаяКолонка.Данные];
КонецПроцедуры


///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ ТАБЛИЧНОГО ПОЛЯ ДЕРЕВО ЗАПРОСОВ

// Обработчик выбора строки в дереве запросов
//
Процедура ДеревоЗапросовВыбор(Элемент, ВыбраннаяСтрока, Колонка, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ВыполнитьЗапрос();
КонецПроцедуры // ДеревоЗапросовВыбор()

// Обработчик активизации строки в дереве запросов
//
Процедура ДеревоЗапросовПриАктивизацииСтроки(Элемент)
	НадоСохранять = Истина;
	Если мИдетДобавление Тогда
		Если мАктивизированаДобавляемаяЗапись Тогда

			// Произошла отмена добавления записи.
			НадоСохранять = Ложь;
			мАктивизированаДобавляемаяЗапись = Ложь;
		Иначе
			мАктивизированаДобавляемаяЗапись = Истина;
		КонецЕсли;
	КонецЕсли;
	Если НадоСохранять Тогда
		вСохранитьЗапросТекущейСтроки();
	КонецЕсли;
	мТекущаяСтрока = ЭлементыФормы.ДеревоЗапросов.ТекущаяСтрока;
	Если ДеревоЗапросов.Строки.Количество() <> 0 
		И мТекущаяСтрока <> Неопределено Тогда
		вЗадатьТекстЗапроса(мТекущаяСтрока.ТекстЗапроса);
		
		Если ТипЗнч(мТекущаяСтрока.ТекстЗапросаSQL)=Тип("Структура") Тогда
	        вЗадатьТекстЗапроса(мТекущаяСтрока.ТекстЗапросаSQL.Текст,ЭлементыФормы.ТекстЗапросаSQL);
			ТипыВТ=мТекущаяСтрока.ТекстЗапросаSQL.ТипыВТ;
		Иначе
			вЗадатьТекстЗапроса(мТекущаяСтрока.ТекстЗапросаSQL,ЭлементыФормы.ТекстЗапросаSQL);
		КонецЕсли;	
		вЗадатьТекстЗапроса(мТекущаяСтрока.Язык,ЭлементыФормы.ТекстМодуля);

		//Работа с параметрами запроса
		ИсходнаяТаблицаПараметров = мТекущаяСтрока.ПараметрыЗапроса;
		мФормаПараметров.Параметры.Очистить();
		Если Не ИсходнаяТаблицаПараметров = НеОпределено Тогда
			Для каждого СтрокаИсходнойТаблицы из ИсходнаяТаблицаПараметров Цикл
				НоваяСтрока = мФормаПараметров.Параметры.Добавить();
				Для i=0 по ИсходнаяТаблицаПараметров.Колонки.Количество()-1 Цикл
					НоваяСтрока[i] = СтрокаИсходнойТаблицы[i]; 
				КонецЦикла;	
				//мФормаПараметров.вУстановитьИдентификаторы(НоваяСтрока);
			КонецЦикла;
		КонецЕсли;
		Если Не ПолеТекстовогоДокументаСКонтекстнойПодсказкой=Неопределено Тогда
			ПолеТекстовогоДокументаСКонтекстнойПодсказкой.ТекстМодуля.ДобавитьСловоЛокальногоКонтекста(
					"Параметры","Свойство",Новый ОписаниеТипов("Структура"),вПолучитьСтруктуруПараметров());
		КонецЕсли;	
        //устанавливаем способ выгрузки если он не определен  
        Если мТекущаяСтрока.СпособВыгрузки = Неопределено Тогда
			мТекущаяСтрока.СпособВыгрузки = 1;
		КонецЕсли;
        вИзменеиеСпособаВыгрузки(мТекущаяСтрока.СпособВыгрузки);
        //устаналиваем время 
		Если мТекущаяСтрока.ВремяВыполнения = Неопределено Тогда
			//Обнулим
			вИзменитьВремяВыполнения(0,0);
			вИзменитьВремяВыполнения(1,0);
			вИзменитьВремяВыполнения(2,0);
			вИзменитьВремяВыполнения(3,0);
		Иначе
			//установим заполмненное время
			Для каждого ЭлементВремени из мТекущаяСтрока.ВремяВыполнения Цикл 
				вИзменитьВремяВыполнения(мТекущаяСтрока.ВремяВыполнения.Индекс(ЭлементВремени),ЭлементВремени.Значение);	
			КонецЦикла;	
		КонецЕсли;
		//работа с закрепленными областями
		Если Не ЭлементыФормы.КонтМеню.Кнопки.МенюРезультататЗапроса.Кнопки.Закрепить.Пометка Тогда
			Если ТипЗнч(мТекущаяСтрока.РезультатЗапроса)=Тип("ТаблицаЗначений")
				ИЛИ ТипЗнч(мТекущаяСтрока.РезультатЗапроса)=Тип("ДеревоЗначений") Тогда 
				РезультатЗапроса=мТекущаяСтрока.РезультатЗапроса.Скопировать();
				СоздатьКолонкиДляРезультатаЗапроса();
			ИначеЕсли ТипЗнч(мТекущаяСтрока.РезультатЗапроса)=Тип("РезультатЗапроса") Тогда
				вОбнулитьФлагиВыводаРезультатов();			
				вЗагрузитьРезультат();
            Иначе
				РезультатЗапроса.Колонки.Очистить();
				СоздатьКолонкиДляРезультатаЗапроса();
			КонецЕсли;	
		КонецЕсли;
		Если Не ЭлементыФормы.КонтМеню.Кнопки.ОбработкаРезультата.Кнопки.ЗакрепитьОбработки.Пометка Тогда
			Если ТипЗнч(мТекущаяСтрока.ВыбранныеОбработки)=Тип("ДеревоЗначений") Тогда 
				ВыбранныеОбработки=мТекущаяСтрока.ВыбранныеОбработки.Скопировать();	
			Иначе
				ВыбранныеОбработки.Колонки.Очистить();
			КонецЕсли;
			СформироватьТаблицуВыбранныхОбработок(РезультатЗапроса);
		КонецЕсли;
		//построитель
		ПостроительЗапроса=Новый ПостроительОтчета;
		Если НЕ ПустаяСтрока(мТекущаяСтрока.ЗапросПостроителя) Тогда
			ПостроительЗапроса.Текст=мТекущаяСтрока.ЗапросПостроителя;
			ПостроительЗапроса.ЗаполнитьНастройки();
			ПостроительЗапроса.УстановитьНастройки(мТекущаяСтрока.НастройкиПостроителя);
		КонецЕсли;	
		//компановка
		Если мТекущаяСтрока.СхемаКомпоновкиДанных <> Неопределено Тогда
			СобытиеОтладки=Формы.Отладка.ДобавитьСобытие("Инициализация СКД","Конструктор");
			Попытка 
				КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(мТекущаяСтрока.СхемаКомпоновкиДанных));
				КомпоновщикНастроек.ЗагрузитьНастройки(мТекущаяСтрока.Настройки);
			Исключение
				Формы.Отладка.ЗавершитьСобытие(СобытиеОтладки,"Информация",ИнформацияОбОшибке().Описание);
				//ВызватьИсключение  "Ошибка инициализации";
			КонецПопытки;
			Формы.Отладка.ЗавершитьСобытие(СобытиеОтладки);		
		Иначе
			КомпоновщикНастроек.Инициализировать(Неопределено);
			КомпоновщикНастроек.ЗагрузитьНастройки(Новый НастройкиКомпоновкиДанных());
		КонецЕсли;
		КомпоновщикНастроек.Восстановить();
	Иначе
		вЗадатьТекстЗапроса("");
		мФормаПараметров.Параметры.Очистить();
	КонецЕсли;
    //так ж в зависимоти от общего кол ва выделеннх строк 
	//активируем или заблокируем ту или иную кнопку меню
	ВыделенныеСтроки=ЭлементыФормы.ДеревоЗапросов.ВыделенныеСтроки;
	ЭлементыФормы.КонтМеню.Кнопки.МенюСпискаЗапросов.Кнопки.Сравнить.Доступность=(ВыделенныеСтроки.Количество()=2);
	//Установим уникальный идентификатор
	Если мТекущаяСтрока.УникальныйИдентификатор=Неопределено Тогда
		мТекущаяСтрока.УникальныйИдентификатор=Новый УникальныйИдентификатор;
	КонецЕсли;
	//заблокируем кнопку выполнить если запрос выпоняется в фоне
	ФоновоеВыполнение=ТаблицаФоновыхПроцессов.НайтиСтроки(Новый Структура("Ключ,Завершено",мТекущаяСтрока.УникальныйИдентификатор,Ложь));
	ЭлементыФормы.КоманднаяПанель1.Кнопки.ВыполнитьЗапрос.Доступность=Не ФоновоеВыполнение.Количество()>0;		 
КонецПроцедуры // ДеревоЗапросовПриАктивизацииСтроки()

// Обработчик события перед началом добавления строки в дереве запросов
//
Процедура ДеревоЗапросовПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель)

	Если Копирование Тогда
		Отказ = Истина;
		ТекСтрока = Элемент.ТекущаяСтрока;
		Если ТекСтрока.Родитель <> Неопределено Тогда
			НоваяСтрока = ТекСтрока.Родитель.Строки.Добавить();
		Иначе
			НоваяСтрока = Элемент.Значение.Строки.Добавить();
		КонецЕсли; 
		вДобавитьСтроки(ТекСтрока, НоваяСтрока, Элемент.Значение);
	КонецЕсли; 
	
	мИдетДобавление = Истина;
	
КонецПроцедуры // ДеревоЗапросовПередНачаломДобавления()

// Обработчик события перед удалением строки в дереве запросов
//
Процедура ДеревоЗапросовПередУдалением(Элемент, Отказ)

	мТекущаяСтрока = НеОпределено;
	Модифицированность = Истина;

КонецПроцедуры // ДеревоЗапросовПередУдалением()

// Обработчик события при окончании редактирования строки в дереве запросов
//
Процедура ДеревоЗапросовПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)

	Если НоваяСтрока Тогда
		//посдставляем значения по умолчанию
		Если Элемент.ТекущаяСтрока.СпособВыгрузки = НеОпределено Тогда
			Элемент.ТекущаяСтрока.СпособВыгрузки = 1;
		КонецЕсли;
	КонецЕсли;

	ДеревоЗапросовПриАктивизацииСтроки(Элемент);

	Если мИдетДобавление Тогда

		Если ОтменаРедактирования Тогда
			мТекущаяСтрока = Неопределено;
		КонецЕсли;
		
		мИдетДобавление = Ложь;
	КонецЕсли;

	Модифицированность = Истина;

КонецПроцедуры // ДеревоЗапросовПриОкончанииРедактирования()

// Устанавливаем картинки в зависимости от содержания
//
Процедура ДеревоЗапросовПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	ОформлениеСтроки.Ячейки.Запрос.ОтображатьКартинку = истина;
	Суффикс=0;
	Если ПустаяСтрока(ДанныеСтроки.ТекстЗапроса) Тогда
		Суффикс=?(Не ТипЗнч(ДанныеСтроки.ТекстЗапросаSQL)=Тип("Структура") ИЛИ ПустаяСтрока(ДанныеСтроки.ТекстЗапросаSQL.Текст),?(ПустаяСтрока(ДанныеСтроки.Язык),4,3),2);	
	КонецЕсли;
	Если Лев(ДанныеСтроки.Запрос,5)="Debug" Тогда
		ОформлениеСтроки.Ячейки.Запрос.ИндексКартинки = 1;
	ИначеЕсли Лев(ДанныеСтроки.Запрос,5)="Trace" Тогда
		ОформлениеСтроки.Ячейки.Запрос.ИндексКартинки = 5;
	Иначе
		ОформлениеСтроки.Ячейки.Запрос.ИндексКартинки = Суффикс;
	КонецЕсли;	
	ОформлениеСтроки.ЦветТекста=ПолучитьОттенкиЦвета(ДанныеСтроки.ДатаИзменения);
	ОформлениеСтроки.Ячейки.ИндикаторОР.ОтображатьКартинку = (ТипЗнч(ДанныеСтроки.ВыбранныеОбработки)=Тип("ДеревоЗначений") И ДанныеСтроки.ВыбранныеОбработки.Строки.Количество()>0);
	ОформлениеСтроки.Ячейки.ИндикаторОР.ИндексКартинки=0;
	//теперь проверяем на фоновое выполнение
	ФоновоеВыполнение=ТаблицаФоновыхПроцессов.НайтиСтроки(Новый Структура("Ключ,Завершено",ДанныеСтроки.УникальныйИдентификатор,Ложь));
	Если ФоновоеВыполнение.Количество()>0 Тогда
		ОформлениеСтроки.Ячейки.ИндикаторОР.ОтображатьКартинку = Истина;
		ОформлениеСтроки.Ячейки.ИндикаторОР.ИндексКартинки=1;
	КонецЕсли;
	Если ДанныеСтроки.СхемаКомпоновкиДанных<>Неопределено  Тогда
		ОформлениеСтроки.Ячейки.Компановщик.УстановитьКартинку(ЭлементыФормы.ПанельЗапрос.Страницы[2].КартинкаЗаголовка);	
	КонецЕсли;
	Если Не ПустаяСтрока(ДанныеСтроки.ЗапросПостроителя)  Тогда
		ОформлениеСтроки.Ячейки.Построитель.УстановитьКартинку(ЭлементыФормы.ПанельЗапрос.Страницы[1].КартинкаЗаголовка);	
	КонецЕсли;	
КонецПроцедуры

Процедура ДеревоЗапросовНачалоПеретаскивания(Элемент,ПараметрыПеретаскивания,СтандартнаяОбработка)
	//Для однотипности добавим все в массив
	Если Не ТипЗнч(ПараметрыПеретаскивания.Значение) = Тип("Массив") Тогда
		Массив=Новый Массив;
		Массив.Добавить(ПараметрыПеретаскивания.Значение);
		ПараметрыПеретаскивания.Значение = Массив;
	КонецЕсли;
КонецПроцедуры

Процедура ДеревоЗапросовПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Колонка)
	СтандартнаяОбработка=Ложь;
КонецПроцедуры

Процедура ДеревоЗапросовОкончаниеПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка)
	Если Не  ПозицияПретаскивания=Неопределено Тогда
		ДеревоЗапросовПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, ПозицияПретаскивания.Строка, ПозицияПретаскивания.Колонка)		
	КонецЕсли;	
КонецПроцедуры

Процедура ДеревоЗапросовПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Колонка)
	ПозицияПретаскивания=Неопределено;
	Если Строка=Неопределено Тогда
		//поднимаем строку на самы верхний уровень
		Строка=ДеревоЗапросов;
	КонецЕсли;	
	Если ПараметрыПеретаскивания.Действие=ДействиеПеретаскивания.Перемещение
			Или ПараметрыПеретаскивания.Действие=ДействиеПеретаскивания.Копирование Тогда
		Для каждого СтрокаИзМассива из ПараметрыПеретаскивания.Значение Цикл
			НоваяСтрока=Строка.Строки.Добавить();
			Если Не ТипЗнч(Строка)=Тип("ДеревоЗначений") Тогда
				Элемент.Развернуть(Строка);
			КонецЕсли;	
			ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаИзМассива);
			Если ПараметрыПеретаскивания.Действие=ДействиеПеретаскивания.Перемещение Тогда
				мТекущаяСтрока=НоваяСтрока;
				//подстроки не должны никуда пропасть поэтому их тоже перемещаем 
	            вСкопироватьДеревоЗапросов(СтрокаИзМассива, НоваяСтрока);
			КонецЕсли;	
		КонецЦикла;
		Если ПараметрыПеретаскивания.Действие=ДействиеПеретаскивания.Перемещение Тогда
			Для каждого СтрокаИзМассива из ПараметрыПеретаскивания.Значение Цикл
				СтрокаИзМассива.Родитель.Строки.Удалить(СтрокаИзМассива);
			КонецЦикла;		
		КонецЕсли;
	Иначе
		//сохраним структуру положения для окончания перетаскивани в случае выбора
		ПозицияПретаскивания=Новый Структура("Строка, Колонка",Строка, Колонка);
	КонецЕсли;	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ ТАБЛИЧНОГО ПОЛЯ ТАБЛИЦА РЕЗУЛЬТАТА

//Выводим статистику по отмеченным
//
Процедура ТаблицаРезультатаПриИзмененииФлажка(Элемент, Колонка)
	Если ЭлементыФормы.КонтМеню.Кнопки.МенюРезультататЗапроса.Кнопки.Флажки.Кнопки.ТриСостояния.Пометка Тогда
		ИзменениеФлажка(Элемент.ТекущаяСтрока,Колонка.ДанныеФлажка,Колонка.Данные);	
	КонецЕсли;
	ВывестиКолВоРезультатовЗапроса();
КонецПроцедуры

//При изменеии колонки в таблице результата меняем колонку в таблице выбранных обработок
//
Процедура ТаблицаРезультатаПриАктивизацииЯчейки(Элемент)
	Если ЭлементыФормы.ПанельТекстаЗапроса.ТекущаяСтраница = ЭлементыФормы.ПанельТекстаЗапроса.Страницы[3] Тогда
		Если ТекущийЭлемент=Элемент Тогда
			Если Не Элемент.ТекущаяКолонка=Неопределено Тогда
				Колонка	= ЭлементыФормы.ВыбранныеОбработки.Колонки.Найти(Элемент.ТекущаяКолонка.Имя);
				Если Не Колонка=Неопределено Тогда
					Если Колонка.Видимость Тогда
						ЭлементыФормы.ВыбранныеОбработки.ТекущаяКолонка	= Колонка;
						ТекущийЭлемент	= Элемент;
					КонецЕсли;	
				КонецЕсли;
			КонецЕсли;	
		КонецЕсли;
		//установим в кoлонке картинку объекта - для ассоциаций
		Для Каждого Колонка Из Элемент.Колонки Цикл
			Колонка.КартинкаШапки	= Новый Картинка;		
		КонецЦикла;
		Если Не Элемент.ТекущаяКолонка = Неопределено Тогда
			Элемент.ТекущаяКолонка.КартинкаШапки	= Формы.ОбщаяФорма.ЭлементыФормы.КонтМеню.Кнопки.Выражения.Кнопки.Объект.Картинка; 
		КонецЕсли;	
		//обновим строки для устновки картинки текущей строки
		Элемент.ОбновитьСтроки();
	КонецЕсли;
	ФункцияРасчитана = Ложь;
	Если Не Элемент.ТекущаяКолонка = Неопределено Тогда
		Если Элемент.ВыделенныеСтроки.Количество()>1 Тогда
			Сумма = 0;
			ИмяКолонки =  Элемент.ТекущаяКолонка.Имя;
			Для Каждого ВыделеннаяСтрока ИЗ Элемент.ВыделенныеСтроки Цикл
				Если ТипЗнч(ВыделеннаяСтрока[ИмяКолонки])= Тип("Число") Тогда
					Сумма = Сумма +	ВыделеннаяСтрока[ИмяКолонки];
					ФункцияРасчитана = Истина;
				Иначе
					ФункцияРасчитана = Ложь;
					Прервать;
				КонецЕсли;	
			КонецЦикла;	
		КонецЕсли;
	КонецЕсли;	
	Если ФункцияРасчитана Тогда
		ЭлементыФормы.Cостояние.ТекущаяСтраница=ЭлементыФормы.Cостояние.Страницы["Func"];
	ИначеЕсли ПараметрыОкружения.СерверныйРежим Тогда
		ЭлементыФормы.Cостояние.ТекущаяСтраница=ЭлементыФормы.Cостояние.Страницы["Serv"];
	Иначе
		ЭлементыФормы.Cостояние.ТекущаяСтраница=ЭлементыФормы.Cостояние.Страницы["File"];
	КонецЕсли;

КонецПроцедуры

//Не отмеченные строки делаем сероватыми
//
Процедура ТаблицаРезультатаПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	Цвет=Новый Цвет (0,0,0);
	Если ЭлементыФормы.ПанельТекстаЗапроса.ТекущаяСтраница.Имя="ОбработкаРезультата" Тогда
		Если Не ДанныеСтроки["Пометка_Ei"] Тогда 
			Цвет=Новый Цвет(124, 119, 108);
		КонецЕсли;
		
		//отобразим картнку текущих данных для ассоциации
		Если ДанныеСтроки = Элемент.ТекущиеДанные И  Элемент.Колонки.Количество()>1 Тогда
			ОформлениеСтроки.Ячейки[1].Картинка 			= Формы.ОбщаяФорма.ЭлементыФормы.КонтМеню.Кнопки.Выражения.Кнопки.ТекущиеДанные.Картинка;		
			ОформлениеСтроки.Ячейки[1].отображатьКартинку	= Истина;
		КонецЕсли;	
	КонецЕсли;
	//ОформлениеСтроки.Ячейки.Пометка.ОтображатьТекст=Ложь;
	ОформлениеСтроки.ЦветТекста=Цвет;
КонецПроцедуры

//Подготовка к перетаскиванию во втроенный язык
//
Процедура ТаблицаРезультатаНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка)
	Если ЭлементыФормы.ПанельТекстаЗапроса.ТекущаяСтраница.Имя="Язык"
		или ЭлементыФормы.ПанельТекстаЗапроса.ТекущаяСтраница.Имя="Sql" Тогда
		//СтандартнаяОбработка=Ложь;
		ПараметрыПеретаскивания.Значение=ЭлементыФормы.ТаблицаРезультата.ТекущаяКолонка.Имя+" = "+ПреобразоватьЗначениеКВыражению(ПараметрыПеретаскивания.Значение[0][ЭлементыФормы.ТаблицаРезультата.ТекущаяКолонка.Имя]);
	КонецЕсли;
КонецПроцедуры

// Обработчик выбора строки в таблице результата
//
Процедура ТаблицаРезультатаВыбор(Элемент, ВыбраннаяСтрока, Колонка, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
    СодержимоеЯчейки = ВыбраннаяСтрока[Элемент.Колонки.Индекс(Колонка)];
	Если ТипЗнч(СодержимоеЯчейки) = Тип("ТаблицаЗначений") Тогда
		ФормаВложеннойТаблицы = ПолучитьФорму("ФормаВложеннойТаблицы", ЭтаФорма);
		ФормаВложеннойТаблицы.ВложеннаяТаблица = СодержимоеЯчейки;
		ФормаВложеннойТаблицы.ЭлементыФормы.ВложеннаяТаблица.СоздатьКолонки();
		ФормаВложеннойТаблицы.Открыть();
	ИначеЕсли ТипЗнч(СодержимоеЯчейки) = Тип("COMSafeArray") Тогда
		ВыбраннаяСтрока[Колонка.Имя]=вПолучитьПредставлениеID(СодержимоеЯчейки);
		//{Начало изменений Кудяков Г.А.  27 ноября 2007 г. 15:06:30	
	ИначеЕсли ТипЗнч(СодержимоеЯчейки) = Тип("ХранилищеЗначения") Тогда
		Длг = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
		Длг.Заголовок = "Укажите файл сохранения значения";
		Длг.Каталог=мИмяПути;
		Длг.Фильтр = "Двоичные данные(*.bin)|*.bin|Все файлы (*.*)|*.*";
		Длг.Расширение = "bin";
		Если Не Длг.Выбрать() Тогда
			Возврат;
		КонецЕсли;
        ЗначениеВХранилище=СодержимоеЯчейки.Получить();
		Если ТипЗнч(ЗначениеВХранилище) = Тип("ДвоичныеДанные") Тогда
        	ЗначениеВХранилище.Записать(Длг.ПолноеИмяФайла);
		Иначе
			ЗначениеВФайл(Длг.ПолноеИмяФайла,ЗначениеВХранилище);
		КонецЕсли; 
	//окончание изменений Кудяков Г.А.  27 ноября 2007 г. 15:06:42 }	
	Иначе
		ОткрытьЗначение(СодержимоеЯчейки);
	КонецЕсли;

КонецПроцедуры // ТаблицаРезультатаВыбор()

//Убираем жука
//
Процедура ТаблицаРезультатаПриПолученииДанных(Элемент, ОформленияСтрок)
	ЭлементыФормы.КартинкаОтладки.Видимость=Ложь;
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ ТАБЛИЧНОГО ПОЛЯ ТАБОИЧНОЕ ПОЛЕ ОТБОР и ВЫБОР

//Проверка перетаскивания, для обоих табличных полей
//
Процедура ТабличноеПолеПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Колонка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

//Перетаскиваение из результатов запроса
//в отбор
Процедура ТабличноеПолеОтборПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Колонка)
	вДобавитьОтборВПостроитель(ПараметрыПеретаскивания.Значение);
КонецПроцедуры

//Покажем картинки
//
Процедура ТабличноеПолеОтборПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	ЭлементыФормы.Надпись2.Видимость				= Ложь;
	ЭлементыФормы.Слева.Видимость					= Ложь;
	ЭлементыФормы.Снизу.Видимость					= Ложь;
	ОформлениеСтроки.Ячейки.Имя.ОтображатьКартинку	= Истина;
	ОформлениеСтроки.Ячейки.Имя.ИндексКартинки 		= Число(Не ДанныеСтроки.Использование);	
КонецПроцедуры

//Покажем картинки
//
Процедура ТабличноеПолеВыбранныеПоляПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	ОформлениеСтроки.Ячейки.Поле.ОтображатьКартинку	= Истина;
	ОформлениеСтроки.Ячейки.Поле.ИндексКартинки 	= 0;
КонецПроцедуры



//////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ КОНТЕКСТНОГО МЕНЮ

//Изменяет Grid 
Процедура КонтМенюИзменить(Кнопка)
	ЭлементыФормы.Grid.Редактировать()
КонецПроцедуры

//Сохраняет изменения внесенные в Grid 
Процедура КонтМенюСохранить(Кнопка)
	ЭлементыФормы.ДатаГрид.ЗакончитьРедактирование();
КонецПроцедуры

//Удаляет текущую строку из Грида
Процедура КонтМенюУдалить(Кнопка)
	ЭлементыФормы.Grid.УдалитьСтроку(ЭлементыФормы.Grid.ТекущаяСтрока());
КонецПроцедуры

//Очищает менеджер временных таблиц
Процедура КонтМенюМВТ(Кнопка)
	МенеджерВременныхТаблиц=Новый МенеджерВременныхТаблиц;
КонецПроцедуры

//Формирует в новом окне конструктора разложенную структуру
Процедура КонтМенюСформироватьСтруктуруЗапроса(Кнопка)
	ВНовомОкне=(Кнопка.Пояснение="В новом окне");
	СтруктураЗапроса=ПолучитьСтруктуруЗапроса(вПолучитьТекстТекстовогоПоля(ВНовомОкне,ЭлементыФормы.ТекстЗапроса,Истина));
	Если ТипЗнч(СтруктураЗапроса)=Тип("Структура") Тогда
		Дерево=вСформироватьДеревоЗапросов(СтруктураЗапроса);
		Если ВНовомОкне Тогда 
			ОкнаКонструкторПредставления =ПолучитьФорму("КонструкторПредставления",ВладелецФормы,Новый УникальныйИдентификатор());
			ОкнаКонструкторПредставления.Открыть();
			ОкнаКонструкторПредставления.вСоздатьНовыйФайлЗапросов();
		КонецЕсли;
		//ПребразоватьВМетаданные1С(СтруктураЗапроса);
			Для Каждого СтрокаОтбора из Дерево.Строки Цикл
				вПолучитьТекстЗапросаИзСтруктуры(СтруктураЗапроса,?(ВНовомОкне,ОкнаКонструкторПредставления.ДеревоЗапросов,мТекущаяСтрока),СтрокаОтбора);	
			КонецЦикла;
		Если ВНовомОкне Тогда 
			//Активизируем др. строку
			Если ОкнаКонструкторПредставления.ДеревоЗапросов.Строки.Количество()>1 Тогда
				ОкнаКонструкторПредставления.ЭлементыФормы.ДеревоЗапросов.ТекущаяСтрока=ОкнаКонструкторПредставления.ДеревоЗапросов.Строки[1];
				ОкнаКонструкторПредставления.ДеревоЗапросов.Строки.Удалить(ОкнаКонструкторПредставления.ДеревоЗапросов.Строки[0]);
			КонецЕсли;
			вСохранитьИмяФайла();
		КонецЕсли;	
	КонецЕсли;	
КонецПроцедуры

//Создание схемы компановки данных, исходыми данными будут запросы и их параметры
Процедура КонтМенюСКД(Кнопка)
	//Создаем схему компановки данных
	СКД = Новый СхемаКомпоновкиДанных();
	Для каждого ТекСтрока Из ЭлементыФормы.ДеревоЗапросов.ВыделенныеСтроки Цикл 
		вЗаполнитьИсточникиданныхСКД(СКД, ТекСтрока);
	КонецЦикла;	
	//Открываем СКД для редактирования
	КонструкторСхемыКомпоновкиДанных = Новый КонструкторСхемыКомпоновкиДанных(СКД);
	КонструкторСхемыКомпоновкиДанных.Редактировать(Этаформа);
КонецПроцедуры

//Выгружает таблицу, значений или дерево значений в Excel
Процедура КонтМенюВыгрузитьРезультатВExcel()
	СобытиеОтладки=Формы.Отладка.ДобавитьСобытие("Выгрузка результатов запроса в Excel","Конструктор");
	Попытка
		ТабДок=вВыгрузитьВТабличныйДокумент(мТекущаяСтрока.РезультатЗапроса);
		врФайл=ПолучитьИмяВременногоФайла("xls");
		ТабДок.Записать(врФайл,ТипФайлаТабличногоДокумента.XLS);
			
		//начинаем раброту с Excel
		вСнизитьБезопасность(); //нужно для записи макроса возможной записи только для 12 версии если 8.1 и для всех версий если 8.0
		СобытиеОтладки_Запуск=Формы.Отладка.ДобавитьСобытие("Запуск Excel","Внешние компоненты",СобытиеОтладки);
		Попытка
			ExcelApp  = Новый COMОбъект("Excel.Application");
			ExcelApp.WorkBooks.Open(врФайл);
			//скрываем окно чтобы не было тормозов
			ExcelApp.Visible=Ложь;
				//Фиксируем столбцы & фиксируем шапку отчета 
		        ExcelApp.Application.ActiveWindow.ActiveSheet.Range(""+вНазваниеСтолбца(Число(ЭлементыФормы.ТаблицаРезультата.ФиксацияСлева)+1)+(0+2)).Select(); //+1 шапка табличного поля
				ExcelApp.Application.ActiveWindow.FreezePanes=Истина;
			врСтр=1;			
			// для 2007 пару приятных вещей 
			Если Лев(ExcelApp.Version,2)="12" Тогда
				Project=ExcelApp.ActiveWorkbook.VBProject.VBComponents.Add(1);
				Project.Name= "forExcel_12";  //ограничение на длинну имени не должно быть слишком коротким
				Modul=ExcelApp.ActiveWorkbook.VBProject.VBComponents.Item(ExcelApp.ActiveWorkbook.VBProject.VBComponents.Count()).CodeModule;

				//условное форматирование
				Modul.InsertLines(врСтр, "Sub FormatTable()                                                                        "); 					врСтр=врСтр+1;
				//только в 2003<= есть такой метод (SpecialCells)
				Modul.InsertLines(врСтр, "		C = ActiveSheet.Cells.SpecialCells(xlCellTypeLastCell).Column                      "); 					врСтр=врСтр+1;
		    	Modul.InsertLines(врСтр, "		R = ActiveSheet.Cells.SpecialCells(xlCellTypeLastCell).Row                         "); 					врСтр=врСтр+1;
				Modul.InsertLines(врСтр, "    Range(""A1"", ActiveSheet.Cells.Item(R, C)).Select                   "); 					врСтр=врСтр+1;
				Modul.InsertLines(врСтр, "    With Selection.Interior                                                              "); 					врСтр=врСтр+1;
				Modul.InsertLines(врСтр, "        .Pattern = xlNone                                                                "); 					врСтр=врСтр+1;
				Modul.InsertLines(врСтр, "        .TintAndShade = 0                                                                "); 					врСтр=врСтр+1;
				Modul.InsertLines(врСтр, "        .PatternTintAndShade = 0                                                         "); 					врСтр=врСтр+1;
				Modul.InsertLines(врСтр, "    End With                                                                             "); 					врСтр=врСтр+1;
				Modul.InsertLines(врСтр, "    ActiveSheet.ListObjects.Add(xlSrcRange, Range(""A1"", ActiveSheet.Cells.Item(R, C)), , xlYes).Name =""Table1c"""); 					врСтр=врСтр+1;
				Modul.InsertLines(врСтр, "    'Range(""A1"", ActiveSheet.Cells.Item(R, C)).Select                                                           "); 					врСтр=врСтр+1;
				Modul.InsertLines(врСтр, "    ActiveSheet.ListObjects(""Table1c"").TableStyle = ""TableStyleLight9""              "); 					врСтр=врСтр+1;
				Modul.InsertLines(врСтр, "    Selection.FormatConditions.AddDatabar                                                "); 					врСтр=врСтр+1;
				Modul.InsertLines(врСтр, "    Selection.FormatConditions(Selection.FormatConditions.Count).ShowValue = True        "); 					врСтр=врСтр+1;
				Modul.InsertLines(врСтр, "    Selection.FormatConditions(Selection.FormatConditions.Count).SetFirstPriority        "); 					врСтр=врСтр+1;
				Modul.InsertLines(врСтр, "    With Selection.FormatConditions(1)                                                   "); 					врСтр=врСтр+1;
				Modul.InsertLines(врСтр, "        .MinPoint.Modify newtype:=xlConditionValueLowestValue                            "); 					врСтр=врСтр+1;
				Modul.InsertLines(врСтр, "        .MaxPoint.Modify newtype:=xlConditionValueHighestValue                           "); 					врСтр=врСтр+1;
				Modul.InsertLines(врСтр, "    End With                                                                             "); 					врСтр=врСтр+1;
				Modul.InsertLines(врСтр, "    With Selection.FormatConditions(1).BarColor                                          "); 					врСтр=врСтр+1;
				Modul.InsertLines(врСтр, "        .Color = 13012579                                                                "); 					врСтр=врСтр+1;
				Modul.InsertLines(врСтр, "        .TintAndShade = 0                                                                "); 					врСтр=врСтр+1;
				Modul.InsertLines(врСтр, "    End With                                                                             "); 					врСтр=врСтр+1;
				Modul.InsertLines(врСтр, "End Sub                                                                                  "); 					врСтр=врСтр+1;
								//запускаем макрос
								ExcelApp.Application.Run("FormatTable");
								//можно добавить еще авто ширину колонок ... но это несложно и в Excel зделать

			КонецЕсли;	
			//показать ярлыки страниц
			ExcelApp.Application.ActiveWindow.DisplayWorkbookTabs=Истина;
			ExcelApp.Application.ActiveWindow.TabRatio = 0.5;
			//сохраняем  
			ExcelApp.DisplayAlerts = Ложь;
			//для 2007 версии пока проблеммы так что закометировал
			//ExcelApp.Workbooks(врФайл).SaveAs(врФайл,-4143);
			ExcelApp.Visible=Истина;
			ExcelApp.DisplayAlerts = Истина;
		Исключение
			Формы.Отладка.ЗавершитьСобытие(СобытиеОтладки_Запуск,"ОченьВажное",ИнформацияОбОшибке().Описание);
			ВызватьИсключение  "Ошибка выгрузки данных";
		КонецПопытки;
		Формы.Отладка.ЗавершитьСобытие(СобытиеОтладки_Запуск);	
	Исключение
		Формы.Отладка.ЗавершитьСобытие(СобытиеОтладки,"ОченьВажное",ИнформацияОбОшибке().Описание);
		ВызватьИсключение  "Ошибка выгрузки данных";
	КонецПопытки;
	Формы.Отладка.ЗавершитьСобытие(СобытиеОтладки);	
КонецПроцедуры

//Pакрепляет области у таблицы, дерева
Процедура КонтМенюЗакрепитьОбласти(Кнопка)
	ЭлементыФормы.ТаблицаРезультата.ФиксацияСлева=ЭлементыФормы.ТаблицаРезультата.Колонки.Индекс(ЭлементыФормы.ТаблицаРезультата.ТекущаяКолонка);
КонецПроцедуры

//Выполняет SQL запрос, текст запроса модифицируется для вставики во временную таблицу
Процедура КонтМенюВыполнитьSQLЧерезВставкуВВТ(Кнопка)
	ТекстЗапроса = СтрЗаменить(вПолучитьТекстТекстовогоПоля(Истина,ЭлементыФормы.ТекстЗапросаSQL), "|", "");
	ВыполнитьSQlЗапросЧерезВТ("INSERT INTO tempdb..##tt "+ТекстЗапроса);
КонецПроцедуры 

//Выполняет SQL запрос, через временную таблицу. 
Процедура КонтМенюВыполнитьSQLЧерезВТ(Кнопка)
	ВыполнитьSQlЗапросЧерезВТ(СтрЗаменить(вПолучитьТекстТекстовогоПоля(Истина,ЭлементыФормы.ТекстЗапросаSQL), "|", ""));
КонецПроцедуры

//Сохраняет запрос SQL в файл с выбором папаки назначения и имени
Процедура КонтМенюСохранитьSQLЗапрос(Текст,ИмяФайла=Неопределено,Кодировка=Неопределено)
	вСохранитьТекст(ЭлементыФормы.ТекстЗапросаSQL.ПолучитьТекст());
КонецПроцедуры	

//Открывает запрос в обозревателе SQL 2005, от туда можно конструктор вызвать
Процедура КонтМенюSQLОткрытьSQLWB(ИмяФайла) Экспорт
	ИмяФайла=ПолучитьИмяВременногоФайла("sql");
	вСохранитьТекст(ЭлементыФормы.ТекстЗапросаSQL.ПолучитьТекст(),ИмяФайла);
	ПараметрыСоединения=ПолучитьПараметрыСоединения();
	Если Не ТипЗнч(ПараметрыСоединения)=Тип("Структура") Тогда
		Сообщить("Не удалось определить параметры подключения",СтатусСообщения.Важное);
		Возврат;
	КонецЕсли;

	ЗапуститьПриложение("sqlwb -S "+ПараметрыСоединения.SQLСервер+" -d "+ПараметрыСоединения.DBName+" -U "+ПараметрыСоединения.Пользователь+" -P "+ПараметрыСоединения.Пароль+"  """+ИмяФайла+""" "); 
КонецПроцедуры	

//Открывает запрос в Query Analizer SQL 2000
Процедура КонтМенюОткрытьSQLQA(ИмяФайла) Экспорт
	ИмяФайла=ПолучитьИмяВременногоФайла("sql");
	вСохранитьТекст(ЭлементыФормы.ТекстЗапросаSQL.ПолучитьТекст(),ИмяФайла,КодировкаТекста.ANSI);
	ПараметрыСоединения=ПолучитьПараметрыСоединения();
	Если Не ТипЗнч(ПараметрыСоединения)=Тип("Структура") Тогда
		Сообщить("Не удалось определить параметры подключения",СтатусСообщения.Важное);
		Возврат;
	КонецЕсли;

	ЗапуститьПриложение("isqlw -S"""+ПараметрыСоединения.SQLСервер+""" -d"""+ПараметрыСоединения.DBName+""" -U"""+ПараметрыСоединения.Пользователь+""" -P"""+ПараметрыСоединения.Пароль+""" -f"""+ИмяФайла+""" -F""A"""); 
КонецПроцедуры

//Выполняет SQL запрос
Процедура КонтМенюВыполнитьЗапросSQL(Кнопка)
	ВыполнитьSQLЗапрос();
КонецПроцедуры

//Открывает(загружает) запрос, выражение из файда в консоль
//
Процедура КонтМенюОткрыть(Кнопка)
	Длг = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	Длг.ПолноеИмяФайла = мИмяФайла;
	Длг.Каталог 	= мИмяПути;
	Длг.Заголовок 	= "Выберите файл";
	Длг.Фильтр 		= Кнопка.Подсказка;
	Если Длг.Выбрать() Тогда
		ФайлЗначения = Новый Файл(Длг.ПолноеИмяФайла);
		ПолученноеЗначение=Неопределено;
		Если ФайлЗначения.Существует() Тогда
			Попытка
				ПолученноеЗначение = ЗначениеИзФайла(Длг.ПолноеИмяФайла);
			Исключение
				ТД = Новый ТекстовыйДокумент;
				ТД.Прочитать(Длг.ПолноеИмяФайла);
				ПолученноеЗначение=ТД.ПолучитьТекст();
			КонецПопытки;	
		КонецЕсли;				
		Если ТипЗнч(ПолученноеЗначение) = Тип("Строка") Тогда
			ЭлементыФормы[Кнопка.Пояснение].УстановитьТекст(ПолученноеЗначение);
			Модифицированность = Истина;
		Иначе // Формат файла не опознан
			Предупреждение("Невозможно загрузить тест из указанного файла!
						   |Выберите другой файл.",20);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

//Включеет режим временных таблиц для запросов в MSSQL2000
//Показываем таблицу, в которой будем декларировать колонки и их типы
//
Процедура КонтМенюРежимВТ(Кнопка,ПровертьВерсию=Неопределено)
	Если ПровертьВерсию=Неопределено Тогда
		Если Не ОбработкаСоединения() Тогда
			Возврат;
		Иначе
			Если ПараметрыОкружения.ТипСУБД<>"DBMSSQL" ИЛИ ПараметрыОкружения.ВерсияСУБД>=9000 Тогда 
				Предупреждение("Только для MSSQL 2000",10);
				Возврат;
			КонецЕсли;	
		КонецЕсли;
	КонецЕсли;
	Кнопка.Пометка=Не Кнопка.Пометка;
	Если НЕ ЭлементыФормы.ТекстЗапросаSQL.Высота=ЭлементыФормы.ДеревоЗапросов.Высота Тогда
		ЭлементыФормы.ТекстЗапросаSQL.УстановитьПривязку(ГраницаЭлементаУправления.Низ,ЭлементыФормы.ПанельТекстаЗапроса,ГраницаЭлементаУправления.Низ);
		ЭлементыФормы.ТекстЗапросаSQL.Высота=ЭлементыФормы.ДеревоЗапросов.Высота;
	Иначе
		ЭлементыФормы.ТекстЗапросаSQL.УстановитьПривязку(ГраницаЭлементаУправления.Низ,ЭлементыФормы.РазделительSQL,ГраницаЭлементаУправления.Верх);
		ЭлементыФормы.ТекстЗапросаSQL.Высота=ЭлементыФормы.РазделительSQL.Верх-ЭлементыФормы.ТекстЗапросаSQL.Верх;
	КонецЕсли;
	ЭлементыФормы.ТекстЗапросаSQL.Ширина=ЭлементыФормы.ТипыВТ.Ширина; //ширина иногда была различной причины не вяснены
	ЭлементыФормы.КонтМеню.Кнопки.SQL.Кнопки.ВыполнитьЧерезВТ.Доступность=Кнопка.Пометка;
	ЭлементыФормы.КонтМеню.Кнопки.SQL.Кнопки.ВыполнитьЧерезВТ1.Доступность=Кнопка.Пометка;
КонецПроцедуры

//Показывает колонки текущей временной таблицы
//
Процедура КонтМенюПоказатьКолонкиВТ(Кнопка)
	ВыполнитьSQLЗапросЧерезВТ("Select * From tempdb..##tt",Истина);
КонецПроцедуры

//Очищает результат запроса
//
Процедура КонтМенюОтчиститьРезультаты(Кнопка)
	Данные=Вычислить(ЭлементыФормы[Кнопка.Пояснение].Данные);	
	Если Не ТипЗнч(Данные)=Тип("ДеревоЗначений") Тогда
		Данные.Очистить();	
	Иначе
		Данные.Строки.Очистить();
	КонецЕсли;	
КонецПроцедуры

//Меняем предсставление результата (дерево/таблица)
//
Процедура КонтМенюПредставлениеРезультата(Кнопка)
	вИзменеиеСпособаВыгрузки(Число(Кнопка.Пояснение));
	Модифицированность = Истина;
КонецПроцедуры

//Выполняет запрос 1С или SQL в зависимости от текущей закладки
//
Процедура КонтМенюВыполнитьЗапрос(Кнопка)
	ВыполнитьЗапрос(ЭлементыФормы.ПанельЗапрос.ТекущаяСтраница.Имя);
КонецПроцедуры	

//Открывает окно выбора параметров
//результат выбора вставляем в текст
Процедура КонтМенюПраметры()
	СтруктураДопПараметров	= Новый Структура();
	СтруктураДопПараметров.Вставить("ТекущиеДанные",Новый Структура("ЭтоВыражение,ЗначениеПараметра",Истина));
	СтруктураДопПараметров.Вставить("ЗапретитьВстроенныйЯзык");
	СтруктураДопПараметров.Вставить("ДоступныеСтруктуры",Новый Структура);
		СтруктураПараметров = вПолучитьСтруктуруПараметров();
		СтруктураДопПараметров.ДоступныеСтруктуры.Вставить("Параметры",СтруктураПараметров);
		СтруктураДопПараметров.ДоступныеСтруктуры.Вставить("ЭтаФорма",Новый Структура("РезультатЗапроса",РезультатЗапроса));
	ФормаВыбораТипа			= ПолучитьФорму("ФормаВыбораТипа",ЭтаФорма);
	ФормаВыбораТипа.НачалоВыбора(Новый Структура("Значение",ПолучитьСтр(Неопределено)), Ложь, СтруктураДопПараметров);
 КонецПроцедуры

//Переходит на закладку построителя, 
//если постороитель не создан, генерирует его на основе результатат запроса 
//
Процедура КонтМенюОтборИСортировка(Кнопка)
	вСоздатьПостроительИзТаблицы(Истина);
	ЭлементыФормы.ПанельТекстаЗапроса.ТекущаяСтраница 	= ЭлементыФормы.ПанельТекстаЗапроса.Страницы[0];
	ЭлементыФормы.ПанельЗапрос.ТекущаяСтраница 			= ЭлементыФормы.ПанельЗапрос.Страницы[1];
КонецПроцедуры

//Создает построитель на основе результата запроса
//добавлет в отбор текущее значение и выполняет построитель
//
Процедура КонтМенюОтборПоТекущемуЗначению(Кнопка)
	Если ЭлементыФормы.ТаблицаРезультата.ВыделенныеСтроки.Количество()>0
		И Не ЭлементыФормы.ТаблицаРезультата.ТекущаяКолонка = Неопределено Тогда
		ИмяКолонки	= ЭлементыФормы.ТаблицаРезультата.ТекущаяКолонка.Имя;
		вСоздатьПостроительИзТаблицы(Истина);
		мМассив	= Новый Массив;
		Для Каждого Строка ИЗ ЭлементыФормы.ТаблицаРезультата.ВыделенныеСтроки Цикл
			мМассив.Добавить(Строка);	
		КонецЦикла;	
		вДобавитьОтборВПостроитель(мМассив);
		ВыполнитьЗапрос("ПостроительЗапроса",,,Ложь);
		ТекКолонка = ЭлементыФормы.ТаблицаРезультата.Колонки.Найти(ИмяКолонки);
		Если Не ТекКолонка = Неопределено Тогда
			ЭлементыФормы.ТаблицаРезультата.ТекущаяКолонка = ТекКолонка;
		КонецЕсли;	
	КонецЕсли;	
КонецПроцедуры

 
 //Функция для совместимости с формой выбора типа
//утснавливает текст в выражение
//Параметры:
//	Строка	-<Неопределено>.
//	Текст	-<Строка>. Текст который необходимо сохранить.
Процедура УстановитьСтр(Строка,Текст) Экспорт
	ЭлементыФормы.ТекстМодуля.ВыделенныйТекст	=	Текст;
КонецПроцедуры

///Функция для совместимости с формой выбора типа
//Параметры:
//	Строка	-<Неопределено>
//Вовзращаемое занчение:
//	Текст неограниченной длинны
Функция ПолучитьСтр(Строка)Экспорт
	Возврат ЭлементыФормы.ТекстМодуля.ВыделенныйТекст;	
КонецФункции	

//Используется в подсистеме ИР
//
Процедура ЛксПолеТекстовогоДокументаСКонтекстнойПодсказкойНажатие(Кнопка)
	Если ЭлементыФормы.ПанельТекстаЗапроса.ТекущаяСтраница.Имя = "Предприятие" Тогда
		ПолеТекстовогоДокументаСКонтекстнойПодсказкой["ТекстЗапроса"].Нажатие(Кнопка);
	Иначе	
		ПолеТекстовогоДокументаСКонтекстнойПодсказкой["ТекстМодуля"].Нажатие(Кнопка);
	КонецЕсли;	
КонецПроцедуры

//Формирует таблицу выбранных обработок не основе результата запроса
Процедура КонтМенюОбновить(Кнопка)
	СформироватьТаблицуВыбранныхОбработок(РезультатЗапроса,Истина);
КонецПроцедуры

//Редактируем запрос в конструкторе 
//используется для встроенного языка
Процедура КонтМенюКонструкторЗапроса(Кнопка)
	Текст=МодифицироватьЗапросВКонструкторе(Строка(ЭлементыФормы.ТекстМодуля.ВыделенныйТекст));
	Если Не Текст=Неопределено Тогда
		ЭлементыФормы.ТекстМодуля.ВыделенныйТекст=Текст;
	КонецЕсли;	
КонецПроцедуры

//Выполняет операции с элементом управления ActiveX,
//
Процедура OLAP_Действие(Кнопка)
	Выполнить("ЭлементыФормы.OLAP."+Кнопка.Подсказка);
КонецПроцедуры

//Выполняет анализ результатов запроса
//
Процедура КонтМенюВыполнитьАнализ(Кнопка)
	ВыполнитьАнализ(Тип(Кнопка.Подсказка));
КонецПроцедуры

//Сравнивает два запроса выделенных в дереве
//
Процедура КонтМенюСравнить(Кнопка)
	Сравнение=Новый СравнениеФайлов();
	//определяем какие панели у нас текущие
	Соответсвие=Новый Соответствие;
	Соответсвие.Вставить("Предприятие","ТекстЗапроса");
	Соответсвие.Вставить("Sql","ТекстЗапросаSql");
	Соответсвие.Вставить("Язык","Язык");
	Для каждого Строка из ЭлементыФормы.ДеревоЗапросов.ВыделенныеСтроки Цикл 
	//создаем два файла и открываем их на редактирование
		Если ПустаяСтрока(Сравнение.ПервыйФайл) Тогда 
			Сравнение.ПервыйФайл=ПолучитьИмяВременногоФайла()+" "+СтрЗаменить(Строка.Запрос,":",""); 
			Текст=Новый ЗаписьТекста(Сравнение.ПервыйФайл);
		Иначе
			Сравнение.ВторойФайл=ПолучитьИмяВременногоФайла()+" "+СтрЗаменить(Строка.Запрос,":",""); 
			Текст=Новый ЗаписьТекста(Сравнение.ВторойФайл);
		КонецЕСли;	
		Текст.Записать(Строка[Соответсвие.Получить(ЭлементыФормы.ПанельТекстаЗапроса.ТекущаяСтраница.Имя)]);
		Текст.Закрыть();
	КонецЦикла;	
	
	//сравниваем 
	Сравнение.СпособСравнения=СпособСравненияФайлов.ТекстовыйДокумент;
	Сравнение.ПоказатьРазличия();
КонецПроцедуры

//Перемешает таблицу монитора в результат запроса,
//для возможности дальнейшего анализа
Процедура КонтМенюВРезультатЗапроса(Кнопка)
	вОбнулитьФлагиВыводаРезультатов();
	ТаблицаМонитора = ТЧ.Выгрузить();
	//добавим тип по типам лeгче анализировать статистику
	ТаблицаМонитора.Колонки.Добавить("Тип",Новый ОписаниеТипов("Строка"));
	Для Каждого Строка из  ТаблицаМонитора Цикл
		Если ЗначениеЗаполнено(Строка.Объект) Тогда
			Строка.Тип = ТипЗнч(Строка.Объект);			
		КонецЕсли;	
	КонецЦикла;	
	вЗагрузитьРезультат(ТаблицаМонитора);
КонецПроцедуры

//Изменеяет уровень вложенности у строки выбранных обработок,
//поднимает на уровень вверх
Процедура КонтМенюНаВерхнийУровеньОбработок(Кнопка)
	Если ЭлементыФормы.ВыбранныеОбработки.ТекущаяСтрока.Родитель=Неопределено Тогда
		Возврат;
	КонецЕсли;	
	ОформлениеСтроки=ЭлементыФормы.ВыбранныеОбработки.ОформлениеСтроки(ЭлементыФормы.ВыбранныеОбработки.ТекущаяСтрока);
	Если ОформлениеСтроки.Шрифт.Подчеркивание=Истина Тогда
		Предупреждение("Строка не может быть перемещена",10,"Выбранные обработки Enterprise Integrator");
		Возврат;
	КонецЕсли;
	НоваяСтрока=?(ЭлементыФормы.ВыбранныеОбработки.ТекущаяСтрока.Родитель.Родитель=Неопределено,ВыбранныеОбработки.Строки.Добавить(),ЭлементыФормы.ВыбранныеОбработки.ТекущаяСтрока.Родитель.Родитель.Строки.Добавить());
	ЗаполнитьЗначенияСвойств(НоваяСтрока,ЭлементыФормы.ВыбранныеОбработки.ТекущиеДанные);
	//удаляем строку
	ЭлементыФормы.ВыбранныеОбработки.ТекущаяСтрока.Родитель.Строки.Удалить(ЭлементыФормы.ВыбранныеОбработки.ТекущаяСтрока);
КонецПроцедуры

//Выполняет запрос 1С предворя выделенный текст
//
Процедура КонтМенюВыполнитьПлюс(Кнопка)
	ВыдТекст=ЭлементыФормы.ТекстЗапроса.ПолучитьВыделенныйТекст();
	Если ПустаяСтрока(ВыдТекст) Тогда
		Предупреждение("Не выделен текст запроса",10,"Enterprise Integrator");
		Возврат;
	КонецЕсли;
	ВыполнитьЗапрос(,"Выбрать * Из ",Ложь);
КонецПроцедуры

//Изменяет ширину колонк и таблицы результата,
//числовые данные слишком нещадно растягиваются
Процедура КонтМенюИзменитьШиринуКолонок(Кнопка)
	ШиринаКолонок=20;
	Если ВвестиЗначение(ШиринаКолонок,"Ширина колонок не больше") Тогда
		Для каждого Колонка из ЭлементыФормы.ТаблицаРезультата.Колонки Цикл
			Если Колонка.Ширина>ШиринаКолонок Тогда
				Колонка.Ширина=ШиринаКолонок;
			КонецЕсли;	
		КонецЦикла;
	КонецЕсли;	
КонецПроцедуры

//Формирует выражение на втроенном языке на основе текста запроса
//
Процедура КонтМенюВ_Язык(Кнопка)
	ТекстЗапроса=вПолучитьТекстТекстовогоПоля(Истина,ЭлементыФормы.ТекстЗапроса,Истина);
	СтрокаЗапроса=СтрЗаменить(ТекстЗапроса,Символы.ПС,Символы.ПС+Символы.Таб+"|");
	//так же заменим кавычки запроса 
	//одну меняем на 2 
	СтрокаЗапроса=СтрЗаменить(СтрокаЗапроса,"""","""""");
	Строка="Запрос = Новый Запрос;
	|Запрос.Текст = """+СтрокаЗапроса+""";";
	Если Найти(Нрег(СтрокаЗапроса),"поместить ")> 0 Тогда
		//Используем временные таблицы 
		Строка=Строка+Символы.ПС+"МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		|Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;";
	КонецЕсли;
	
	//пройдемся по праметрам запроса вначале посмотрим из того что есть в таблице
	Если мФормаПараметров.Параметры.Количество()=0 Тогда
		мФормаПараметров.ПолучитьПараметрыТекстаЗапроса(ТекстЗапроса);	
	КонецЕСли;	
	
	//{Начало изменений Кудяков Г.А.  24 января 2008 г. 11:38:50
	//параметры можно выводить по разному можно ссылкой а можно и явно преобразовать в выражение
	Если Кнопка.Имя="ПараметрыКАКСсылки" Тогда 
		Для каждого ПараметрЗапроса Из мФормаПараметров.Параметры Цикл
			ИмяПараметра =  ПараметрЗапроса.ИмяПараметра;
			Строка=Строка+Символы.ПС+"Запрос.УстановитьПараметр("""+ИмяПараметра+""", Параметры."+ИмяПараметра+");";
		КонецЦикла;
	Иначе
		Для каждого ПараметрЗапроса Из мФормаПараметров.Параметры Цикл
			Если ПараметрЗапроса.ЭтоВыражение Тогда
				ТекстДанных=мФормаПараметров.ПолучитьСтр(ПараметрЗапроса)	
			Иначе
				ТекстДанных=ПреобразоватьЗначениеКВыражению(ПараметрЗапроса.ЗначениеПараметра)
			КонецЕсли;	
        	Если  Найти(нрег(СтрЗаменить(ТекстДанных," ","")),"результат=")>0 Тогда
				//значение возвращается в переменную Результат
				Строка =Строка+"
						|//начало вычисления параметра <"+ПараметрЗапроса.ИмяПараметра+">
						|	"+ТекстДанных+"
						|//конец вычисления параметра
						|Запрос.УстановитьПараметр("""+ПараметрЗапроса.ИмяПараметра+""",Результат);
						|	Результат=Неопределено; //обнуляем значение параметра";
			Иначе
				Строка =Строка+"
						|Запрос.УстановитьПараметр("""+ПараметрЗапроса.ИмяПараметра+""", "+ТекстДанных+");";
			КонецЕсли;
		КонецЦикла;			
	КонецЕсли;	
	//Свормируем строку заголовка с учетом родителей Родитель.Родлителя\Родитель\Строка
	СтрокаДерева=Элементыформы.ДеревоЗапросов.ТекущаяСтрока;
	ПутьКЗапросу=СтрокаДерева.Запрос;
	Пока не СтрокаДерева.Родитель=Неопределено Цикл
		ОбработкаПрерыванияПользователя();
		СтрокаДерева=СтрокаДерева.Родитель;
		ПутьКЗапросу=СтрокаДерева.Запрос+"\"+ПутьКЗапросу;
	КонецЦикла;
	ЭлементыФормы.ТекстМодуля.УстановитьТекст(Строка+Символы.ПС+"Результат = Запрос.Выполнить();
	|//ВнешниеОбработки.Создать("""+ЭтотОбъект.ИспользуемоеИмяФайла+""").Отладка(Запрос,,"""+СтрЗаменить(ПутьКЗапросу,"""","""""")+""")
	|//Сгенерировано EI "+Формат(ТекущаяДата(),"ДЛФ=DDT")+" "+?(ПустаяСтрока(мИмяФайла),"файл запросов не сохранен",мИмяФайла)); 
	ЭлементыФормы.ПанельТекстаЗапроса.ТекущаяСтраница=ЭлементыФормы.ПанельТекстаЗапроса.Страницы["Язык"];
КонецПроцедуры

//Формирует выражение на встроеннм языке на основе SQL запроса,
//учитывается режим временных таблиц
Процедура КонтМенюSQLВ_Язык(Кнопка)
	ТекстЗапроса=ЭлементыФормы.ТекстЗапросаSQL.ПолучитьТекст();
	СтрокаЗапроса=СтрЗаменить(ТекстЗапроса,Символы.ПС,Символы.ПС+Символы.Таб+"|");
	//так же заменим кавычки запроса 
	//одну меняем на 2 
	СтрокаЗапроса=СтрЗаменить(СтрокаЗапроса,"""","""""");
	Строка="Conn= Новый COMОбъект(""ADODB.Connection"");
	|Conn.ConnectionString = """+СтрокаПодключения+""";
	|Conn.Open();";
	Если ЭлементыФормы.КонтМеню.Кнопки.sql.Кнопки.РежимВТ.Пометка
		и ТипыВТ.Количество()>0 Тогда
		Строка=Строка+Символы.ПС+"Запрос = Новый Запрос(""ВЫБРАТЬ
		|               |	ТЗ_Null.*
		|               |ПОМЕСТИТЬ ТЗ
		|               |ИЗ
		|               |	&ТЗ КАК ТЗ_Null"");
		|МВТ = Новый МенеджерВременныхТаблиц;
		|Запрос.МенеджерВременныхТаблиц = МВТ;
		|ТЗ=Новый ТаблицаЗначений;";
		Для каждого КолонкаВТ из ТипыВТ Цикл
			Строка=Строка+Символы.ПС+"ТЗ.Колонки.Добавить("""+КолонкаВТ.Имя+""","+ПреобразоватьЗначениеКВыражению(КолонкаВТ.ОписаниеТипов)+");";
		КонецЦикла;	
		Строка=Строка+Символы.ПС+"Запрос.УстановитьПараметр(""ТЗ"", ТЗ);
		|RecSetRead=Conn.Execute(""Select GETDATE() as CDate"");
		|RecSetRead.MoveFirst();
		|ДатаОтсчета=RecSetRead.Fields(0).Value;
		|ДатаОтсчета=""{ts '""+Формат(Год(ДатаОтсчета),""ЧЦ=4; ЧВН=; ЧГ="")+""-""+Формат(Месяц(ДатаОтсчета),""ЧЦ=2; ЧВН="")+""-""+Формат(День(ДатаОтсчета),""ЧЦ=2; ЧВН="")+"" ""+Формат(Час(ДатаОтсчета),""ЧЦ=2; ЧН=; ЧВН="")+"":""+Формат(Минута(ДатаОтсчета),""ЧЦ=2; ЧН=; ЧВН="")+"":""+Формат(Секунда(ДатаОтсчета),""ЧЦ=2; ЧН=; ЧВН="")+""'}"";
		|//создаем временную таблицу 
		|РезультатЗапроса = Запрос.Выполнить();
		|//переименовывем временную таблицу чтобы она была доступна из другой сессии
		|ТекстЗапросаTSQL=""DECLARE @table_name varchar(100)
		|	|--Перименовывем таблицу
		|	|set @table_name = 'temp_'+Left(cast(newid() as varchar(36)),8)
		|	|Select @table_name as table_name
		|	|update tempdb..sysobjects
		|	|set name = @table_name
		|	|where id in (SELECT top 1
		|	|id
		|	|FROM
		|	|tempdb..sysobjects
		|	|WHERE
		|	|Len(Name)=128 and  info >= ""+ТЗ.Колонки.Количество()+"" and
		|	|CRDate >= ""+ДатаОтсчета+"")"";
		|RecSetRead=Conn.Execute(ТекстЗапросаTSQL);
		|RecSetRead.MoveFirst();
		|ИмяВТ=RecSetRead.Fields(0).Value;
        |Conn.Execute(СтрЗаменить(""
		|						//|INSERT INTO tempdb..##tt
		|						|"+СтрокаЗапроса+"
		|						|"",""tempdb..##tt"",""tempdb..""+ИмяВТ));
		|//возвращаем результат
		|Запрос.Текст = ""ВЫБРАТЬ
		|			   |	ТЗ.*
		|			   |ИЗ
		|			   |	ТЗ КАК ТЗ"";
		|Запрос.МенеджерВременныхТаблиц = МВТ;
		|Результат = Запрос.Выполнить();
		|Conn.Execute(""DROP TABLE tempdb..""+ИмяВТ);";
	Иначе
		Строка=Строка+Символы.ПС+"Результат=Conn.Execute("""+СтрокаЗапроса+""");";
	КонецЕсли;
	ЭлементыФормы.ТекстМодуля.УстановитьТекст(Строка);
	ЭлементыФормы.ПанельТекстаЗапроса.ТекущаяСтраница=ЭлементыФормы.ПанельТекстаЗапроса.Страницы["Язык"];
КонецПроцедуры	

//Заполним значение списка отбора из табличного документа
//чтобы в ручную не вводить много позиций
Процедура КонтМенюЗаполнитьЗначения(Кнопка)
	ТекСтрока = ЭлементыФормы.ТабличноеПолеОтбор.ТекущаяСтрока;
	Если ТекСтрока = Неопределено Тогда
		 Предупреждение("Не выбрана строка отбора", 60);
		 Возврат;
	КонецЕсли; 
	ФормаТД = ПолучитьФорму("ТабличныйДокумент");
	ПараметрЗакрытия = ФормаТД.ОткрытьМодально();
	Если ТипЗнч(ПараметрЗакрытия) = Тип("ТаблицаЗначений") Тогда
		ТекСтрока.ВидСравнения = ВидСравнения.ВСписке;
		ТекСтрока.Значение.ЗагрузитьЗначения(ПараметрЗакрытия.ВыгрузитьКолонку(0));
	    ЭлементыФормы.ТабличноеПолеОтбор.ОбновитьСтроки(ТекСтрока);
	КонецЕсли;                                
КонецПроцедуры

//Закрепляет таблицы в контексте которых вызывается данное меню,
//таблицы ставновятся не зависимы от текущей строки дерева запросов
Процедура КонтМенюЗакрепить(Кнопка,Изменять)  Экспорт  //можеть быть восстановлена из значений пометок
	Кнопка.Пометка=?(Изменять=Неопределено,Не Кнопка.Пометка,Кнопка.Пометка);
	Кнопка.Картинка=?(Кнопка.Пометка,
						ПолучитьОбщуюКартинку("НеЗакреплено"),
						ПолучитьОбщуюКартинку("Закреплено"));
	Кнопка.Текст=?(Не Кнопка.Пометка,"Закрепить","Открепить");					
						
КонецПроцедуры

//Переходит к справке на сайте
//
Процедура ПерейтиКСправке(Кнопка)
	Если Не ПустаяСтрока(Кнопка.Пояснение) Тогда
		ЗапуститьПриложение(Кнопка.Пояснение);	
	КонецЕсли;	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////////////
//  РАБОТА С ФЛАЖКАМИ

//Установить влажки для всех
//
Процедура КонтМенюУстановитьФлажки(Кнопка)
	ИзменениеФлажков(Вычислить(Кнопка.Пояснение),Истина);	
КонецПроцедуры // КоманднаяПанельНайденныеОбъектыУстановитьФлажки()

//Снять влажки для всех
//
Процедура КонтМенюСнятьФлажки(Кнопка)
	ИзменениеФлажков(Вычислить(Кнопка.Пояснение),Ложь);	
КонецПроцедуры // КоманднаяПанельНайденныеОбъектыСнятьФлажки()

//Установить флажки только для опеределенного уровня в дереве
//
Процедура КонтМенюУстановитьФлажкиУровня(Кнопка)
	вФлажкиДляУровня(Истина);	
КонецПроцедуры

//Снять флажки только для опеределенного уровня в дереве
//
Процедура КонтМенюСнятьФлажкиУровня(Кнопка)
	вФлажкиДляУровня(Ложь);	
КонецПроцедуры

//Инвертировать флажки
//
Процедура КонтМенюИнвертировать(Кнопка)
	Значение=Истина;
	КолонкаПометки="Пометка_Ei";
	Источник=Вычислить(Кнопка.Пояснение);
	НеЗначение=Не Значение;
	Если Не Источник.Колонки[КолонкаПометки].ТипЗначения=Новый ОписаниеТипов("Булево") Тогда
		Значение=Число(Значение);
		НеЗначение=Число(НеЗначение);
	КонецЕсли;
	СтрокиУст=ПолучитьСтроки(Источник,Значение, Истина);
	СтрокиНеУст=ПолучитьСтроки(Источник,НеЗначение, Истина);
	Для каждого Строка из СтрокиУст Цикл
		Строка["Пометка_Ei"]=НеЗначение;
	КонецЦикла;
	Для каждого Строка из СтрокиНеУст Цикл
		Строка["Пометка_Ei"]=Значение;
	КонецЦикла;
КонецПроцедуры

//Задаем 3 состояния флажка или снимаем
//актульано для дерева
Процедура КонтМенюИзменитьСостояниеФлажков(Кнопка)
	Кнопка.Пометка=Не Кнопка.Пометка;
	ЭлементыФормы.КонтМеню.Кнопки.МенюРезультататЗапроса.Кнопки.Флажки.Кнопки.ТриСостояния.Пометка=Кнопка.Пометка;
	//нужно услановить тип колонки
	Если не РезультатЗапроса.Колонки.Найти("Пометка_Ei")=Неопределено Тогда
		РезультатЗапроса.Колонки.Удалить("Пометка_Ei");
		РезультатЗапроса.Колонки.Вставить(1, "Пометка_Ei", ?(Кнопка.Пометка,Новый ОписаниеТипов("Число"),Новый ОписаниеТипов("Булево")),"Пометка");
	КонецЕсли;	
КонецПроцедуры

//Снимает флажки выще текущей строки,
//актуально при групповой обработке
//
Процедура КонтМенюСнятьФлажкиВышеТекущей(Кнопка)
	//как то обозначаем строку до которой будем очищать
	РезультатЗапроса.Колонки.Добавить("EI_1cv8");
	ЭлементыФормы.ТаблицаРезультата.ТекущиеДанные.EI_1cv8=Истина;
	Строки=ПолучитьСтроки(РезультатЗапроса,Истина);	
	Для каждого Строка из Строки Цикл
		Если Строка.EI_1cv8=Истина Тогда
			Прервать;
		КонецЕсли;	
		Строка["Пометка_Ei"]=Ложь;
	КонецЦикла;
	РезультатЗапроса.Колонки.Удалить("EI_1cv8");
КонецПроцедуры


/////////////////////////////////////////////////////////////////////////////////////////
//	ШАБЛОНЫ

//Возвращет все документы за период
//
Процедура Шблоны_ДокументыЗаПериод(Кнопка)
	НастройкаПериода = Новый НастройкаПериода;
	НастройкаПериода.УстановитьПериод(НачалоМесяца(ТекущаяДата()), КонецМесяца(ТекущаяДата()));
	НастройкаПериода.РедактироватьКакИнтервал = Истина;
	НастройкаПериода.РедактироватьКакПериод = Истина;
	НастройкаПериода.ВариантПериода=ВариантПериода.Месяц;
	НастройкаПериода.ВариантНастройки = ВариантНастройкиПериода.Период;
	Если Не НастройкаПериода.Редактировать() Тогда 
		Возврат;
	КонецЕсли;
	Если 	ЭлементыФормы.ПанельТекстаЗапроса.ТекущаяСтраница.Имя="Язык" Тогда 
		Текст="Запрос = Новый Запрос;
		|Запрос.Текст="""";
		|Для каждого Тип из Параметры.Документы.Типы() Цикл
		|	Если Документы.ТипВсеСсылки().СодержитТип(Тип) Тогда
		|		Мд=Метаданные.НайтиПоТипу(Тип);
		|		Если Мд.Проведение = Метаданные.СвойстваОбъектов.Проведение.Запретить  Тогда
		|			Продолжить;
		|		КонецЕсли;
		|		Запрос.Текст=Запрос.Текст+"" ВЫБРАТЬ
		|		|""+Мд.Имя+""_.Ссылка,
		|		|""+Мд.Имя+""_.МоментВремени КАК Дата
		|		|	ИЗ
		|		|		Документ.""+Мд.Имя+"" КАК ""+Мд.Имя+""_
		|		|	ГДЕ
		|		|		""+Мд.Имя+""_.Дата МЕЖДУ &ДатаНачало И &ДатаКонец
		|		|		И ""+Мд.Имя+""_.Проведен = &Проведен
		|		|ОБЪЕДИНИТЬ ВСЕ"";
		|	КонецЕсли;	
		|КонецЦикла;
		|//Убираем объединить все в 
		|Запрос.Текст=Сред(Запрос.Текст,1,СтрДлина(Запрос.Текст)-14);
		|//Добавляем упорядочивание 
		|Запрос.Текст=Запрос.Текст+""УПОРЯДОЧИТЬ ПО
		|	|Дата"";
		|Запрос.УстановитьПараметр(""ДатаНачало"", Параметры.ДатаНачало);
		|Запрос.УстановитьПараметр(""ДатаКонец"",Параметры.ДатаКонец);
		|Запрос.УстановитьПараметр(""Проведен"", Параметры.Проведен);
	    |
		|Результат = Запрос.Выполнить();";
	    ЭлементыФормы.ТекстМодуля.УстановитьТекст(Текст);
	   	//специфичный параметр
		//Документы.ТипВсеСсылки() использоватеь нельзя в диалоге не полуичтся выбрать
		МассивТипов = Новый Массив;
		Для каждого Документ из Метаданные.Документы Цикл
			МассивТипов.Добавить(Тип("ДокументСсылка."+Документ.Имя));
		КонецЦикла;	
		вВставитьПараметр("Документы",Новый ОписаниеТипов(МассивТипов));
	Иначе
		Текст="";
		Для каждого мд из Метаданные.Документы Цикл 
				Текст=Текст+" ВЫБРАТЬ
				|"+Мд.Имя+"_.Ссылка,
				|"+Мд.Имя+"_.МоментВремени КАК Дата
				|	ИЗ
				|		Документ."+Мд.Имя+" КАК "+Мд.Имя+"_
				|	ГДЕ
				|		"+Мд.Имя+"_.Дата МЕЖДУ &ДатаНачало И &ДатаКонец
				|		И "+Мд.Имя+"_.Проведен = &Проведен
				|ОБЪЕДИНИТЬ ВСЕ";
		КонецЦикла;
		//Убираем объединить все в 
		Текст=Сред(Текст,1,СтрДлина(Текст)-14);
		//Добавляем упорядочивание 
		Текст=Текст+"УПОРЯДОЧИТЬ ПО
									|Дата";
		ЭлементыФормы.ТекстЗапроса.УстановитьТекст(Текст);
		//активизиркм страницу
		ЭлементыФормы.ПанельТекстаЗапроса.ТекущаяСтраница=ЭлементыФормы.ПанельТекстаЗапроса.Страницы["Предприятие"];
	КонецЕсли;
	//теперь заполним парметры
	вВставитьПараметр("ДатаНачало",НастройкаПериода.ПолучитьДатуНачала());
	вВставитьПараметр("ДатаКонец",НастройкаПериода.ПолучитьДатуОкончания());
	вВставитьПараметр("Проведен",Истина);

КонецПроцедуры

//Выполняет запрос к произвольному источнику данных
//
Процедура Шаблоны_ADO(Кнопка)
	NewDataLink=Новый COMОбъект("DataLinks");
	Conn= Новый COMОбъект("ADODB.Connection");
	//Conn.ConnectionString = "";
	NewDataLink.PromptEdit(Conn);
	Если ПустаяСтрока(Conn.ConnectionString) Тогда
		Возврат;
	КонецЕсли;
	Текст="//подключение
	|Conn= Новый COMОбъект(""ADODB.Connection"");
	|Conn.ConnectionString = """+Conn.ConnectionString+""";
	|//Conn.ConnectionTimeout=0;
	|//Conn.CursorLocation=3;
	|Conn.Open();
	|//************Текст запроса 
	|//ТекстЗапроса=""SELECT 
	|//				|	* 
	|//				|FROM Table1
	|//				|INNER  JOIN 
	|//				|		ON
	|//             |WHERE
	|//				|GROUP BY
	|//				|		ORDER BY
	|				|"";
	|Результат=Conn.Execute(ТекстЗапроса);";

	ЭлементыФормы.ТекстМодуля.УстановитьТекст(Текст);
	//активизиркм страницу
	ЭлементыФормы.ПанельТекстаЗапроса.ТекущаяСтраница=ЭлементыФормы.ПанельТекстаЗапроса.Страницы["Язык"];
КонецПроцедуры

//Выполняет запрос к Excel
//
Процедура Шаблоны_Excel(Кнопка)
	//Выбор Файла 
	ИмяФайла=ВосстановитьЗначение("Шаблоны_Excel_ИмяФайла");
	ИмяПути=ВосстановитьЗначение("Шаблоны_Excel_ИмяПути");
	Длг = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	Длг.ПолноеИмяФайла = мИмяФайла;
	Длг.Каталог = мИмяПути;
	Длг.Заголовок = "Выберите файл для импорта данных";
	Длг.Фильтр = "Книга Excel (*.xls)|*.xls|Все файлы (*.*)|*.*";
	Длг.Расширение = "xls";
	Если Длг.Выбрать() Тогда
		ИмяФайла = Длг.ПолноеИмяФайла;
		ИмяПути = Длг.Каталог;
		//сохраняем значения
		СохранитьЗначение("Шаблоны_Excel_ИмяФайла",ИмяФайла);
		СохранитьЗначение("Шаблоны_Excel_ИмяПути",ИмяПути);
	Иначе
		Возврат;
	КонецЕсли;	
    //набрасываем вначале строку соединения 
	Conn= Новый COMОбъект("ADODB.Connection");
	Conn.ConnectionString = "Provider=Microsoft.Jet.OLEDB.4.0;Data Source="+ИмяФайла+";Extended Properties=""Excel 8.0;IMEX=1;""";
	//провери сколько в этом файле листов 
	Conn.Open();
	Catalog = Новый COMОбъект("ADOX.Catalog");
	Catalog.ActiveConnection = Conn;
	сз=Новый СписокЗначений;
	Для iCount = 0 По Catalog.Tables.Count-1 Цикл
		Если Catalog.Tables.Item(iCount).Type <> "VIEW" Тогда
			сз.Добавить(Catalog.Tables.Item(iCount).Name);
		КонецЕсли;
	КонецЦикла;
	//есл лсит один нам некчему показывать список выбора листов
	Если сз.Количество()=1 Тогда
		ВыбранныйЛист=сз[0];
	ИначеЕсли сз.Количество()>1 Тогда 	
		//Покажем список 
		ВыбранныйЛист=сз.ВыбратьЭлемент("Выберите лист книги");
		//если лист не выбрали 
		Если ВыбранныйЛист=Неопределено Тогда 
			Возврат;
		КонецЕСли;	
	Иначе
		Предупреждение("В книге нет листов",,"Шаблон загрузка данных из файла Excel");
		Возврат;
	КонецЕсли;
	вВставитьПараметр("ИмяФайла",ИмяФайла);
	//параметр строка с имнем колонок если ложь тогда имена колонок есть тоже на что ссылаются формулы в Excel тоесть 
	//F1 и т.д. если истина тогда из это строки берутся данные для имен колонок
	вВставитьПараметр("ЗаголовкиКолонокИменаСтолбцов",Ложь);
	//теперь разберемся со строкой соединения изменм ее с учетом использования параметров
	СтрокаСоединения="Provider=Microsoft.Jet.OLEDB.4.0;Data Source=""+Параметры.ИмяФайла+"";Extended Properties=""""Excel 8.0;""+?(Параметры.ЗаголовкиКолонокИменаСтолбцов,""HDR=NO;"","""")+""IMEX=1;""""";
	//теперь собственно текст  с учетом параметров
	Текст="//подключение
	|Conn= Новый COMОбъект(""ADODB.Connection"");
	|Conn.ConnectionString = """+СтрокаСоединения+""";
	|//Conn.ConnectionTimeout=0;
	|//Conn.CursorLocation=3;
	|Conn.Open();
	|//************Текст запроса 
	|ТекстЗапроса=""SELECT 
	|				|	* 
	|				|FROM ["+ВыбранныйЛист+"]
	|//				|INNER  JOIN 
	|//				|		ON
	|//             |WHERE
	|//				|GROUP BY
	|//				|		ORDER BY
	|				|"";
	|Результат=Conn.Execute(ТекстЗапроса);";
	ЭлементыФормы.ТекстМодуля.УстановитьТекст(Текст);
	//активизиркм страницу
	ЭлементыФормы.ПанельТекстаЗапроса.ТекущаяСтраница=ЭлементыФормы.ПанельТекстаЗапроса.Страницы["Язык"];
КонецПроцедуры

//Показывает информацию о пользователях 
//
Процедура Шаблоны_Пользователи(Кнопка)
	Текст="ТЗ=Новый ТаблицаЗначений();
	|ПользователиИБ=ПользователиИнформационнойБазы.ПолучитьПользователей();
	|Свойства=Новый Структура(""АутентификацияОС,АутентификацияСтандартная,ЗапрещеноИзменятьПароль,Имя,ОсновнойИнтерфейс,Пароль,ПарольУстановлен,ПоказыватьВСпискеВыбора,ПолноеИмя,ПользовательОС,Роли,РолиСтрокой,УникальныйИдентификатор,Язык"");
	|Для Каждого Эл из Свойства Цикл
	|	ТЗ.Колонки.Добавить(Эл.Ключ);
	|КонецЦикла;
	|Для Каждого Эл ИЗ ПользователиИБ Цикл
	|	Стр=ТЗ.Добавить();
	|	Для Каждого ЭлСтр ИЗ  Свойства Цикл
	|		Попытка
	|			Ключ=ЭлСтр.Ключ;
	|			Если Ключ=""РолиСтрокой"" Тогда
	|				Зн="""";
	|				Для Каждого ЭлРоль ИЗ Эл.Роли Цикл
	|					Зн=Зн+?(Зн="""", """", "";"")+ЭлРоль;
	|				КонецЦикла;
	|			Иначе
	|				Зн=Эл[Ключ];
	|			КонецЕсли;
	|			Стр[Ключ]=Строка(Зн);
	|		Исключение
	|		КонецПопытки;
	|	КонецЦикла;
	|КонецЦикла;
	|Результат=ТЗ;";
	ЭлементыФормы.ТекстМодуля.УстановитьТекст(Текст);
	//активизиркм страницу
	ЭлементыФормы.ПанельТекстаЗапроса.ТекущаяСтраница=ЭлементыФормы.ПанельТекстаЗапроса.Страницы["Язык"];
КонецПроцедуры

//Импорт данных из текстового фала
//
Процедура Шаблоны_Text(Кнопка)
    //Выбор Файла 
    Длг = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
    //Длг.ПолноеИмяФайла = мИмяФайла;
    //Длг.Каталог = мИмяПути;
    Длг.Заголовок = "Выберите файл для импорта данных";
    Длг.Фильтр = "Текстовый файл (*.csv;*.txt)|*.csv;*.txt|Все файлы(*.*)|*.*";
    Длг.Расширение = "txt";        
    Если Не Длг.Выбрать() Тогда
         Возврат;
	КонецЕсли;
	вВставитьПараметр("ИмяФайла",Длг.ПолноеИмяФайла);
	вВставитьПараметр("ПерваяСтрока_ИменаСтолбцов",Истина);

    //теперь собственно текст  с учетом параметров
    Текст="
	|Файл = Новый Файл(Параметры.ИмяФайла);
	|Если Файл.Существует() Тогда
	|	//подключение
    |   Conn= Новый COMОбъект(""ADODB.Connection"");
    |	Если Параметры.ПерваяСтрока_ИменаСтолбцов Тогда
    |        Conn.ConnectionString = ""Driver={Microsoft Text Driver (*.txt; *.csv)};Dbq=""+Файл.Путь+"";Extensions=asc,csv,tab,txt;HDR=NO;Persist Security Info=False"";
    |   Иначе
    |        Conn.ConnectionString = ""Provider=Microsoft.Jet.OLEDB.4.0;Data Source=""+Файл.Путь+"";Extended Properties='text;HDR=NO;FMT=Delimited'""; 
    |   КонецЕсли;
    |   //Conn.ConnectionTimeout=0;
    |   //Conn.CursorLocation=3;
    |   Conn.Open();
    |   //************Текст запроса 
    |   ТекстЗапроса=""Select * from ""+Файл.Имя;
    |   //************
    |   Результат=Conn.Execute(ТекстЗапроса);
	|КонецЕсли;";
    ЭлементыФормы.ТекстМодуля.УстановитьТекст(Текст);
    //активизиркм страницу
    ЭлементыФормы.ПанельТекстаЗапроса.ТекущаяСтраница=ЭлементыФормы.ПанельТекстаЗапроса.Страницы["Язык"];
КонецПроцедуры

//Получает идентификатор метаданных
//
Процедура Шаблоны_ПереборОбъектовМетаданных(Кнопка)
	вВставитьПараметр("ТипыМД",Новый ОписаниеТипов);
	вВставитьПараметр("ИзмененныеМД",Новый СписокЗначений); //для регистрации версий
	Текст="Результат=Новый ТаблицаЗначений;
	|Результат.Колонки.Добавить(""Имя"");
	|Результат.Колонки.Добавить(""FileName"");
	|Для каждого Объект из Справочники.ТипВсеСсылки().Типы() Цикл
	|//Для каждого Объект из Параметры.ТипыМД.Типы() Цикл       //выбранные типы
	|//Для Каждого Объект ИЗ Метаданные.Обработки Цикл          //не ссылочные типы
	|	Мета=Неопределено;
	|	Мета=?(ТипЗнч(Объект)=Тип(""ОбъектМетаданных""),Объект,Метаданные.НайтиПоТипу(Объект));
	|	Если Не Мета=Неопределено Тогда
	|		НоваяСтрока=Результат.Добавить();
	|		НоваяСтрока.Имя=Мета.ПолноеИмя();
	|		НоваяСтрока.FileName=ПолучитьИД_ИзСсылки(Мета); // получаем идентификатор САМОЕ ГЛАВНОЕ
	|	КонецЕсли;	
	|КонецЦикла;
	|
	|Результат.Сортировать(""Имя Возр"");
	|
	|//ОбновитьВерсииИзменныхМетаданных(Параметры.ИзмененныеМД); //Регистрации версий для измененных метаданных, используется после групповой обработки";
	ЭлементыФормы.ТекстМодуля.УстановитьТекст(Текст);
	//активизиркм страницу
	ЭлементыФормы.ПанельТекстаЗапроса.ТекущаяСтраница=ЭлементыФормы.ПанельТекстаЗапроса.Страницы["Язык"];
КонецПроцедуры	

//Формирует таблицу на основе регуляного выражения
//
Процедура Шаблоны_РегулярныеВыражения(Кнопка)
	вВставитьПараметр("ИмяФайла","C:\Text.txt");
    Текст="ТекстДок=Новый ТекстовыйДокумент;
			|ТекстДок.Прочитать(Параметры.ИмяФайла);
			|Текст=ТекстДок.ПолучитьТекст();
			|RegExp = Новый COMОбъект(""VBScript.RegExp"");
			|RegExp.IgnoreCase = Истина;
			|RegExp.MultiLine = Истина;
			|RegExp.Global = Истина;
			|RegExp.Pattern = ""{(\d*),(\d*)}""; //ШАБЛОН РЕГУЛЯНОГО ВЫРАЖЕНИЯ
			|Вхождения = RegExp.Execute(Текст);
			|Результат=Неопределено;
			|Для Каждого Вхождение из Вхождения Цикл
			|	Если Результат=Неопределено Тогда
			|		Результат=Новый ТаблицаЗначений;
			|		Для Колонка=1 по Вхождение.SubMatches.Count Цикл
			|			Результат.Колонки.Добавить(""Колонка""+(Колонка-1),Новый ОписаниеТипов(""Строка""));
			|		КонецЦикла;
			|	КонецЕсли;
			|	НоваяСтрока=Результат.Добавить();
			|	Для каждого Колонка из Результат.Колонки Цикл
			|		НоваяСтрока[Результат.Колонки.Индекс(Колонка)]=Вхождение.SubMatches(Результат.Колонки.Индекс(Колонка));		
			|	КонецЦикла;
			|	Состояние(Результат.Количество());
			|КонецЦикла;
			|
			|// \ 			Помечает следующий за ним символ как специальный символ, литерал, обратную ссылку или восьмеричную escape-последовательность. Например, 'n' соответствует символу 'n', а '\n ' уже соответствует символу новой строки. Последовательность '\\' соответствует '\', '\(' соответствует '('. 
			|// ^ 			Соответствует положению в начале входной строки. Если свойство Multiline объекта RegExp установлено в значение True, ^ также соответствует и положению после '\n' или '\r'. 
			|// $ 			Соответствует положению в конце входной строки. Если свойство Multiline объекта RegExp установлено в значение True, $ также соответствует и положению перед '\n' или '\r'. 
			|// * 			Соответствует повторению предшествующего подвыражения ноль или более раз. Например, 'zo*' соответствует 'z' и 'zoo'. * является эквивалентом {0,}. 
			|// + 			Соответствует повторению предшествующего подвыражения один или более раз. Например, 'zo+' соответствует 'zo' и 'zoo', но не соответствует 'z'. + является эквивалентом {1,}. 
			|// ? 			Соответствует повторению предшествующего подвыражения ноль или один раз. Например, 'do(es)?' соответствует 'do' в 'do' или в 'does'. ? является эквивалентом {0,1} 
			|// {n} 		n является положительным целым числом. Соответствует точно n-ному количеству повторений. Например, 'o{2}' не соответствует 'o' в 'Bob', но соответствует 2-ум 'o' в 'food'. 
			|// {n,} 		n является положительным целым числом. Соответствует хотя бы n-ному количеству повторений. Например, 'o{2,}' не соответствует 'o' в 'Bob' но соответствует всем 'o' в 'foooood'. 'o{1,}' является эквивалентом 'o+'. 'o{0,}' является эквивалентом 'o*'. 
			|// {n,m} 		m и n это положительные целые числа, причем n <= m. Соответствует хотя бы n-ому и не более чем m-ому числу повторений. Например, 'o{1,3}' соответствует первым трем 'o' в 'fooooood'. 'o{0,1}' является эквивалентом 'o?'. Обратите внимание, что Вы не можете размещать пробел между запятой и цифрами. 
			|// ? 			Когда этот символ следует непосредственно за любым другим квантификатором (*, +, ?, {n}, {n,}, {n,m}), тогда шаблон соответствия становится 'нежадным'. 'Нежадный' шаблон соответствует насколько это возможно минимальной части строки, в которой производится поиск, в то время как заданный по умолчанию 'жадный' шаблон соответствует максимально возможно большей части этой строки. Например, 'o+?' в строке 'oooo' соответствует одиночному 'o', в то время как 'o+' соответствует всем 'o'. 
			|// . 			Соответствует любому одиночному символу, кроме '\n'. Чтобы шаблон соответствовал любому одиночному символу, включая и '\n', используйте выражение '[.\n]'. 
			|// (шаблон) 	Соответствует шаблону и фиксирует это соответствие. Сохраненное соответствие может быть извлечено из коллекции соответствий с помощью объекта SubMatches в VBScript или с помощью свойств $0…$9 в JScript. Чтобы добиться соответствия самим символам круглых скобок ( ), используйте '\(' или '\)'. 
			|// (?:шаблон) 	Соответствует шаблону, но при этом не фиксирует это соответствие, то есть является соответствием, не сохраняемым для возможного будущего использования. Удобно применять при объединении частей шаблона с помощью (|) (символа 'ИЛИ'). Например, выражение 'industr(?:y|ies)' является более экономичным, чем выражение 'industry|industries'. 
			|// (?=pattern)	Положительное 'заглядыванием вперед'. Соответствует исходной строке в любой точке где начинается соответствие шаблону. Это нефиксируемое соответстствие, а это означает то, что найденное совпадение не сохраняется для возможного последующего использования. Например, 'Windows (?=95|98|NT|2000)' соответствует фрагменту 'Windows ' в строке 'Windows 98', но не соответствует ему в строке 'Windows 3.1'. 'Заглядыванием вперед' не поглощает символы, что означает, что после сопоставления поиск продолжается с позиции, следующей непосредственно за найденным соответствием, а не после символов, включенных в заглядывание вперед. 
			|// (?!pattern)	Отрицательное 'заглядыванием вперед'. Соответствует исходной строке в любой точке где нет начала соответствия шаблону. Это нефиксируемое соответстствие, что означает то, что найденное совпадение не сохраняется для возможного последующего использования. Соответствие с 'заглядыванием вперед', происходит при несоответствии строки pattern и без запоминания найденного соответствия. Например, /Windows (?!95|98|NT|2000)/ соответствует фрагменту 'Windows ' в строке 'Windows 3.1', но не соответствует в строке 'Windows 98'. 'Заглядыванием вперед' не поглощает символы, что означает, что после сопоставления поиск продолжается с позиции, следующей непосредственно за найденным соответствием, а не после символов, включенных в заглядывание вперед. 
			|// x|y 		Соответствует или x, или y. Например, 'z|food' соответствует 'z' или 'food'. '(z|f)ood' соответствует 'zood' или 'food'.  
			|// [xyz] 		Набор символов. Соответствует любому из заключенных в квадратные скобки символов. Например, '[abc]' соответствует 'a' в 'plain'.  
			|// [^xyz] 		Отрицательный набор символов. Соответствует любому символу, кроме заключенных в квадратные скобки. Например, '[^abc]' соответствует 'p' в 'plain'.  
			|// [a-z] 		Диапазон символов. Соответствует любому символу из указанного диапазона. Например, '[a-z]' соответствует любому алфавитному символу в нижнем регистре в диапазоне от 'a' до 'z'.  
			|// [^a-z] 		'Отрицательный' диапазон символов. Соответствует любому символу вне указанного диапазона. Например, '[^a-z]' соответствует любому алфавитному символу, не входящему в диапазон от 'a' до 'z'.  
			|// \b 			Соответствует границе слова, то есть позиции между словом и пробелом. Например, 'er\b' соответствует 'er' в 'never', но не соответствует 'er' в 'verb'.  
			|// \B 			Соответствует всем символам, кроме границы слов. 'er\B' соответствует 'er' в 'verb', но не 'er' в 'never'.  
			|// \cx 		Соответсвует управляющему символу, указанному в x. К примеру, \cM соответстсвует Ctrl-M или символу перевода каретки. Значение x должно находиться в диапазоне A-Z или a-z. Если это не так, c рассматривается как обычная буква 'c'.  
			|// \d 			Соответствует цифре. Эквивалентно [0-9].  
			|// \D 			Соответствует нецифровому символу. Эквивалентно [^0-9].  
			|// \f 			Соответствует символу подачи бланка (FF). Эквивалентно \x0c и \cL. 
			|// \n 			Соответствует символу перевода строки (LF). Эквивалентно \x0a и \cJ. 
			|// \r 			Соответствует символу возврата каретки (CR). Эквивалентно \x0d и \cM. 
			|// \s 			Соответствует любому пробельному символу, включая пробел, табулятор и т.д. Эквивалентно [ \f\n\r\t\v]. 
			|// \S 			Соответствует любому непробельному символу. Эквивалентно [^ \f\n\r\t\v].  
			|// \t 			Соответствует символу табуляции (HT). Эквивалентно \x09 и \cI. 
			|// \v 			Соответствует символу вертикальной табуляции (VT). Эквивалентно \x0b и \cK. 
			|// \w 			Соответствует латинской букве, цифре или подчеркиванию. Эквивалентно '[A-Za-z0-9_]'. "; 

	ЭлементыФормы.ТекстМодуля.УстановитьТекст(Текст);		
КонецПроцедуры	

//Загружаем таблицу из XML на основе запросов Xpath
//
Процедура Шаблоны_XML(Кнопка)
	//Выбор Файла 
    Длг = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
    Длг.Заголовок = "Выберите файл для импорта данных";
    Длг.Фильтр = "Xml файл (*.xml)|*.xml|Все файлы(*.*)|*.*";
    Длг.Расширение = "xml";        
    Если Не Длг.Выбрать() Тогда
         Возврат;
	КонецЕсли;
	вВставитьПараметр("ИмяФайла",Длг.ПолноеИмяФайла);

	Текст = "//Инициализация
	|xmlDoc = Новый COMОбъект(""Msxml2.DOMDocument"");
	|xmlDoc.async = false;
	|xmlDoc.resolveExternals = false;
	|xmlDoc.load(Параметры.ИмяФайла);
	|xmlDoc.setProperty(""SelectionLanguage"", ""XPath"");
	|
	|Результат = Новый  ТаблицаЗначений;
	|
	|Если  xmlDoc.parseError.errorCode <> 0 тогда
	|	myError = xmlDoc.parseError;
	|	Сообщить(""You have error "" + myError.reason);
	|Иначе
	|	//ЗАПОЛНИТЕ ЭТУ СТРУКТУРУ
	|
	|	Структура = Новый Структура;
	|	Структура.Вставить(""UID"",""/Project/Tasks/Task/PredecessorLink/parent::*/UID"");
	|	Структура.Вставить(""PredecessorUID"",""/Project/Tasks/Task/PredecessorLink/PredecessorUID"");
	|	Структура.Вставить(""Type"",""/Project/Tasks/Task/PredecessorLink/Type"");
	|    Структура.Вставить(""LinkLag"",""/Project/Tasks/Task/PredecessorLink/LinkLag"");
	|	
	|	СтрЗапроса = """";
	|	Для Каждого Элемент из Структура цикл
	|		СтрЗапроса 	= СтрЗапроса +""|""+ Элемент.Значение;
	|	КонецЦикла;
	|	СтрЗапроса = Сред(СтрЗапроса,2);
	|	objNodeList = xmlDoc.documentElement.selectNodes(СтрЗапроса);
	|	Если objNodeList.length > 0 Тогда
	|		СписокОжТэгов = Новый СписокЗначений();
	|		Для Каждого Элемент Из Структура Цикл
	|			Колонка = Результат.Колонки.Добавить(Элемент.Ключ);
	|			СписокОжТэгов.Добавить(Элемент.Ключ);
	|		КонецЦикла;
	|		Для Каждого Элемент Из Структура Цикл
	|			СписокОжТэгов.Добавить(Элемент.Ключ);
	|			ПервыйТэг = Элемент.Ключ;
	|			Прервать;  //для зациивания ожидаемых тэгов
	|		КонецЦикла;	
	|		ОжидТэг = """";
	|		НоваяСтрока = Неопределено;
	|		Для Каждого objNode ИЗ objNodeList Цикл
	|			Если Не ОжидТэг = objNode.tagName ИЛИ objNode.tagName = ПервыйТэг Тогда
	|				//добавляем строку и копируем предыдущие значения
	|				Скопировать = Ложь;
	|				Если Не НоваяСтрока = Неопределено Тогда
	|					//проставим пустые значения
	|					Пока Не ОжидТэг = ПервыйТэг Цикл
	|						НоваяСтрока[ОжидТэг] = """";
	|						ОжидТэг = СписокОжТэгов.Получить(СписокОжТэгов.Индекс(СписокОжТэгов.НайтиПоЗначению(ОжидТэг))+1).Значение;
	|					КонецЦикла;
	|					ЗаполнитьЗначенияСвойств(Структура,НоваяСтрока);
	|					Скопировать = Истина;
	|				КонецЕсли;	
	|				НоваяСтрока = Результат.Добавить();
	|				Если Скопировать Тогда
	|					ЗаполнитьЗначенияСвойств(НоваяСтрока,Структура);
	|				КонецЕсли;
	|				СписокКолонок = """";
	|			КонецЕсли;
	|			НоваяСтрока[objNode.tagName] = objNode.Text;
	|			//опредяляем ожидаемый тэг
	|			ОжидТэг = СписокОжТэгов.Получить(СписокОжТэгов.Индекс(СписокОжТэгов.НайтиПоЗначению(objNode.tagName))+1).Значение;
	|		КонецЦикла;	
	|	КонецЕсли;	
	|КонецЕсли;";
    ЭлементыФормы.ТекстМодуля.УстановитьТекст(Текст);
    //активизиркм страницу
    ЭлементыФормы.ПанельТекстаЗапроса.ТекущаяСтраница=ЭлементыФормы.ПанельТекстаЗапроса.Страницы["Язык"];
КонецПроцедуры



///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ ТАБЛИЧНОГО ПОЛЯ ТАБЛИЧНОГО ПОЛЯ ДОСТУПНЫЕ ОБРАБОТКИ

//Устанавливаем картинку обработки
//
Процедура ДоступныеОбработкиПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	ОформлениеСтроки.Ячейки.Обработка.ОтображатьКартинку = Истина;
	Если ДанныеСтроки.Родитель = Неопределено  Тогда
		Если ТипЗнч(ДанныеСтроки.Картинка) = Тип("Картинка") Тогда
			ОформлениеСтроки.Ячейки.Обработка.Картинка = ДанныеСтроки.Картинка;
		КонецЕсли;	
	Иначе
		ОформлениеСтроки.Ячейки.Обработка.ИндексКартинки = 1;
	КонецЕсли;
	ОформлениеСтроки.Ячейки.Функция.ОтображатьКартинку 	= Истина;
	ОформлениеСтроки.Ячейки.Функция.ОтображатьТекст  	= Ложь;
    ОформлениеСтроки.Ячейки.Функция.ИндексКартинки 		= 1-Число(ДанныеСтроки.Функция);

КонецПроцедуры // ДоступныеОбработкиПриВыводеСтроки()

//Ищем текущую обработку в выбранных и позиционируемся на ней
//
Процедура ДоступныеОбработкиПриАктивизацииСтроки(Элемент)
	Позиция	= вОпределитьПозициюОбработки(Элемент.ТекущиеДанные.Обработка);
	Если Не Позиция	= Неопределено И ТекущийЭлемент = Элемент Тогда
		Если Позиция.Колонка.Видимость Тогда
			ЭлементыФормы.ВыбранныеОбработки.ТекущаяКолонка		= Позиция.Колонка;		
		КонецЕсли;	
		ЭлементыФормы.ВыбранныеОбработки.ТекущаяСтрока		= Позиция.Строка;
		ТекущийЭлемент	= ЭлементыФормы.ДоступныеОбработки;
	КонецЕсли;	
КонецПроцедуры

//Открытие групповой обработки
//
Процедура ДоступныеОбработкиВыбор(Элемент, ВыбраннаяСтрока, Колонка, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	Если ВыбраннаяСтрока.Уровень()=0 Тогда
		Позиция	= Новый Структура();
	Иначе
		Позиция = вОпределитьПозициюОбработки(ВыбраннаяСтрока.Обработка);	
		Если  Позиция = Неопределено Тогда
			Позиция	= Новый Структура();
		КонецЕсли;	
	КонецЕсли;
	
	ФормаОбр	= вПолучитьОбработку(ВыбраннаяСтрока,Позиция);
	Если Не ФормаОбр=Неопределено Тогда
		ФормаОбр.Открыть();
	КонецЕсли;
КонецПроцедуры // ДоступныеОбработкиВыбор()

//Проверка перетаскивания на дерево достпных обработок
//при перемешении на встроенный язык для некоторых обработок будем показывать алгоритм на встроеннм языке
//
Процедура ДоступныеОбработкиПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Колонка)
		//Если   	ТипЗнч(Строка)							= Тип("СтрокаДереваЗначений")
		//	И  	ТипЗнч(ПараметрыПеретаскивания.Значение)= Тип("СтрокаДереваЗначений")
		//	И 	Нрег(Строка.Обработка)="произвольный алгоритм" Тогда
		//	ПараметрыПеретаскивания.Действие	= ПараметрыПеретаскивания.Значение.Действие;
		//	ИмяФормы							= вПолучитьСтрокуДоступнойОбработки(ПараметрыПеретаскивания.Значение).ИмяФормы;
		//	Если Не ПолучитьФорму(ИмяФормы).сзПреобразованиеДСтрокаДереваЗначенийляДействий.НайтиПоЗначению(ПараметрыПеретаскивания.Действие)=Неопределено Тогда
		//		//Разрешаем преобразование
		//		СтандартнаяОбработка=Ложь;
		//	КонецЕсли;
		//КонецЕсли;
КонецПроцедуры

//Начало перетаскивание, в выбранные обработки
//
Процедура ДоступныеОбработкиНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка)
	//запрешеаем перетаскивание если результатов запроса нет и структура таблицы 
	//выбранных обработок еще не сформированна
	Если ВыбранныеОбработки.Колонки.Количество()=0 Тогда
		ПараметрыПеретаскивания.Действие=ДействиеПеретаскивания.Отмена;
	Иначе
		Если Не ПараметрыПеретаскивания.Значение.Действие = Неопределено Тогда
			ПараметрыПеретаскивания.Действие	= ПараметрыПеретаскивания.Значение.Действие;
		КонецЕсли;	
	КонецЕсли;
	
	//чтобы было доступно перетаскивание должна быть хотя бы одна строка в выбранных обработках
	Если ВыбранныеОбработки.Строки.Количество()=0 Тогда
		НоваяСтрока=ВыбранныеОбработки.Строки.Добавить();
		НоваяСтрока["Пометка_Ei"]=Истина;                                      
		ЭлементыФормы.ВыбранныеОбработки.ОбновитьСтроки();   	
	КонецЕсли;	
КонецПроцедуры

//Разрешаем копировать только вложенные строки
//
Процедура ДоступныеОбработкиПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель)
	Если Не Копирование Тогда
		Отказ = Истина; // Добавляем только через перетаскивание на колонку
	Иначе
		Если Элемент.ТекущиеДанные.Родитель = Неопределено Тогда
			Отказ = Истина;
		КонецЕсли;	
	КонецЕсли; 	//	
КонецПроцедуры // ДоступныеОбработкиПередНачаломДобавления()

//Разрешаем удалять только настройки
//
Процедура ДоступныеОбработкиПередУдалением(Элемент, Отказ)
	Если Элемент.ТекущиеДанные.Родитель = Неопределено Тогда
		Отказ = Истина;
	Иначе
		Если Вопрос("Удалить настройку?", РежимДиалогаВопрос.ОКОтмена,, КодВозвратаДиалога.ОК) = КодВозвратаДиалога.Отмена Тогда
			Отказ = Истина;
		КонецЕсли;	
	КонецЕсли;
КонецПроцедуры // ДоступныеОбработкиПередУдалением()

//Запоминаем имя настройки и не даем редактировать базовые
//
Процедура ДоступныеОбработкиПередНачаломИзменения(Элемент, Отказ)
	Если Элемент.ТекущиеДанные.Родитель = Неопределено  Тогда
		Отказ = Истина;
	Иначе
		мИмяНастройки = Элемент.ТекущиеДанные.Обработка;
	КонецЕсли;
КонецПроцедуры // ДоступныеОбработкиПередНачаломИзменения()


Процедура ДоступныеОбработкиПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если Копирование Тогда
		Элемент.ТекущиеДанные.Настройка=ЗначениеИзСтрокиВнутр(ЗначениеВстрокуВнутр(Элемент.ТекущиеДанные.Настройка));	
	КонецЕсли;	
КонецПроцедуры

//Проверим уникальность имени, и изменим имя у выбранных
//
Процедура ДоступныеОбработкиПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	Если Не ОтменаРедактирования Тогда
		Если Не вИмяУникально(ДоступныеОбработки,"Обработка",Элемент.ТекущиеДанные.Обработка) Тогда
			Предупреждение("Имя обработки не уникально!",20);
			Отказ	= Истина;
			Если Не НоваяСтрока Тогда
				Элемент.ТекущиеДанные.Обработка	= мИмяНастройки;
			КонецЕсли;
		Иначе
			Если Не НоваяСтрока Тогда
				//изменим имя у выбранных настроек
				Позиция	= вОпределитьПозициюОбработки(мИмяНастройки);
				Пока Не Позиция	= Неопределено Цикл
					Позиция.Строка[Позиция.Колонка.Данные]= Элемент.ТекущиеДанные.Обработка;
					Позиция	= вОпределитьПозициюОбработки(мИмяНастройки);
				КонецЦикла;	
			КонецЕсли;	
		КонецЕсли;	
	КонецЕсли;	
КонецПроцедуры



///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ ТАБЛИЧНОГО ПОЛЯ ТАБЛИЧНОГО ПОЛЯ МОНИТОР

//Покажем картинки обработки
//
Процедура МониторПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	вПоказатьКартинкуОбработки(Элемент,Элемент.Колонки.Обработка, ОформлениеСтроки, ДанныеСтроки);	
КонецПроцедуры

//Устанавливаем время в подвале
//
Процедура МониторПриПолученииДанных(Элемент, ОформленияСтрок)
	Если ОформленияСтрок.Количество()=ТЧ.Количество() Тогда
		ЭлементыФормы.Монитор.Колонки["Объект"].ТекстПодвала="~"+вФорматироватьВремя(ТЧ.Итог("Время"));
	Иначе
		//тут сложнее так как установлен отбор
		
	КонецЕсли	
КонецПроцедуры

//Открытие выбранного значения
//
Процедура МониторВыбор(Элемент, ВыбраннаяСтрока, Колонка, СтандартнаяОбработка)
	Если Колонка.Имя="Объект" Тогда
		СтандартнаяОбработка=Ложь;
    	СодержимоеЯчейки = ВыбраннаяСтрока[Колонка.Имя];
		ОткрытьЗначение(СодержимоеЯчейки);
	КонецЕсли;	
КонецПроцедуры


Процедура ДоступныеОбработкиПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Колонка)
	//Если ПараметрыПеретаскивания.Действие=ДействиеПеретаскивания.Перемещение
	//	Или ПараметрыПеретаскивания.Действие=ДействиеПеретаскивания.Копирование Тогда
	//	//Открываем обработку и устанавливаем текст сформированный из обработки которую перемещаем 
	//	Обработка_ПроизвольныйАлгоритм = ПолучитьФорму("ОбработкаРезультата_ПроизвольныйАлгоритм",ЭтаФорма,Новый УникальныйИдентификатор());
	//	Обработка_ПроизвольныйАлгоритм.Открыть();//
	//	//сформируем алгоритм
	//	Обработка = ПолучитьФорму(ПараметрыПеретаскивания.Значение.ИмяФормы, ЭтаФорма);
	//	Обработка.ТекущаяНастройка = ПараметрыПеретаскивания.Значение;
	//	Обработка.ЗагрузитьНастройку();
	//	Обработка_ПроизвольныйАлгоритм.ЭлементыФормы.ТекстМодуля.УстановитьТекст(Обработка.СформироватьАлгоритм());

	//КонецЕсли;	
КонецПроцедуры

//Формирует выражение на встроенном языке для выбранных обработок
//
Процедура КонтМенюВстроенныйЯзык(Кнопка)
	вСформироватьТаблицуВыбранныхОбработок();
	Если ТаблицаВыбранныхОбработок.Количество()=0 Тогда
		Возврат;
	КонецЕсли;
	стрАлгоритм="Процедура ВыполнениеОбработок(Объект, ТекущиеДанные, Параметры, СтрокиТЧ) Экспорт
	|	// вызовы вложенных процедур
	|КонецПроцедуры";
	ВызовыВыложенных="";
	СтрокиПервогоУровня=ТаблицаВыбранныхОбработок.НайтиСтроки(Новый Структура("Родитель",Неопределено));
	Для Каждого СтрокаПервогоУровня из СтрокиПервогоУровня Цикл
		СформироватьСтруктуруВыраженияОбработки(СтрокаПервогоУровня);
		Если ПустаяСтрока(СтрокаПервогоУровня.Условие) Тогда
			ВызовыВыложенных=ВызовыВыложенных+СтрокаПервогоУровня.ВызовыПроцедур+Символы.ПС;
		Иначе
			ВызовыВыложенных=ВызовыВыложенных+Символы.ПС+Формы.ЗагрузкаДанных.СформироватьАлгоритмВычисленияЗначения(СтрокаПервогоУровня.Условие,Новый ОписаниеТипов("Булево"),"Использовать")+Символы.ПС;
			ВызовыВыложенных=ВызовыВыложенных+"Если Использовать Тогда"+Символы.ПС;
			ВызовыВыложенных=ВызовыВыложенных+СтрокаПервогоУровня.ВызовыПроцедур+Символы.ПС+"КонецЕсли;";
		КонецЕсли;	
	КонецЦикла;
	стрАлгоритм=СтрЗаменить(стрАлгоритм,"// вызовы вложенных процедур",СтрЗаменить(ВызовыВыложенных,"(Знач ","("));
	
	Копия=ТаблицаВыбранныхОбработок.Скопировать();
	Копия.Свернуть("ТекстПроцедуры");
	Для Каждого Строка из Копия Цикл
		стрАлгоритм=стрАлгоритм+Символы.ПС+Строка.ТекстПроцедуры;		
	КонецЦикла;	
	
	Если Не ПустаяСтрока(стрАлгоритм) Тогда
		ОкноТекста=ПолучитьФорму("ОбработкаРезультата_ПроизвольныйАлгоритм",,ЭтаФорма);
		ОкноТекста.Режим=1;
		ОкноТекста.Открыть();
		ОкноТекста.ЭлементыФормы.ТекстМодуля.УстановитьТекст(стрАлгоритм);
	КонецЕсли;	
КонецПроцедуры

//Формирует структуру определяющую выражения обработки + выражения вложенных обработок если они есть
//Параметры:
//	СтрокаВыбраннойОбработки		-<СтрокаТЗ,Строка>. Строка таблицы выбранных обработок.
Процедура СформироватьСтруктуруВыраженияОбработки(СтрокаВыбраннойОбработки);
	СтрокаВыбраннойОбработки.ТекстПроцедуры	=СтрокаВыбраннойОбработки.Обработка.СформироватьАлгоритм();
	СтрокаВыбраннойОбработки.ВызовыПроцедур	=СтрЗаменить(СтрПолучитьСтроку(СтрокаВыбраннойОбработки.ТекстПроцедуры,1),"Процедура","")+";";
	
	//Ищем вложенные
	ВложенныеСтроки=ТаблицаВыбранныхОбработок.НайтиСтроки(Новый Структура("Родитель",СтрокаВыбраннойОбработки.Ссылка));
	ВызовыВыложенных="";
	Для Каждого Строка из ВложенныеСтроки Цикл
		СформироватьСтруктуруВыраженияОбработки(Строка);
		Если ПустаяСтрока(Строка.Условие) Тогда
			ВызовыВыложенных=ВызовыВыложенных+Строка.ВызовыПроцедур+Символы.ПС;
		Иначе
			ВызовыВыложенных=ВызовыВыложенных+Формы.ЗагрузкаДанных.СформироватьАлгоритмВычисленияЗначения(Строка.Условие,Новый ОписаниеТипов("Булево"),"Использовать")+Символы.ПС;
			ВызовыВыложенных=ВызовыВыложенных+"Если Использовать Тогда"+Символы.ПС;
			ВызовыВыложенных=ВызовыВыложенных+Строка.ВызовыПроцедур+Символы.ПС+"КонецЕсли;";
		КонецЕсли;	
	КонецЦикла;
	СтрокаВыбраннойОбработки.ТекстПроцедуры=СтрЗаменить(СтрокаВыбраннойОбработки.ТекстПроцедуры,"// вызовы вложенных процедур",СтрЗаменить(ВызовыВыложенных,"(Знач ","("));
КонецПроцедуры	



мИмяФайла 							= "";
мИмяПути 							= "";
мЗаголовокФормы 					= Заголовок;
мТекущаяСтрока 						= Неопределено;
мИдетДобавление 					= Ложь;
мАктивизированаДобавляемаяЗапись 	= Ложь;
мФормаПараметров 					= ПолучитьФорму("ФормаПараметров", ЭтаФорма);
Конструктор_МаксимальнаяШирина		= 40;
Конструктор_КолвоВидмыхКолонок		= 4;

МетаданныеФормы						= "КонструкторПредставления";
ЗакрыватьПриЗакрытииВладельца		= Истина;

ТаблицаФоновыхПроцессов				= Новый ТаблицаЗначений;
ТаблицаФоновыхПроцессов.Колонки.Добавить("Ключ");
ТаблицаФоновыхПроцессов.Колонки.Добавить("Завершено");
ТаблицаФоновыхПроцессов.Колонки.Добавить("ИндексСтраницы");
ТаблицаФоновыхПроцессов.Колонки.Добавить("ДатаЗапуска");

ТаблицаВыбранныхОбработок			= Новый ТаблицаЗначений;
ТаблицаВыбранныхОбработок.Колонки.Добавить("Обработка");
ТаблицаВыбранныхОбработок.Колонки.Добавить("Позиция");										//для выделения текущей обработки
ТаблицаВыбранныхОбработок.Колонки.Добавить("Условие",		Новый ОписаниеТипов("Строка"));	//условия выполнения обработки, может выполняться или нет
ТаблицаВыбранныхОбработок.Колонки.Добавить("Родитель"); 									//для определения возвращаемых значений, в случае вложенности
ТаблицаВыбранныхОбработок.Колонки.Добавить("ДополнительныеСтроки",Новый ОписаниеТипов("Массив")); 						//строки могут выполнятся не по порядку для загрузки данных например используются дополнтельные строки .... при загрузке
ТаблицаВыбранныхОбработок.Колонки.Добавить("ТекстПроцедуры",Новый ОписаниеТипов("Строка"));
ТаблицаВыбранныхОбработок.Колонки.Добавить("ВызовыПроцедур",Новый ОписаниеТипов("Строка"));
