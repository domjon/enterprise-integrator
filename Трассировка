Перем RegExp;
Перем ТекущаяСтрокаДереваЗапросов Экспорт; //под эту строку добавляется трассированные запросы
Перем ТЧ Экспорт; //динамическая табличная часть

///////////////////////////////////////////////////////////////////////////////
// ВСПОМОГАТЕЛЬНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

//Подготоваливает текст запроса в терминах SDBL для разбора на составляющие
//Параметры:
//	ТекстЗапроса	-<Строка>. Текст запроса в терминах SDBL
//Возвращаемое значение:
//	Таблица значений параметров.
Функция вПодготовитьТекстЗапроса(ТекстЗапроса)
	//перименовываем временные таблицы (не должно быть решетки)
	//RegExp.Pattern		="(\#T[a-f0-9]{32})";
	RegExp.Pattern		="(\#T(?:(?:[a-f0-9]{32})|(?:\w*)))";
	Индекс=0;
	Для Каждого ВремТаблица из RegExp.Execute(ТекстЗапроса) Цикл
		Индекс=Индекс+1;
		ТекстЗапроса=СтрЗаменить(ТекстЗапроса,ВремТаблица.SubMatches(0),"TT__"+Индекс);
	КонецЦикла;
	//выделяем параметры (ссылки)
	ТаблицаСсылок=Новый ТаблицаЗначений;
	ТаблицаСсылок.Колонки.Добавить("НомерТаблицы",Новый ОписаниеТипов("Строка"));
	ТаблицаСсылок.Колонки.Добавить("Идентификатор",Новый ОписаниеТипов("Строка"));
	ТаблицаСсылок.Колонки.Добавить("Представление",Новый ОписаниеТипов("Строка"));
	RegExp.Pattern		="(\d*):([a-f0-9]{32})";
	Для Каждого Ссылка из RegExp.Execute(ТекстЗапроса) Цикл
		НоваяСтрока=ТаблицаСсылок.Добавить();
		НоваяСтрока.НомерТаблицы	= Ссылка.SubMatches(0);
		НоваяСтрока.Идентификатор	= Ссылка.SubMatches(1);
		НоваяСтрока.Представление	= ""+НоваяСтрока.НомерТаблицы+":"+НоваяСтрока.Идентификатор;
	КонецЦикла;
    ТаблицаСсылок.Свернуть("НомерТаблицы,Идентификатор,Представление");
	//заполняем таблицу параметров
	ТаблицаПараметров=Новый ТаблицаЗначений;
	ТаблицаПараметров.Колонки.Добавить("ИмяПараметра",Новый ОписаниеТипов("Строка"));
	ТаблицаПараметров.Колонки.Добавить("ЗначениеПараметра");
	Если  ПустаяСтрока(ПараметрыОкружения.ТаблицыПоляКонфигурации) Тогда
		ПараметрыОкружения.ТаблицыПоляКонфигурации=вПолучитьСтруктуруЗаписи("DBNames","Params").Содержание[0].Значение.ПолучитьТекст();
	КонецЕсли;
	//преобразуем ссылки
	Индекс=0;
	СоответсвиеМД=вПолучитьСтруктуруМетаданных();
	Для каждого Ссылка ИЗ ТаблицаСсылок Цикл
		Индекс=Индекс+1;
		RegExp.Pattern		="[a-f0-9]{8}-(?:[a-f0-9]{4}-){3}[a-f0-9]{12},""(.*)"","+Ссылка.НомерТаблицы+"}";
		Для Каждого Выхождение из RegExp.Execute(ПараметрыОкружения.ТаблицыПоляКонфигурации) Цикл
			//определям тип значения
			ЗначениеПараметра	= Неопределено;
			Строка=Выхождение.SubMatches(0)+Ссылка.НомерТаблицы;
			ПреобразоватьИмяВСиноним1С(Строка,СоответсвиеМД);
			Если Строка<>Выхождение.SubMatches(0)+Ссылка.НомерТаблицы Тогда
				//Получим пустое значение данного типа
				Запрос=Новый Запрос("Выбрать Значение("+Строка+".ПустаяСсылка) как Поле1");
				Выборка=вВыполнитьЗапрос(Запрос).Выбрать();
				Если Выборка.Следующий() Тогда
					ПустоеПредставлениеЗначения=ЗначениеВСтрокуВнутр(Выборка.Поле1);
					ЗначениеПараметра	= ЗначениеИзСтрокиВнутр(СтрЗаменить(ПустоеПредставлениеЗначения,"00000000000000000000000000000000",Ссылка.Идентификатор));
				КонецЕсли
			КонецЕсли;
			//Пытаемся найти занчение с таким же параметом
			СтрокаПараметра=ТаблицаПараметров.Найти(ЗначениеПараметра,"ЗначениеПараметра");
			Если СтрокаПараметра=Неопределено Тогда
				СтрокаПараметра=ТаблицаПараметров.Добавить();
				СтрокаПараметра.ИмяПараметра			= "Параметр"+Индекс;
				СтрокаПараметра.ЗначениеПараметра		= ЗначениеПараметра;
			КонецЕсли;	
			//заменяем упоминаня в тексте запроса
			ТекстЗапроса=СтрЗаменить(ТекстЗапроса,Ссылка.НомерТаблицы+":"+Ссылка.Идентификатор,"&"+СтрокаПараметра.ИмяПараметра+" ");
		КонецЦикла;
	КонецЦикла;	
	Возврат ТаблицаПараметров;	
Конецфункции	

//Зменяет инструкцию INSERT на помещения добавленной строки в новую временную таблицу
//Параметры:
//	ТаблицаЗапросов	-<ТЗ>. Таблица значений с запросами	
Процедура вЗаменитьИнструкцииВставки(ТаблицаЗапросов)
	RegExp.Pattern		="Insert\s*Into\s*(\#T[a-f0-9]{32})\s*values\s*\(((?:.|\s)*)\)";
	Для Каждого Запрос ИЗ ТаблицаЗапросов Цикл
		Для Каждого ИнструкцияВставки из RegExp.Execute(Запрос.SDBL) Цикл
			ИмяДополнительнойТаблицы="#T"+СтрЗаменить(Новый УникальныйИдентификатор,"-","");
			//нужно определить поле временной таблицы
			СтрокиСозданияТаблицы=вНайтиВхождениеСтрокиВКолонкуТаблицы(ТаблицаЗапросов,"INTO"+Символы.ПС+ИнструкцияВставки.SubMatches(0),"SDBL");
			Для Каждого СтрокаСоздания  из СтрокиСозданияТаблицы Цикл
				СтрокаЗапроса=СокрЛП(СтрокаСоздания.SDBL);
				вПодготовитьТекстЗапроса(СтрокаЗапроса);
				СтруктураЗапроса=ПолучитьСтруктуруЗапроса(СтрокаЗапроса);
				ИмяПоляВременнойТаблицы=СтруктураЗапроса.ВыбранныеПоля[0].Ссылка.Псевдоним;
				Прервать;
			КонецЦикла;	
			Запрос.SDBL="ВЫБРАТЬ 
			|	"+ИмяПоляВременнойТаблицы+"
			|ПОМЕСТИТЬ "+ИмяДополнительнойТаблицы+" 
			|ИЗ 
			|(ВЫБРАТЬ 
			|		"+ИнструкцияВставки.SubMatches(0)+"."+ИмяПоляВременнойТаблицы+"
			| 	ИЗ "+ИнструкцияВставки.SubMatches(0)+"
			|ОБЪЕДИНИТЬ ВСЕ 
			|	"+ИнструкцияВставки.SubMatches(1)+") КАК ВложенныйЗапрос;
			|УНИЧТОЖИТЬ "+ИнструкцияВставки.SubMatches(0);
			
			//теперь нужно заменить временную таблицу для всех пакетов ниже
			Для Индекс=(ТаблицаЗапросов.Индекс(Запрос)+1) по ТаблицаЗапросов.Количество()-1 Цикл
				ТаблицаЗапросов[Индекс].SDBL=СтрЗаменить(ТаблицаЗапросов[Индекс].SDBL,ИнструкцияВставки.SubMatches(0),ИмяДополнительнойТаблицы);			
			КонецЦикла;	
		КонецЦикла;	
	КонецЦикла;	
КонецПроцедуры

//Получает запрос текущей строки, оперирует с временными таблицами
//Параметры:
//	ТекущаяСтрока	-<СтрокаТЧ>.
//Возвращаемое значение
//	Структура в которую помещаются, запросы SDBL и запросы 1С.
Функция вПолучитьЗапросыТекущейСтроки(ТекущаяСтрока)
	СтруктураТекстов=Новый Структура("SQL, SDBL","","");
	//Ищем использованные временные таблицы в SDBL
	RegExp.Pattern		="(\#T[a-f0-9]{32})";
	ВсевОдинЗапрос=Ложь;
	Если Не Нрег(Лев(ТекущаяСтрока.SDBL,6))="insert" Тогда
		Для Каждого ВремТаблица из RegExp.Execute(ТекущаяСтрока.SDBL) Цикл
			СтрокиВременныхТаблиц=вНайтиВхождениеСтрокиВКолонкуТаблицы(ТЧ.Выгрузить(,"SDBL,SQL"),ВремТаблица.SubMatches(0),"SDBL");
			Если СтрокиВременныхТаблиц.Количество()>1 Тогда //1 точно всегда есть
				Если ВсевОдинЗапрос ИЛИ Вопрос("Временные таблицы используемые в этом пакете, используются и в других пакетах.
					|Собрать все связанные пакеты в один запрос?",РежимДиалогаВопрос.ДаНет)=КодВозвратаДиалога.Да Тогда
					ВсевОдинЗапрос=Истина;
				КонецЕсли;	
			КонецЕсли;	
		КонецЦикла;
	Иначе
		//тут по любому все в один запрос.
		ВсевОдинЗапрос=Истина;
	КонецЕсли;	
	Если ВсевОдинЗапрос Тогда
		Для Каждого ВремТаблица из RegExp.Execute(ТекущаяСтрока.SDBL) Цикл
			СтрокиВременныхТаблиц=вНайтиВхождениеСтрокиВКолонкуТаблицы(ТЧ.Выгрузить(,"SDBL,SQL"),ВремТаблица.SubMatches(0),"SDBL");
			вЗаменитьИнструкцииВставки(СтрокиВременныхТаблиц);
			Для Каждого СвязаннаяСтрока ИЗ  СтрокиВременныхТаблиц Цикл
				СтруктураТекстов.SDBL=СтруктураТекстов.SDBL+";"+Символы.ПС+СвязаннаяСтрока.SDBL;
				СтруктураТекстов.SQL=СтруктураТекстов.SQL+";"+Символы.ПС+вПолучитьЗапросSQL(СвязаннаяСтрока);
			КонецЦикла;	
		КонецЦикла;
		СтруктураТекстов.SDBL=Сред(СтруктураТекстов.SDBL,2);
		СтруктураТекстов.SQL=Сред(СтруктураТекстов.SQL,2);
	Иначе	
		ЗаполнитьЗначенияСвойств(СтруктураТекстов,ТекущаяСтрока,"SQL, SDBL");
		СтруктураТекстов.SQL=вПолучитьЗапросSQL(ТекущаяСтрока); //изменения для SQL
	КонецЕсли;	
	
	Возврат СтруктураТекстов;
КонецФункции	

//Функция находит вхождение строки в колонку таблицы значений
//Стандартными средствами это не обработать
//Параметры:
//	Таблица		-<ТаблицаЗначений>. В которой ищщем вхождение
//	Вхождение 	-<Cтрока>	Искомая строка.
//	Колонка		-<Cтрока>	Имя колнки, в которой будем искать вхождение.
//Возвращаемое значение:
//	ТаблицаЗначений со строками в которых упоминается это значение.
Функция вНайтиВхождениеСтрокиВКолонкуТаблицы(Таблица,Вхождение,Колонка)
	Запрос=Новый Запрос("ВЫБРАТЬ
	|	*
	|ПОМЕСТИТЬ Таблица1
	|ИЗ
	|	&Таблица КАК Таблица
	|ГДЕ
	|	Таблица."+Колонка+" ПОДОБНО &Вхождение;
	|Выбрать * ИЗ Таблица1");
	Запрос.МенеджерВременныхТаблиц=Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Таблица",Таблица);
	Запрос.УстановитьПараметр("Вхождение","%"+Вхождение+"%");
	НоваяТаблица=вВыполнитьЗапрос(Запрос).Выгрузить();
	НоваяТаблица.Свернуть("SDBL,SQL");
	Возврат НоваяТаблица;
КонецФункции	

//преобразует запрос SQL из внутренного представления к тому виду который можно будет выполнять
//Параметры:
//	СтрокаТрассировки	- <Строка>. Строка таблицы трассировки.
//Возвращаемое значение:
//	Строка
Функция вПолучитьЗапросSQL(СтрокаТрассировки)
	НачалоПараметров=Найти(СтрокаТрассировки.SQL,"p_0: ");
	Если НачалоПараметров>0 Тогда
		//это запрос с простыми параметрами заменим их 
		Запрос=Лев(СтрокаТрассировки.SQL,НачалоПараметров-1);
		RegExp.Pattern		="^p_\d*: (.*)";
		Для Каждого Параметр из RegExp.Execute(СтрокаТрассировки.SQL) Цикл
			ИндексПараметра=Найти(Запрос,"?")+1;
			НачалоЗапроса=Лев(Запрос,ИндексПараметра);
			Запрос=СтрЗаменить(НачалоЗапроса,"?",Параметр.SubMatches(0))+Сред(Запрос,ИндексПараметра);
		КонецЦикла;
	Иначе	
		Запрос=СтрокаТрассировки.SQL;
	КонецЕсли;
	Возврат Запрос;	
КонецФункции

///////////////////////////////////////////////////////////
//	РАБОТА С ТЕХНОЛОГИЧЕСКИМ ЖУРНАЛОМ

// Включить технологический журнал. Осуществляет запись технологического журанала в каталог(и) сервера
// конфигурация тех журнала фиксированная 
//
// Параметры:
// 	УдалятьЖурналы	-	<Булево>.Признак необходимости удаления файлов журнала.	
Функция ВключитьТехнологическиеЖурналы(УдалятьЖурналы=Истина) Экспорт
	СтруктураСоединения=ПолучитьПараметрыСоединенияССервера();
	ОтключитьТехнологическиеЖурналы();  //отключаем технологически ежурналы включенные до этого;
	ФайлЖурнала=Новый Файл(ПараметрыОкружения.КаталогОбработки+"logcfg.xml");
	Если Не ФайлЖурнала.Существует() Тогда
		Сообщить("Отсутсвует файл настройки технологического журнала"+Символы.ПС+ПараметрыОкружения.КаталогОбработки+"logcfg.xml",СтатусСообщения.ОченьВажное);
		Возврат Ложь;
	КонецЕсли;	
	Состояние("Конфигурирование технологического журнала...");
	ТекстовыйДокумент=Новый ТекстовыйДокумент;
	ТекстовыйДокумент.Прочитать(ПараметрыОкружения.КаталогОбработки+"logcfg.xml");
	ТекстКонфигурации=ТекстовыйДокумент.ПолучитьТекст();
	
	НачалоКоммент=?(ПараметрыОкружения.СерверныйРежим,"","!--");
	КонецКоммент=?(ПараметрыОкружения.СерверныйРежим,"","--");

	//Номер соединения	
		RegExp.Pattern		="<(?:!--)?ns:eq\s*property=""t:connectID""\s*value\s*=\s*""(\d*)""/(?:--)?>";
		ТекстКонфигурации=RegExp.Replace(ТекстКонфигурации,"<"+НачалоКоммент+"ns:eq property=""t:connectID"" value = """+Формат(ПараметрыОкружения.UserID,"ЧГ=0")+"""/"+КонецКоммент+">");
	//Имя базы
		RegExp.Pattern		="<(?:!--)?ns:eq\s*property=""p:processName""\s*value\s*=\s*"".*""/(?:--)?>";
		ТекстКонфигурации=RegExp.Replace(ТекстКонфигурации,"<"+НачалоКоммент+"ns:eq property=""p:processName"" value = """+СтруктураСоединения.База+"""/"+КонецКоммент+">");
	//События СУБД
		RegExp.Pattern		="""Name""\s*value\s*=\s*""?(DBMSSQL|DB2|DBPOSTGRS|DBV8DBENG)""";
		ТекстКонфигурации=RegExp.Replace(ТекстКонфигурации,"""Name"" value = """+ПараметрыОкружения.ТипСУБД+"""");
		
	ТекстовыйДокумент.УстановитьТекст(ТекстКонфигурации);	
	ТекстовыйДокумент.Записать(ПараметрыОкружения.КаталогОбработки+"logcfg.xml");
	
	Состояние("Включение технологического журнала...");
	АктивныеСервера=КаталогиСерверов.НайтиСтроки(Новый Структура("Активность",Истина));					
	Для каждого КаталогСервера из АктивныеСервера Цикл
		Если УдалятьЖурналы Тогда 
			Попытка 
				УдалитьФайлы(КаталогСервера.Каталог+"\Ei_logs\");
			Исключение
				Сообщить("Не удается удалить файлы журнала, повторите попытку через 30 сек., или самостоятельно отчистите папку Ei_logs в каталогах серверов.",СтатусСообщения.Внимание);
				Возврат Ложь;
			КонецПопытки;
		КонецЕсли;	
		Запись = Новый ЗаписьТекста(КаталогСервера.Каталог+"\Conf\logcfg.xml", КодировкаТекста.UTF8);
		Запись.Записать(ТекстКонфигурации);
		Запись.Закрыть();
	КонецЦикла;
	//теперь подождем пока появятся файлы журналов
	Если ПараметрыОкружения.ПериодичностьТехЖурнала=Неопределено Тогда
		Граница=60;
	Иначе
		Граница=ПараметрыОкружения.ПериодичностьТехЖурнала-Секунда(ТекущаяДата());
		Граница=?(Граница<0,60+Граница,Граница);
	КонецЕсли;	
	ИнициализацияОкнаИсполнения("Ожидание запуска технологического журнала <"+Граница+" cек",АктивныеСервера.Количество(),1);
	Формы.ОкноИсполнения.ТаблицаСчетчиков[1].Граница=Граница;
	Для каждого КаталогСервера из АктивныеСервера Цикл
		МассивЖурналов=Новый Массив;
		Формы.ОкноИсполнения.Подзаголовок=КаталогСервера.Каталог+"\Ei_logs\";
		Формы.ОкноИсполнения.Индикация();
		Счетчик=0;
		Пока МассивЖурналов.Количество()=0 И Счетчик<=60 Цикл
			Формы.ОкноИсполнения.Индикация(,1);
			МассивЖурналов=НайтиФайлы(КаталогСервера.Каталог+"\Ei_logs\",?(ПараметрыОкружения.СерверныйРежим,"rphost_*","1cv8_*"));
			СтрокаСоединенияИнформационнойБазы();
			вSleep(1);//RecSetПолучитьЗапись("WaitFor Delay '00:00:01'");
			Счетчик=Счетчик+1;
			Состояние("Включение технологического журнала..."+Счетчик+" с.");
		КонецЦикла;
		Если МассивЖурналов.Количество()=0 Тогда
			Сообщить("Не удалось подключить технологический журнал "+КаталогСервера.Каталог+"\Conf\logcfg.xml",СтатусСообщения.ОченьВажное);
			ОстановкаОкнаИсполнения();
			Возврат Ложь;
		КонецЕсли;	
	КонецЦикла;
	Если ПараметрыОкружения.ПериодичностьТехЖурнала=Неопределено Тогда
		ПараметрыОкружения.ПериодичностьТехЖурнала=Секунда(ТекущаяДата());
	КонецЕсли;	
	ОстановкаОкнаИсполнения();
	Сигнал();
	Возврат Истина;
КонецФункции // ВключитьТехнологическиеЖурналы()

// Отключить технологические журналы, отключение происходит по средством удаления файла конфигурации из каталога
// Параметры:
//	<Нет>.
Процедура ОтключитьТехнологическиеЖурналы() Экспорт
	АктивныеСервера=КаталогиСерверов.НайтиСтроки(Новый Структура("Активность",Истина));					
	Для каждого КаталогСервера из АктивныеСервера Цикл
		УдалитьФайлы(КаталогСервера.Каталог+"\Conf","logcfg.xml");
	КонецЦикла;
	//обратимся к любому объекту БД чтобы освободить файлы журналов 
	СтрокаСоединенияИнформационнойБазы();
КонецПроцедуры // ОтключитьТехнологическиеЖурналы()

// Функция получает содержимое технологических журналов.
//
// Параметры:
//  РазмерПорции	- Число, число строк получаемых за одно обращение к журналу.
//  Отключать 		- Булево, Истина - отключать технологический журнал перед анализом.
//  ЖдатьЗавершения - Булево, Истина - ждать освобождения фалов технологическим журналом
// Возвращаемое значени:
//	Количестово событий технологического журнала.
Функция ПолучитьТехнологическийЖурнал(РазмерПорции,
                                        Отключать = Истина,
										ЖдатьЗавершения=Истина) Экспорт
	Если Отключать Тогда
		ОтключитьТехнологическиеЖурналы();
	КонецЕсли;
		// Подготовить пути каталогов технологического журнала
	Пути = Новый Массив;
	АктивныеСервера=КаталогиСерверов.НайтиСтроки(Новый Структура("Активность",Истина));
	Если ЖдатьЗавершения Тогда
		Граница=60;
		ИнициализацияОкнаИсполнения("Ожидание выключения технологического журнала <"+Граница+" cек",АктивныеСервера.Количество(),1);
		Формы.ОкноИсполнения.ТаблицаСчетчиков[1].Граница=Граница;
	КонецЕсли;	
	Для каждого КаталогСервера из АктивныеСервера Цикл
		КаталогЖурнала=КаталогСервера.Каталог+"\Ei_logs";
		Пути.Добавить(КаталогЖурнала);
		Если ЖдатьЗавершения Тогда
			Формы.ОкноИсполнения.Подзаголовок=КаталогЖурнала;
			Формы.ОкноИсполнения.Индикация();
			ПодождатьЗавершенияВыключенияЖурнала(КаталогЖурнала);
		Иначе
			вSleep(1);//RecSetПолучитьЗапись("WaitFor Delay '00:00:01'");
		КонецЕсли;	
	КонецЦикла;	
   	ОстановкаОкнаИсполнения();
	
	СобытиеОтладки	= Формы.Отладка.ДобавитьСобытие("Загрузка внешней компоненты Addin.TechLogReader","Внешние компоненты");
	Регистрировали			= Ложь;
	~Reg:
	ОбработкаПрерыванияПользователя();
	Попытка
		ЗагрузитьВнешнююКомпоненту(ПараметрыОкружения.КаталогОбработки+"pmc.dll");
		ТехЖурнал = Новый("Addin.TechLogReader");
		Формы.Отладка.ЗавершитьСобытие(СобытиеОтладки);
	Исключение
		Если (Не Регистрировали)И
			ЗарегистрироватьБиблиотеку("pmc.dll",СобытиеОтладки) Тогда
			Перейти ~Reg;	
		КонецЕсли;	
		Формы.Отладка.ЗавершитьСобытие(СобытиеОтладки,"Информация","Не удалось загрузить ВК. "+ИнформацияОбОшибке().Описание);
	КонецПопытки;
	
	Состояние(?(ЖдатьЗавершения,"Получение событий технологического журнала...",""));

	Если Не ПараметрыОкружения.СерверныйРежим Тогда
		//ВК будет работать только с журналами в папках rphost
		МассивЖурналов=НайтиФайлы(КаталогСервера.Каталог+"\Ei_logs\","1cv8_*");
		Для каждого Папка из МассивЖурналов Цикл
			МассивФайлов=НайтиФайлы(Папка.ПолноеИмя,"*");
			СоздатьКаталог(СтрЗаменить(Папка.ПолноеИмя,"1cv8_","rphost_"));
			Для Каждого Журнал из  МассивФайлов Цикл
				КопироватьФайл(Журнал.ПолноеИмя,СтрЗаменить(Журнал.ПолноеИмя,"1cv8_","rphost_")); 	
			КонецЦикла;	
		КонецЦикла;	
    КонецЕсли;
	
	// Открыть технологический журнал
	ТехЖурнал.Открыть(Пути, 8);
	ЧтениеXML = Новый ЧтениеXML;
	ПараметрыЧтенияXML = Новый ПараметрыЧтенияXML(,,,,,,,,,Истина);
	//Создаем фабрику
	Пути = Новый Массив();Пути.Добавить(ПараметрыОкружения.КаталогОбработки+"tech-log.xsd");
    Фабрика = СоздатьФабрикуXDTO(Пути);
	ТипОбъектаСобытия = Фабрика.Тип("http://v8.1c.ru/v8/tech-log-instance","Event");	
	// Подготовить регистр технологического журнала
	КоличествоСобытий = 0;
	ТЗ=ТЧ.Выгрузить();
	// Получить события технологического журнала
	Пока Не ТехЖурнал.КонецФайла() Цикл
		
		Результат = ТехЖурнал.Прочитать(РазмерПорции);
		Результат = СтрЗаменить(Результат,"<t:prop name=""Sdbl""></t:prop>","<t:prop name=""Sdbl"">' '</t:prop>"); //возникает иногда ошибка чтения
			//ТестДок=Новый ТекстовыйДокумент;
			//ТестДок.УстановитьТекст(Результат);
			//ТестДок.Записать("C:\log.xml");
		Если Результат = Неопределено Тогда
			Прервать;
		КонецЕсли;
		
		ЧтениеXML.УстановитьСтроку(Результат, ПараметрыЧтенияXML);
		ЧтениеXML.ПерейтиКСодержимому(); // Прейти к <log...>
		ЧтениеXML.Прочитать();           // Пропустить <log...>
		ПредИмяСобятия="";
		// Чтение событий
		Пока Истина Цикл
			Если ЧтениеXML.ЛокальноеИмя = "log" Тогда
				Прервать;
			КонецЕсли;
			Попытка 
				Событие = Фабрика.ПрочитатьXML(ЧтениеXML, ТипОбъектаСобытия);
			Исключение
				Сообщить(ОписаниеОшибки(),СтатусСообщения.Информация);
				Прервать;
			КонецПопытки;	
			Если Событие = Неопределено Тогда
				Прервать;
			КонецЕсли;
			Если ПустаяСтрока(ПредИмяСобятия) ИЛИ Не
				((ПредИмяСобятия="Context" И Событие.Name=ПараметрыОкружения.ТипСУБД)
					ИЛИ (ПредИмяСобятия=ПараметрыОкружения.ТипСУБД И Событие.Name="SDBL")) Тогда
				//не всегда добавляем новую строку, в случае определенного порядка это одно состовляющее. и все записываем в одну строку
				НоваяСтрока = ТЧ.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока,Событие,,"Len");
				НоваяСтрока.Len=Событие.Len/10000;
			Иначе
				НоваяСтрока.Len=НоваяСтрока.Len+Событие.Len/10000;
    		КонецЕсли;
			ПредИмяСобятия=Событие.Name;
			Для Каждого Свойство Из Событие.prop Цикл
				Ключ = СтрЗаменить(ВРег(Свойство.name),":","_");
				Если Не ТЗ.Колонки.Найти(Ключ)=Неопределено	Тогда
					НоваяСтрока[Ключ] = Свойство.__content;
					//убираем кавычки
					Если Лев(НоваяСтрока[Ключ],1)="'" Тогда
						НоваяСтрока[Ключ]=Сред(НоваяСтрока[Ключ],2,СтрДлина(НоваяСтрока[Ключ])-2)		
					КонецЕсли;
					Если Лев(НоваяСтрока[Ключ],1)="""" Тогда
						НоваяСтрока[Ключ]=Сред(НоваяСтрока[Ключ],2,СтрДлина(НоваяСтрока[Ключ])-2)		
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		
		КоличествоСобытий = КоличествоСобытий + 1;
	КонецЦикла;
	//сместим контекст вверх на одну строчку
	Если ТЧ.Количество()>0 Тогда
		Массив=ТЧ.ВыгрузитьКолонку("Context");
		Массив.Удалить(0);
		ТЧ.ЗагрузитьКолонку(Массив,"Context");
	КонецЕсли;	
	
	ЧтениеXML.Закрыть();
	ТехЖурнал.Закрыть();
	Возврат КоличествоСобытий;
	
КонецФункции // ПолучитьТехнологическийЖурнал()

// Подождать завершения выключения технологического журнала
// Ожидание длится не более 10 сек 
//
// Параметры:
//  КаталогЖурнала - Строка, каталог в котором должен располагатся журнал
Процедура ПодождатьЗавершенияВыключенияЖурнала(КаталогЖурнала)
	Состояние("Отключение технологического журнала..");
	ВремяНачала = ТекущаяДата();
	ФайлыДоступны = Ложь;
	
	// Получить имена файлов на которые могут быть наложены блокировки
	Файлы = ПолучитьИменаФайловТехнологическогоЖурнала(КаталогЖурнала);

	// Дождаться освобождения заблокированных файлов
	Пока ТекущаяДата() - ВремяНачала < 60 И ФайлыДоступны = Ложь Цикл
		Формы.ОкноИсполнения.Индикация(,1);
		ФайлыДоступны = Истина;
		Для Каждого Файл Из Файлы Цикл
			Попытка
				Чтение = Новый ЧтениеТекста(Файл);
				Чтение.Закрыть();
			Исключение
				ФайлыДоступны = Ложь;
				Прервать;
			КонецПопытки;
		КонецЦикла;
		Если ФайлыДоступны Тогда
			Прервать;
		Иначе
			вSleep(1);//RecSetПолучитьЗапись("WaitFor Delay '00:00:01'");
		КонецЕсли;
	КонецЦикла;
	Если Не ФайлыДоступны Тогда
		Сообщить("Не удалось отлючить технологический журнал "+КаталогЖурнала,СтатусСообщения.ОченьВажное);
	КонецЕсли;	
КонецПроцедуры // ПодождатьЗавершенияВыключенияЖурнала(()

// Получить массив имен файлов технологического журнала
//
// Параметры:
//  КаталогЖурнала - Строка, каталог в котором хранятся файлы журнала
//
// Возвращаемое значение:
//  Массив - имена файлов технологического журнала
//
Функция ПолучитьИменаФайловТехнологическогоЖурнала(КаталогЖурнала)
	
	Каталоги = НайтиФайлы(КаталогЖурнала,?(ПараметрыОкружения.СерверныйРежим,"rphost_*","1cv8_*"));
	Файлы = Новый Массив;
	Для Каждого Каталог Из Каталоги Цикл
		НовыеФайлы = НайтиФайлы(Каталог.ПолноеИмя, "*.log");
		
		Для Каждого НовыйФайл Из НовыеФайлы Цикл
			Файлы.Добавить(НовыйФайл.ПолноеИмя);
		КонецЦикла;
	КонецЦикла;
	
	Возврат Файлы;
	
КонецФункции // ПолучитьИменаФайловТехнологическогоЖурнала()

///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	Отказ=вУстановитьТабличнуюЧасть(ЭтаФорма,"Трассировка");
	Если Не Отказ Тогда
		ТЧ.Очистить();
		ВремяНачала = ТекущаяДата();
		Пока ПолучитьТехнологическийЖурнал(5000,Истина,ОтключатьТЖПриПолучении)=0 И ТекущаяДата() - ВремяНачала < 60  Цикл
			ОбработкаПрерыванияПользователя();
			Состояние("Ожидание событий технологического журнала.."+(ТекущаяДата() - ВремяНачала)+" с.");
		КонецЦикла;	
		Если ТЧ.Количество()=0 Тогда
			Отказ=Истина;
			Предупреждение("Ни одного собрытия не получено",10);
		КонецЕсли;
	КонецЕсли;	
КонецПроцедуры

Процедура ПриОткрытии()
	ЭлементыФормы.Трассировка.ОтборСтрок.Len.Значение = 0;
	ЭлементыФормы.Трассировка.ОтборСтрок.Len.ВидСравнения = ВидСравнения.Больше;
	ЭлементыФормы.Трассировка.ОтборСтрок.Len.Использование = истина;
	
	ЭлементыФормы.Трассировка.ОтборСтрок.SDBL.Значение = "SELECT";
	ЭлементыФормы.Трассировка.ОтборСтрок.SDBL.ВидСравнения = ВидСравнения.Содержит;
	ЭлементыФормы.Трассировка.ОтборСтрок.SDBL.Использование = истина;

КонецПроцедуры

Процедура ПриЗакрытии()
	вОсвободитьТабличнуюЧасть(ЭлементыФормы.Трассировка.Данные);
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ, ВЫЗЫВАЕМЫЕ ИЗ ЭЛЕМЕНТОВ ФОРМЫ

//Заполняем все элементы формы контекстно зависимые от него
Процедура ТабличноеПолеПриАктивизацииСтроки(Элемент)
	RegExp.Pattern="\s*([^\n]*): ([0-9]*) :([^\n]*)(?:\n|$)";
	ТекДанные=Элемент.ТекущиеДанные;
	Если Не ТекДанные=Неопределено Тогда
		ЭлементыФормы.SDBL.УстановитьТекст(ТекДанные.SDBL);
		ЭлементыФормы.SQL.УстановитьТекст(вПолучитьЗапросSQL(ТекДанные));
		Контекст.Строки.Очистить();
		НоваяСтрока=Контекст;
		Для Каждого Вызов из RegExp.Execute(ТекДанные.Context) Цикл
			Модуль=СокрЛП(Вызов.SubMatches(0));
			Если Не ПустаяСтрока(Модуль) 
				И Не Модуль="Форма.КонструкторПредставления"
				И Не Модуль="ВнешняяОбработка."+ЭтотОбъект.Метаданные().Имя Тогда
				НоваяСтрока=НоваяСтрока.Строки.Добавить();
				НоваяСтрока.Модуль=Модуль;
				НоваяСтрока.ТекстВызова=СокрЛП(Вызов.SubMatches(2));
				НоваяСтрока.НомерСтроки=Число(СокрЛП(Вызов.SubMatches(1)));
			КонецЕсли;	
		КонецЦикла;
		Если Контекст.Строки.Количество()>0 Тогда
			ЭлементыФормы.Контекст.Развернуть(Контекст.Строки[0], Истина);
		КонецЕсли;
	КонецЕсли;	
КонецПроцедуры

Процедура ТрассировкаПриАктивизацииКолонки(Элемент)
	Если Не Элемент.ТекущаяКолонка=Неопределено Тогда
		ТекСтраница=ЭлементыФормы.Панель.Страницы.Найти(Элемент.ТекущаяКолонка.Имя);
		Если Не ТекСтраница=Неопределено Тогда
			ЭлементыФормы.Панель.ТекущаяСтраница=ТекСтраница;
		КонецЕсли;
	КонецЕсли;	
КонецПроцедуры

//Проверим не скрывает ли отбор все нащи данные
//
Процедура ТрассировкаПриПолученииДанных(Элемент, ОформленияСтрок)
	//установлен отбор которые нужно показатель пользователю чтобы он не испугался	
	//ЭлементыФормы.Отбор.Видимость = (ОформленияСтрок.Количество()=0 И ТЧ.Количество()>0)
КонецПроцедуры

//открываем текущую запись орентируясь на форму объекты конфигурации.
Процедура КонтекстВыбор(Элемент, ВыбраннаяСтрока, Колонка, СтандартнаяОбработка)
	Если ПараметрыОкружения.СерверныйРежим Тогда
		СтандартнаяОбработка=Ложь;
		Если Не Формы.ОбъектыКонфигурации.Открыта() Тогда 
			Формы.ОбъектыКонфигурации.Открыть();
			ЭтаФорма.Активизировать();
		КонецЕсли;
		НайденнаяСтрока=Формы.ОбъектыКонфигурации.ДеревоКонф.Строки.Найти(ВыбраннаяСтрока.Модуль,"ПолноеИмя",Истина);
		Если Не НайденнаяСтрока=Неопределено Тогда
			Формы.ОбъектыКонфигурации.ЭлементыФормы.ДеревоКонф.ТекущаяСтрока = НайденнаяСтрока;
			ФормаТекста=Формы.ОбъектыКонфигурации.ОткрытьЗапись(Новый Структура("FileName",НайденнаяСтрока.FileName),"Config");
			//веделим текущий номер строки 
			Если ТипЗнч(ФормаТекста)=Тип("Форма") И ФормаТекста.Открыта() Тогда
				ФормаТекста.Активизировать();
				//устанавливаем выделение
				ФормаТекста.ТекущийЭлемент=ФормаТекста.ЭлементыФормы.ТекстМодуля;
					СтрокаВхождения=СтрПолучитьСтроку(ФормаТекста.ЭлементыФормы.ТекстМодуля.ПолучитьТекст(),ВыбраннаяСтрока.НомерСтроки);
				    НачалоВыделения=Найти(СтрокаВхождения,ВыбраннаяСтрока.ТекстВызова);
				Попытка	
					ФормаТекста.ЭлементыФормы.ТекстМодуля.УстановитьГраницыВыделения(ВыбраннаяСтрока.НомерСтроки,НачалоВыделения,ВыбраннаяСтрока.НомерСтроки,НачалоВыделения+СтрДлина(ВыбраннаяСтрока.ТекстВызова));
				Исключение
				КонецПопытки;	
			КонецЕсли;	
		КонецЕсли;
	КонецЕсли;	
КонецПроцедуры

//Пиктаграммы будем выводить если открыта форма объектов конфигурации, от туда их и собсвенно и будем брать.
Процедура КонтекстПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	Если  Не ДанныеСтроки=Неопределено 
		И Формы.ОбъектыКонфигурации.Открыта() 
		И Не ПустаяСтрока(ДанныеСтроки.Модуль) Тогда 
		НайденнаяСтрока=Формы.ОбъектыКонфигурации.ДеревоКонф.Строки.Найти(ДанныеСтроки.Модуль,"ПолноеИмя",Истина);
		Если Не НайденнаяСтрока=Неопределено Тогда
			Попытка 
				ОформлениеСтроки.Ячейки.Модуль.УстановитьКартинку(БиблиотекаКартинок[НайденнаяСтрока.Картинка]);
			Исключение
				//ОформлениеСтроки.Ячейки.Представление.Картинка=ЭлементыФормы.ПолеКартинки;
				ОформлениеСтроки.Ячейки.Модуль.ИндексКартинки =Число(НайденнаяСтрока.Картинка);
				ОформлениеСтроки.Ячейки.Модуль.ОтображатьКартинку=истина; 
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;	
КонецПроцедуры

//Отправлет текущую строку в конструктор запросов 
//с соотвествующим преобразованием
Процедура КоманднаяПанельВКонструктор(Кнопка)
	Если ВладелецФормы.Открыта() И Не ПустаяСтрока(ЭлементыФормы.SDBL.ПолучитьТекст()+ЭлементыФормы.SQL.ПолучитьТекст()) Тогда
		Попытка
		    НоваяСтрока=ТекущаяСтрокаДереваЗапросов.Строки.Добавить();
		Исключение
			НоваяСтрока=ВладелецФормы.ДеревоЗапросов.Строки.Добавить();
		Конецпопытки;	
		НоваяСтрока.Запрос= "Trace_"+Час(ТекущаяДата())+"_"+Минута(ТекущаяДата());
		СтруктураТекстовЗапросов=вПолучитьЗапросыТекущейСтроки(ЭлементыФормы.Трассировка.ТекущиеДанные);
		НоваяСтрока.ТекстЗапроса=СтруктураТекстовЗапросов.SDBL;
		НоваяСтрока.ТекстЗапросаSQL=СтруктураТекстовЗапросов.SQL;
		НоваяСтрока.ДатаИзменения=ТекущаяДата();
		//осуществим необходимы преобразования с текстом запроса на SDBL
		ТаблицаПараметров=вПодготовитьТекстЗапроса(НоваяСтрока.ТекстЗапроса);
		//Теперь попробум преобразовать
		СтруктураЗапроса=ПолучитьСтруктуруЗапроса(НоваяСтрока.ТекстЗапроса);
		Если ТипЗнч(СтруктураЗапроса)=Тип("Структура") Тогда
			ТекстЗапроса="";
			Для Каждого Пакет ИЗ СтруктураЗапроса.Пакеты Цикл
				ПребразоватьВМетаданные1С(СтруктураЗапроса);
				ТекстЗапроса=ТекстЗапроса+";"+Символы.ПС+СобратьЗапросИзСтруктуры(СтруктураЗапроса,Новый Структура("Шаблон,Таблица",Пакет.Шаблон,Неопределено),Истина);
			КонецЦикла;
			НоваяСтрока.ТекстЗапроса=Сред(ТекстЗапроса,3);
		
			//установим параметры
			НоваяСтрока.ПараметрыЗапроса=ВладелецФормы.мФормаПараметров.Параметры.Скопировать();
			НоваяСтрока.ПараметрыЗапроса.Очистить(); //очищаем поскольку добавляем запрос в новую строку
			Для каждого НовыйПараметр из ТаблицаПараметров Цикл
				Параметр=НоваяСтрока.ПараметрыЗапроса.Добавить();
				ЗаполнитьЗначенияСвойств(Параметр,НовыйПараметр);
				ВладелецФормы.мФормаПараметров.вУстановитьИдентификаторы(Параметр);
			КонецЦикла;	
			ВладелецФормы.Активизировать();
			ВладелецФормы.ЭлементыФормы.ДеревоЗапросов.ТекущаяСтрока=НоваяСтрока;
			ВладелецФормы.ЭлементыФормы.ПанельТекстаЗапроса.ТекущаяСтраница=ВладелецФормы.ЭлементыФормы.ПанельТекстаЗапроса.Страницы[0];
		КонецЕсли;
	Иначе
		Предупреждение("Форма конструктора закрыта, или туда нечего передать");
	КонецЕсли;	
КонецПроцедуры

//Очищает все отборы для таблицы тарссировки
//
Процедура ОтборНажатие(Элемент)
	Для Каждого Отбор ИЗ ЭлементыФормы.Трассировка.ОтборСтрок Цикл
		Отбор.Использовать = Ложь;
	КонецЦикла;	
КонецПроцедуры



RegExp = Новый COMОбъект("VBScript.RegExp");
RegExp.IgnoreCase = Истина;
RegExp.MultiLine = Истина;
RegExp.Global = Истина;

ЗакрыватьПриЗакрытииВладельца=Истина;