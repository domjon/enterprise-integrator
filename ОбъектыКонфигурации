Перем ТекущаяДата;
Перем МетаданныеФормы Экспорт;
Перем Перетаскивание; 			//Дополнительные структуры для перетаскивания
Перем МаксимальныйРазмерЗаписи; //Максимальный размер конфигурационной записи, которую можно открыть.
Перем РежимСравнения;			//Отображет флажки в строках
Перем ИдМетаданных;				//Идентификатор метаданных конфигурации
Перем ПроверятьДинамическиеЗаписи;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

//Заполняет все отображаемые!! на поле табличные поля. Так же может иницировать отображение ранее скрытых полей..
//Параметры:
//	Нет.
Процедура вПолучитьДанныеДляТабличныхПолей()
	зПолучитьДанныеДляТабличныхПолей(ЭтаФорма);
КонецПроцедуры	

//Опредаляет используется ли хранилище или нет
//Параметры:
//	Нет.
//Возвращаемое значение:
//	Булево. Признак наличия тригера
Функция вОпределитьИспользованиеХранилища()
	зОпределитьИспользованиеХранилища(ЭтаФорма);
КонецФункции	

//Открывает запись объекта конфигурации с возможностью редактирования 
//Параметры:
//	Структура					- <Структура>. Струтура в которой объязательно должно присутсвовать свойство FileName
//	Таблица						- <Строка>. Имя таблицы Config, ConfigSave, Params, Config_Depot
//	ФормаВладелец   			- <Форма>. Кто будет владеть открытым окном. По умолчанию текущая форма
//Возвращаемое значение:
//	<Форма>. Форма в которой открыты текущая запись
//
Функция ОткрытьЗапись(Структура,Таблица,ФормаВладелец=Неопределено)  Экспорт
	СобытиеОтладки=Формы.Отладка.ДобавитьСобытие("Открытие записи конфигурации "+Таблица+"/"+Структура.FileName,"Объекты конфигурации");
	Попытка
		//пороверим нет ли динамческой записи
		Если 	ПроверятьДинамическиеЗаписи И 
				Нрег(Таблица)	= "config" И 
				Структура.DBName= ПараметрыОкружения.DBName Тогда
				ИмяДинЗаписи = зПолучитьИмяДинамическойЗаписи(Структура.FileName);
				Если Не ПустаяСтрока(ИмяДинЗаписи) Тогда
					Структура.Вставить("FileName",ИмяДинЗаписи);		
				КонецЕсли;	
		КонецЕсли;		
		ДанныеЗаписи=зПолучитьДанныеЗаписи(Структура,Таблица);
		ИмяФормы=ОпределитьСоставОбъектов(ДанныеЗаписи.Запись.Содержание);
		Если ПустаяСтрока(ИмяФормы) Тогда
			//Это двоичные данные их неполучится открыть, но можно сохранить
			Предупреждение("Это двоичные данные! Вы можете выгрузить их в файл (используйте контекстное меню)",10);
		Иначе
			ФормаОткрытия=ПолучитьФорму(ИмяФормы,?(ФормаВладелец=Неопределено,ЭтаФорма,ФормаВладелец),ДанныеЗаписи.Ключ);
			ФормаОткрытия.ИсходныеДанные=ДанныеЗаписи.Запись;
			ФормаОткрытия.Заголовок=ДанныеЗаписи.Ключ;
			ФормаОткрытия.Открыть();
			КнопкаConfig	    = ФормаОткрытия.ЭлементыФормы.ОсновныеДействияФормы.Кнопки.ПодМеню.Кнопки.СохранитьКак.Кнопки.Config;
			КнопкаConfigSave	= ФормаОткрытия.ЭлементыФормы.ОсновныеДействияФормы.Кнопки.ПодМеню.Кнопки.СохранитьКак.Кнопки.ConfigSave;
			Если Нрег(Таблица)	= "config" Тогда
				КнопкаConfigSave.Доступность	= Истина;
				ФормаОткрытия.ЭлементыФормы.ОсновныеДействияФормы.Кнопки.Сохранить.Доступность	= Истина;
			ИначеЕсли Нрег(Таблица)	= "configsave" Тогда
				КнопкаConfig.Доступность		= Истина;
				ФормаОткрытия.ЭлементыФормы.ОсновныеДействияФормы.Кнопки.Сохранить.Доступность	= Истина;
			ИначеЕсли Нрег(Таблица)	= "config_depot" Тогда
				КнопкаConfig.Доступность		= Истина;
				КнопкаConfigSave.Доступность	= Истина;
				ФормаОткрытия.ЭлементыФормы.ОсновныеДействияФормы.Кнопки.Сохранить.Доступность	= Ложь;
				//заблокируем эл фомы чтобы не искушать
				Если ФормаОткрытия.МетаданныеФормы = "ОбработкаРезультата_ПроизвольныйАлгоритм" Тогда
					ФормаОткрытия.ЭлементыФормы.ТекстМодуля.ТолькоПросмотр							= Истина;
				Иначе	
					ФормаОткрытия.ЭлементыФормы.ТекстД.ТолькоПросмотр							= Истина;
					ФормаОткрытия.ЭлементыФормы.ПолеТД.ТолькоПросмотр							= Истина;
				КонецЕсли;	
	        КонецЕсли;
			Формы.Отладка.ЗавершитьСобытие(СобытиеОтладки);
			Возврат ФормаОткрытия;
		КонецЕсли;
	Исключение
		Формы.Отладка.ЗавершитьСобытие(СобытиеОтладки,"ОченьВажное",ИнформацияОбОшибке());
	КонецПопытки;
	Формы.Отладка.ЗавершитьСобытие(СобытиеОтладки);
КонецФункции

//Обновление табличной части
//Параметры:
//	ИмяТаблицыСУБД	- <Строка>. Имя таблицы
//
Процедура ОбновитьТЧ(ИмяТаблицыСУБД)
	зОбновитьТЧ(ЭтаФорма,ИмяТаблицыСУБД);
КонецПроцедуры

//Устанавливет доступность кнопки в командной панели 
//
Процедура УстановитьДоступностьКнопки(Имя,Значение)
	Кнопка=ЭлементыФормы.КоманднаяПанель1.Кнопки.Найти(Имя);
	Кнопка.Доступность=Значение;
КонецПроцедуры 	

//Функция определяет тип записей и в сооветсвии с этими записями пытается открыть редактор
//Параметры:
//	СоставОбъектов	-<СписокЗначений>. Список объектов необходимых для отображения.
//Возвращаемое значение:
//	<Строка>. Имя формы, в которой будет открыта структура. 
Функция ОпределитьСоставОбъектов(СоставОбъектов)
	ИмяФормы="";
	Если СоставОбъектов.Количество()>1 Тогда
		//это колекция объектов или HTML документ с картинками
		Если ТипЗнч(СоставОбъектов[0].Значение)=Тип("ТекстовыйДокумент") Тогда
			ИмяФормы="ОбработкаРезультата_ПроизвольныйАлгоритм";
		КонецЕсли;	
	ИначеЕсли СоставОбъектов.Количество()>0 Тогда
		Если ТипЗнч(СоставОбъектов[0].Значение)=Тип("ТабличныйДокумент") Тогда
			ИмяФормы="ТабличныйДокумент";
		ИначеЕсли ТипЗнч(СоставОбъектов[0].Значение)=Тип("ДвоичныеДанные") Тогда
			//Возможно это HTML проверим
			ИмяФайла=ПолучитьИмяВременногоФайла();
			СоставОбъектов[0].Значение.Записать(ИмяФайла);
			Чтение=Новый ЧтениеТекста(ИмяФайла);
			Если Нрег(Лев(Чтение.ПрочитатьСтроку(),5))="<html" Тогда
				ИмяФормы="ТабличныйДокумент";
			КонецЕсли;	
		ИначеЕсли ТипЗнч(СоставОбъектов[0].Значение)=Тип("СхемаКомпоновкиДанных") Тогда	
			//Если начинается
			ИмяФормы="ТабличныйДокумент";
		ИначеЕсли ТипЗнч(СоставОбъектов[0].Значение)=Тип("ТекстовыйДокумент") Тогда	
			ИмяФормы="ОбработкаРезультата_ПроизвольныйАлгоритм";
		КонецЕсли;	
	КонецЕсли;
	Возврат ИмяФормы;
Конецфункции	

//Обновляем табличные части  что бы визуально отображались изменения,
//вызванные непосредственным редктированием таблиц конфигурации, пеерчитывать таблицы SQL снова слишком долго
//Вызывается из формы встроенного языка
//Параметры:
//	ИмяТаблицы		-<Строка>. Имя таблицы.
//	СтруктураЗаписи	-<Структура>. Структура только что сохраненой записи (Ключ,БазаДанных)
//
Функция ОбновитьЗаписьКонфигураци(ИмяТаблицы,СтруктураЗаписи) Экспорт
	Если Нрег(ИмяТаблицы)="config" Тогда
		Таблица		= Config;
		ИскатьБД 	= Истина;
	Иначе
		Таблица		= ConfigSave;
		ИскатьБД 	= Ложь;
	КонецЕсли;
	Если ИскатьБД Тогда
		МассивСтрок = Таблица.НайтиСтроки(Новый Структура("FileName,DbName",СтруктураЗаписи.Ключ,СтруктураЗаписи.БазаДанных));
		Если МассивСтрок.Количество()>0 Тогда
			Строка = МассивСтрок[0];
		Иначе
			Строка = Неопределено;
		КонецЕсли;	
	Иначе	
		Строка=Таблица.Найти(СтруктураЗаписи.Ключ,"FileName");
	КонецЕсли;	
	Если Не Строка=Неопределено Тогда
		Строка.Modified=ТекущаяДата;
	КонецЕсли;
КонецФункции	


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ, ВЫЗЫВАЕМЫЕ ИЗ ЭЛЕМЕНТОВ ФОРМЫ
				

//Выполняет синхронизацию всех ТЧ
//
Процедура ТаблицаКонф_ПриАктивизацииСтроки(Элемент)
	//снизу вверх
	Если  ЭлементыФормы.КоманднаяПанель1.Кнопки.Найти("Верт_Синхронизация").Пометка Тогда
		Если Элемент.ТекущаяСтрока=Неопределено Тогда 
			//нет строк в таблице 
			Возврат;
		КонецЕсли;
		СтрокаВДереве=ДеревоКонф.Строки.Найти(Элемент.ТекущаяСтрока.FileName,"FileName",Истина);
		Если СтрокаВДереве<>Неопределено Тогда
			ЭлементыФормы.ДеревоКонф.ТекущаяСтрока=СтрокаВДереве;
		Иначе
			//синхронизируемся по краткому имени 
			СтруктураОтбора=Новый Структура("Brief_Name",Элемент.ТекущаяСтрока.Brief_Name);
			НайденныеСтроки=ДеревоКонф.Строки.НайтиСтроки(СтруктураОтбора,Истина);
			Если НайденныеСтроки.Количество()>0 Тогда 
				ЭлементыФормы.ДеревоКонф.ТекущаяСтрока=НайденныеСтроки[0];
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	//слева на право
	Если Не ЭлементыФормы.КоманднаяПанель1.Кнопки.Найти("Горизонт_Синхронизация").Пометка Тогда
		Возврат;
	КонецЕсли;
	Строка=ConfigSave.Найти(Элемент.ТекущаяСтрока.FileName,"FileName");
	Если Строка<>Неопределено Тогда
		ЭлементыФормы.ConfigSave.ТекущаяСтрока=Строка;
	КонецЕсли;
	
	//для хранилища устанавливаем отбор.
	ЗначениеОтбора = Элемент.ТекущаяСтрока.FileName;
	Если Найти(ЗначениеОтбора,"_dynupdate_")>0 Тогда
		ЗначениеОтбора = СтрЗаменитьБезУчетаРегистра(ЗначениеОтбора,"(_dynupdate_.{36})","");	
	ИначеЕсли Найти(ЗначениеОтбора,".new")>0 Тогда	
		ЗначениеОтбора = СтрЗаменить(ЗначениеОтбора,".new","");		
	КонецЕсли;	
	ЭлементыФормы.Config_Depot.ОтборСтрок.FileName.Значение 		= ЗначениеОтбора;
	ЭлементыФормы.Config_Depot.ОтборСтрок.FileName.ВидСравнения 	= ВидСравнения.Равно;
	ЭлементыФормы.Config_Depot.ОтборСтрок.FileName.Использование 	= Истина;

	
	//Строка=Config_Depot.Найти(Элемент.ТекущаяСтрока.FileName,"FileName");
	//Если Строка<>Неопределено Тогда
	//	ЭлементыФормы.Config_Depot.ТекущаяСтрока=Строка;
	//КонецЕсли;

КонецПроцедуры

//Выполняет синхронизацию всех ТЧ
//
Процедура ОсновнаяКонф_ПриАктивизацииСтроки(Элемент)
	//сверху вниз 
		//данного  типа синхронизаци инет 
	//слева на право
	Если Не ЭлементыФормы.КоманднаяПанель1.Кнопки.Найти("Горизонт_Синхронизация").Пометка Тогда
		Возврат;
	КонецЕсли;
	Если Элемент.ТекущаяСтрока=Неопределено Тогда 
		//нет строк в таблице 
		Возврат;
	КонецЕсли;
	Строка=Config.Найти(Элемент.ТекущаяСтрока.FileName,"FileName");
	Если Строка<>Неопределено Тогда
		ЭлементыФормы.Config.ТекущаяСтрока=Строка
	КонецЕсли;
КонецПроцедуры

//Выполняет синхронизацию всех ТЧ
// 
Процедура ДеревоКонф_ПриАктивизацииСтроки(Элемент)
	//сверху вниз
	Если  ЭлементыФормы.КоманднаяПанель1.Кнопки.Найти("Верт_Синхронизация").Пометка Тогда
		Если Элемент.ТекущаяСтрока=Неопределено Тогда 
			//нет строк в таблице 
			Возврат;
		КонецЕсли;
		МассивСтрок = Config.НайтиСтроки(Новый Структура("FileName,DbName",Элемент.ТекущаяСтрока.FileName,ПараметрыОкружения.DBName));
		Если МассивСтрок.Количество()>0 Тогда
			Строка = МассивСтрок[0];
		Иначе
			Строка = Config.Найти(Элемент.ТекущаяСтрока.FileName,"FileName");
		КонецЕсли;	
		Если Не Строка = Неопределено Тогда
			ЭлементыФормы.Config.ТекущаяСтрока=Строка
		Иначе
			//синхронизируемся по краткому имени 
			СтруктураОтбора=Новый Структура("Brief_Name",Элемент.ТекущаяСтрока.Brief_Name);
			НайденныеСтроки=Config.НайтиСтроки(СтруктураОтбора);
			Если НайденныеСтроки.Количество()>0 Тогда 
				ЭлементыФормы.Config.ТекущаяСтрока=НайденныеСтроки[0];
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;	
КонецПроцедуры

//Выводим строки, показываем катинки
//
Процедура ДеревоКонфПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	ОформлениеСтроки.Ячейки.Представление.УстановитьКартинку(ПолучитьОбщуюКартинку(ДанныеСтроки.Картинка,"КартинкиМетаданных"));
КонецПроцедуры

//Выводим строки, в зависмости от имени меняем цвет 
//
Процедура ПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	Если ДанныеСтроки.FileName="metadata" 
		или ДанныеСтроки.FileNAme="version"
		или ДанныеСтроки.FileNAme="versions" 
		или ДанныеСтроки.FileNAme="deleted"
		или ДанныеСтроки.FileNAme="dynamicallyupdated"
		или ДанныеСтроки.FileNAme="root" Тогда
		//_______________________________________
		ОформлениеСтроки.ЦветТекста=Новый Цвет(255, 0, 0);
	Иначе	
		ОформлениеСтроки.ЦветТекста=ПолучитьОттенкиЦвета(ДанныеСтроки.Modified);
	КонецЕсли;
	Если Найти(ДанныеСтроки.FileNAme,".new")>0 				Тогда 
		ОформлениеСтроки.Ячейки.FileName.ОтображатьКартинку = Истина;
		ОформлениеСтроки.Ячейки.FileName.ИндексКартинки 	= 0;
	ИначеЕсли Найти(ДанныеСтроки.FileNAme,"_dynupdate_")>0	Тогда
		ОформлениеСтроки.Ячейки.FileName.ОтображатьКартинку = Истина;
		ОформлениеСтроки.Ячейки.FileName.ИндексКартинки 	= 1;
	ИначеЕсли Найти(ДанныеСтроки.FileNAme,ИдМетаданных)>0	Тогда
		ОформлениеСтроки.Ячейки.FileName.ОтображатьКартинку = Истина;
		ОформлениеСтроки.Ячейки.FileName.ИндексКартинки 	= 2;
	Иначе
		СтрокаВДереве=ДеревоКонф.Строки.Найти(ДанныеСтроки.FileName,"FileName",Истина);
		Если СтрокаВДереве<>Неопределено Тогда
			ОформлениеСтроки.Ячейки.FileName.УстановитьКартинку(ПолучитьОбщуюКартинку(СтрокаВДереве.Картинка,"КартинкиМетаданных"));
		КонецЕсли;
	КонецЕсли;
	Если ДанныеСтроки.DataSize<=15 Тогда 
		//это пустая строка  тоесть пустое значение поля BinaryData
		ОформлениеСтроки.ЦветТекста=Новый Цвет(192, 192, 192);
	КонецЕсли;
	ОформлениеСтроки.Ячейки.FileName.ОтображатьФлажок=РежимСравнения;
КонецПроцедуры

//Открытие текущей записи при выборе строки
//
Процедура Выбор(Элемент, ВыбраннаяСтрока, Колонка, СтандартнаяОбработка)
	Если Колонка.ТолькоПросмотр Тогда
		СтандартнаяОбработка = Ложь;
		Если ВыбраннаяСтрока.DataSize>МаксимальныйРазмерЗаписи Тогда
			Предупреждение("Открыть можно только запись не более 6Мб.
			|Вы можете выгрузить запись в файл (используйте контекстное меню)",20);
		Иначе
			Структура=Новый Структура("FileName,Modified",ВыбраннаяСтрока.FileName,ВыбраннаяСтрока.Modified);
			Если Нрег(Элемент.Подсказка)="config" Тогда
				Структура.Вставить("DBName",ВыбраннаяСтрока.DbName);	
			КонецЕсли;
			ОткрытьЗапись(Структура,Элемент.Подсказка);
		КонецЕсли;
	КонецЕсли;	
КонецПроцедуры

//Запрещаем добавление новых строк
//
Процедура ПередНачаломДобавления(Элемент, Отказ, Копирование)
	Отказ=Истина;
КонецПроцедуры

//Удалем записи из базы данных
//БЕЗВОЗВРАТНО
//
Процедура ПередУдалением(Элемент, Отказ)
	Ответ=Вопрос(?(Элемент.ВыделенныеСтроки.Количество()>1,"Записи будут удалены","Запись будет удалена")+" из таблицы "+Элемент.Подсказка+". Продолжить?",РежимДиалогаВопрос.ОКОтмена,,,"Внимание удаление записей");
	Если Ответ = КодВозвратаДиалога.Отмена Тогда 
		Возврат;
	КонецЕсли;
	Если Не ОбработкаСоединения() Тогда
		Возврат;
	КонецЕсли;
	Массив=Новый Массив;
    Для каждого Строка из Элемент.ВыделенныеСтроки Цикл
		Массив.Добавить(Строка.FileName); 
	КонецЦикла;
	//перегрузим в массив чтобы не пеерскакивать через строку
	Для каждого ЭлементМассива из Массив Цикл
		зУдалитьЗаписьИзТаблицы(Новый Структура("FileName",ЭлементМассива),Элемент.Подсказка);	
	КонецЦикла;
КонецПроцедуры

//Для удобствапользователя открываем запись config из дерева
//
Процедура ДеревоКонфВыбор(Элемент, ВыбраннаяСтрока, Колонка, СтандартнаяОбработка)
	ТекущаяСтрока=ЭлементыФормы.ConfigSave.ТекущаяСтрока;
	Если Не ТекущаяСтрока=Неопределено Тогда
		Если ВыбраннаяСтрока.FileName=ТекущаяСтрока.FileName Тогда
			Выбор(ЭлементыФормы.ConfigSave, ТекущаяСтрока, ЭлементыФормы.ConfigSave.Колонки["FileName"], Истина);
			Возврат;
		КонецЕсли;	
	КонецЕсли;
	ТекущаяСтрока=ЭлементыФормы.Config.ТекущаяСтрока;
	Если Не ТекущаяСтрока=Неопределено Тогда
		Если ВыбраннаяСтрока.FileName=ТекущаяСтрока.FileName Тогда
			ПроверятьДинамическиеЗаписи = Истина;
				Выбор(ЭлементыФормы.Config, ТекущаяСтрока, ЭлементыФормы.Config.Колонки["FileName"], Истина);
			ПроверятьДинамическиеЗаписи = Ложь;
		КонецЕсли;	
	КонецЕсли;
КонецПроцедуры

//Если отмечено 2 и более записей открываем диалог сравнения
//
Процедура ПриИзмененииФлажка(Элемент, Колонка)
	ТаблицаСравниваемыхЗаписей=Новый ТаблицаЗначений;
	ТаблицаСравниваемыхЗаписей.Колонки.Добавить("ИмяТаблицы");
	ТаблицаСравниваемыхЗаписей.Колонки.Добавить("Структура");
	//ищем строки у всех 3 таблиц
	СтрутураПоиска=Новый Структура("Пометка",Истина);
	Пометки_Config=Config.НайтиСтроки(СтрутураПоиска);
	Пометки_ConfigSave=ConfigSave.НайтиСтроки(СтрутураПоиска);
	Пометки_Config_Depot=Config_Depot.НайтиСтроки(СтрутураПоиска);
	Для Каждого ОтмеченнаяСтрока ИЗ Пометки_Config Цикл
		НоваяСтрока=ТаблицаСравниваемыхЗаписей.Добавить();
		НоваяСтрока.ИмяТаблицы="Config";
		НоваяСтрока.Структура=Новый Структура("FileName,Modified,DbName");
		ЗаполнитьЗначенияСвойств(НоваяСтрока.Структура,ОтмеченнаяСтрока);
	КонецЦикла;
	Для Каждого ОтмеченнаяСтрока ИЗ Пометки_ConfigSave Цикл
		НоваяСтрока=ТаблицаСравниваемыхЗаписей.Добавить();
		НоваяСтрока.ИмяТаблицы="ConfigSave";
		НоваяСтрока.Структура=Новый Структура("FileName,Modified,DbName");
		ЗаполнитьЗначенияСвойств(НоваяСтрока.Структура,ОтмеченнаяСтрока);
	КонецЦикла;
	Для Каждого ОтмеченнаяСтрока ИЗ Пометки_Config_Depot Цикл
		НоваяСтрока=ТаблицаСравниваемыхЗаписей.Добавить();
		НоваяСтрока.ИмяТаблицы="Config_Depot";
		НоваяСтрока.Структура=Новый Структура("FileName,Modified,DbName");
		ЗаполнитьЗначенияСвойств(НоваяСтрока.Структура,ОтмеченнаяСтрока);
	КонецЦикла;

	Если ТаблицаСравниваемыхЗаписей.Количество()=2 Тогда
		зВыполнитьСравнение(ТаблицаСравниваемыхЗаписей,Этаформа);	
		КП_Сравнить(ЭлементыФормы.КоманднаяПанель1.Кнопки.Сравнить);
	КонецЕсли;	
КонецПроцедуры

//Включает или выклютает хранилище
//
Процедура ВключениеИзмененийНажатие(Элемент)
	зВключитьВыключитьХранилище();
	зОпределитьИспользованиеХранилища(ЭтаФорма);
КонецПроцедуры

//Открвает диаграмму изменений
//
Процедура ДиаграммаНажатие(Элемент)
	ФормаДиаграммы = ПолучитьФорму("ДиаграммаИзменений",ЭтаФорма);
	Если Не ФормаДиаграммы.Открыта() Тогда
		ФормаДиаграммы.Открыть();
		Если Не ЗначениеЗаполнено(ФормаДиаграммы.НачалоПериода) Тогда
			ФормаДиаграммы.НачалоПериода = НачалоГода(ТекущаяДата());
		КонецЕсли;
		Если Не ЗначениеЗаполнено(ФормаДиаграммы.КонецПериода) Тогда
		 	ФормаДиаграммы.КонецПериода  = КонецГода(ФормаДиаграммы.НачалоПериода);
		КонецЕсли;	
		зПостроитьДиаграммуИзменений(ФормаДиаграммы.ЭлементыФормы.ДиаграммаГанта,ДеревоКонф,ФормаДиаграммы.НачалоПериода,ФормаДиаграммы.КонецПериода);
		ФормаДиаграммы.вСформироватьЭлементыШкалы(ФормаДиаграммы.ЭлементыФормы.ДиаграммаГанта,ФормаДиаграммы.НачалоПериода,ФормаДиаграммы.КонецПериода);
	Иначе
		ФормаДиаграммы.Активизировать();
	КонецЕсли;	
КонецПроцедуры

//Запись комментария для изменения
//
Процедура Config_DepotCommentПриИзменении(Элемент)
	ТекущиеДанные = ЭлементыФормы.Config_Depot.ТекущиеДанные;
	Если НЕ ТекущиеДанные = Неопределено Тогда
		зДобавитьКомментарий(ТекущиеДанные);	
	КонецЕсли;	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ, ПЕРЕТАСКИВАНИЕ          							

Процедура ТаблКонф_ПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Колонка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

Процедура ТаблКонф_Перетаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Колонка)
	СтандартнаяОбработка = Ложь;
	Если Нрег(Перетаскивание.ТаблицаИсточник) = "config_depot" ИЛИ
		 Нрег(Перетаскивание.ТаблицаИсточник) = "config" Тогда
		ПараметрыПеретаскивания.Действие 				= ДействиеПеретаскивания.Копирование;
	КонецЕсли;
	Если ПараметрыПеретаскивания.Действие=ДействиеПеретаскивания.Выбор Тогда
		Действие = ВыбратьИзМеню(Перетаскивание.СписокВыбораДействия,Элемент);
		Если Не Типзнч(Действие.Значение) = Тип("ДействиеПеретаскивания")  Тогда 
			Возврат;
		КонецЕсли;
		ПараметрыПеретаскивания.Действие=Действие.Значение;
	КонецЕсли;
	Если ПараметрыПеретаскивания.Действие=ДействиеПеретаскивания.Копирование Тогда
		зВыполнитьОбновлениеВыбранных(ЭтаФорма,ПараметрыПеретаскивания.Значение,,Перетаскивание.ТаблицаИсточник,Элемент.Подсказка);
	ИначеЕсли ПараметрыПеретаскивания.Действие=ДействиеПеретаскивания.Перемещение Тогда
		зВыполнитьОбновлениеВыбранных(ЭтаФорма,ПараметрыПеретаскивания.Значение,Истина);
	КонецЕсли;	
КонецПроцедуры

Процедура ТаблОснКонф_ОкончаниеПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка)
	Если ПараметрыПеретаскивания.Действие=ДействиеПеретаскивания.Перемещение Тогда
		
	КонецЕсли;	
КонецПроцедуры

Процедура ТаблКонф_НачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка)
	Перетаскивание.ТаблицаИсточник					= Элемент.Подсказка;
	Если Нрег(Перетаскивание.ТаблицаИсточник) = "config_depot" ИЛИ
		 Нрег(Перетаскивание.ТаблицаИсточник) = "config" Тогда
		ПараметрыПеретаскивания.ДопустимыеДействия 				= ДопустимыеДействияПеретаскивания.Копирование;
	КонецЕсли;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ
						

Процедура КП_Настройка(Кнопка)
	ОкноНастройки=ПолучитьФорму("Настройка",Этаформа);
	ОкноНастройки.Открыть();
	ОкноНастройки.ЭлементыФормы.ПанельНастройки.ТекущаяСтраница =ОкноНастройки.ЭлементыФормы.ПанельНастройки.Страницы.Найти("Unid");
КонецПроцедуры

//Активирует определеннную строку в Табличной части, получить это ID довольно проблематично, в дереве он нигде не отображается 
//поэтому добавлен такой пункт меню
Процедура КП_МетаданныеКонфигурации(Кнопка)
	ИскомаяСтрока=Config.Найти(ИдМетаданных,"FileName");
	Если Не ИскомаяСтрока=Неопределено Тогда
		//установим текущую строку
		ЭлементыФормы.Config.ТекущаяСтрока=ИскомаяСтрока;
	КонецЕсли;	
КонецПроцедуры

Процедура КП_Скрыть_ДеревоОбъектов(Кнопка)  Экспорт  //можеть быть восстановлена из значений пометок
	Кнопка.Пометка=Не Кнопка.Пометка;
    Если НЕ ЭлементыФормы.ДеревоКонф.Свертка = РежимСверткиЭлементаУправления.Верх Тогда
		//ну вначале изменим привязки чтобы эл управления могли сложиться
		//сбросим привязки
		//ЭлементыФормы.ДеревоКонф.УстановитьПривязку(ГраницаЭлементаУправления.Низ);	
		//теперь установим привязки 
		ЭлементыФормы.РазделительГор.УстановитьПривязку(ГраницаЭлементаУправления.Верх,ЭлементыФормы.ДеревоКонф,ГраницаЭлементаУправления.Низ);
		//сворачиваем
		ЭлементыФормы.ДеревоКонф.Свертка = РежимСверткиЭлементаУправления.Верх;
		ЭлементыФормы.РазделительГор.Свертка = РежимСверткиЭлементаУправления.Верх;
		Значение=Ложь;
	Иначе
		//востанавливаем
		ЭлементыФормы.ДеревоКонф.Свертка = РежимСверткиЭлементаУправления.Нет;
		ЭлементыФормы.РазделительГор.Свертка = РежимСверткиЭлементаУправления.Нет;
		//сбросим привязки 
		ЭлементыФормы.РазделительГор.УстановитьПривязку(ГраницаЭлементаУправления.Верх,ЭлементыФормы.РазделительГор,ГраницаЭлементаУправления.Низ);
		//установим 
		//ЭлементыФормы.ДеревоКонф.УстановитьПривязку(ГраницаЭлементаУправления.Низ,ЭлементыФормы.РазделительГор,ГраницаЭлементаУправления.Верх);
		Значение=Истина;
		Если ДеревоКонф.Строки.Количество()=0 Тогда
			зСформироватьДеревоКонфигураци(ЭтаФорма);
		КонецЕсли;	
	КонецЕсли;
	УстановитьДоступностьКнопки("Верт_Синхронизация",Значение);
	СохранитьЗначениеПометки(Кнопка);
КонецПроцедуры

Процедура КП_Скрыть_КонфигурацияБД(Кнопка) Экспорт  //можеть быть восстановлена из значений пометок
	Кнопка.Пометка=Не Кнопка.Пометка;
	Если НЕ ЭлементыФормы.ДопПанель.Свертка = РежимСверткиЭлементаУправления.Право Тогда
			//ну вначале изменим привязки чтобы эл управления могли сложиться
				//сбросим привязки
				ЭлементыФормы.ДопПанель.УстановитьПривязку(ГраницаЭлементаУправления.Лево);	
				//теперь установим привязки (без сброса этих привязок установить их не получится)
				ЭлементыФормы.РазделительВертикальный.УстановитьПривязку(ГраницаЭлементаУправления.Право,ЭлементыФормы.ДопПанель,ГраницаЭлементаУправления.Лево);
		//сворачиваем
		ЭлементыФормы.РазделительВертикальный.Свертка = РежимСверткиЭлементаУправления.Право;
		ЭлементыФормы.ДопПанель.Свертка = РежимСверткиЭлементаУправления.Право;
		Значение=Ложь;
	Иначе
		Если ConfigSave.Количество()=0 И Config_Depot.Количество()=0 Тогда
			зОбновитьТЧ(ЭтаФорма,"configsave",ложь);
		КонецЕсли;	
		//востанавливаем
		ЭлементыФормы.ДопПанель.Свертка = РежимСверткиЭлементаУправления.Нет;
		ЭлементыФормы.РазделительВертикальный.Свертка = РежимСверткиЭлементаУправления.Нет;
			//так же востанавливаем и привязки 
				//сбросим привязки 
				ЭлементыФормы.РазделительВертикальный.УстановитьПривязку(ГраницаЭлементаУправления.Право);
				//установим 
				ЭлементыФормы.ДопПанель.УстановитьПривязку(ГраницаЭлементаУправления.Лево,ЭлементыФормы.РазделительВертикальный,ГраницаЭлементаУправления.Право);
		Значение=Истина;		
	КонецЕсли;
	УстановитьДоступностьКнопки("ОбновитьКонфигурацию",Значение);
	УстановитьДоступностьКнопки("Горизонт_Синхронизация",Значение);
	СохранитьЗначениеПометки(Кнопка);
КонецПроцедуры

Процедура КП_Скрыть_ОсновнаяКонфигурация(Кнопка)Экспорт
	Кнопка.Пометка=Не Кнопка.Пометка;
	Если НЕ ЭлементыФормы.Config.Свертка = РежимСверткиЭлементаУправления.Лево Тогда
			//ну вначале изменим привязки чтобы эл управления могли сложиться
				//сбросим привязки
				ЭлементыФормы.Config.УстановитьПривязку(ГраницаЭлементаУправления.Право);	
				//теперь установим привязки (без сброса этих привязок установить их не получится)
				ЭлементыФормы.РазделительВертикальный.УстановитьПривязку(ГраницаЭлементаУправления.Лево,ЭлементыФормы.Config,ГраницаЭлементаУправления.Право);
		//сворачиваем
		ЭлементыФормы.РазделительВертикальный.Свертка = РежимСверткиЭлементаУправления.Лево;
		ЭлементыФормы.Config.Свертка = РежимСверткиЭлементаУправления.Лево;
	Иначе
		//востанавливаем
		ЭлементыФормы.Config.Свертка = РежимСверткиЭлементаУправления.Нет;
		ЭлементыФормы.РазделительВертикальный.Свертка = РежимСверткиЭлементаУправления.Нет;
			//так же востанавливаем и привязки 
				//сбросим привязки 
				ЭлементыФормы.РазделительВертикальный.УстановитьПривязку(ГраницаЭлементаУправления.Лево);
				//установим 
				ЭлементыФормы.Config.УстановитьПривязку(ГраницаЭлементаУправления.Право,ЭлементыФормы.РазделительВертикальный,ГраницаЭлементаУправления.Лево);
	КонецЕсли;
	СохранитьЗначениеПометки(Кнопка);
КонецПроцедуры

//Обновить все табличные поля
//
Процедура КП_ОбновитьТабличныеЧасти(Кнопка) Экспорт
	ОбновитьТЧ("Config");	
	Если НЕ ЭлементыФормы.ConfigSave.Свертка = РежимСверткиЭлементаУправления.Право Тогда
		ОбновитьТЧ("ConfigSave");
		ОбновитьТЧ("Config_Depot");
	КонецЕсли;	
КонецПроцедуры

//Переключает форму в режим сравнения, так чтобы можно было устанавливать флажки
Процедура КП_Сравнить(Кнопка)
	Кнопка.Пометка=Не Кнопка.Пометка;
	РежимСравнения=Кнопка.Пометка;
	ЭлементыФормы.Config.Колонки.FileName.ТолькоПросмотр=Не РежимСравнения;
	ЭлементыФормы.ConfigSave.Колонки.FileName.ТолькоПросмотр=Не РежимСравнения;
	ЭлементыФормы.Config_Depot.Колонки.FileName.ТолькоПросмотр=Не РежимСравнения;
	Если РежимСравнения Тогда
		ИзменениеФлажков(Config,Ложь,Ложь,"Пометка");
		ИзменениеФлажков(ConfigSave,Ложь,Ложь,"Пометка");
		ИзменениеФлажков(Config_Depot,Ложь,Ложь,"Пометка");
		Предупреждение("Отметьте две любые записи",20,"Enterprise Integrator");
	КонецЕсли;	
	Обновить(); 
КонецПроцедуры

Процедура КП_ОбновитьКонфигурацию(Кнопка)
	Если Не ОбработкаСоединения() Тогда
		Возврат;
	КонецЕсли;
	ОбновитьТЧ("ConfigSave");
	МассивИдентификаторов=ConfigSave.НайтиСтроки(Новый Структура("Пометка",Ложь));	
	Если МассивИдентификаторов.Количество()=0 Тогда 
		Возврат;
	КонецЕСли;
	зВыполнитьОбновлениеВыбранных(ЭтаФорма,МассивИдентификаторов,Истина); 
КонецПроцедуры

Процедура КП_Верт_Синхронизация(Кнопка)  Экспорт  //можеть быть восстановлена из значений пометок
	Кнопка.Пометка=Не Кнопка.Пометка;
КонецПроцедуры

Процедура КП_Горизонт_Синхронизация(Кнопка) Экспорт  //можеть быть восстановлена из значений пометок
	Кнопка.Пометка=Не Кнопка.Пометка;
КонецПроцедуры

//Процедура запускает еще один сенс в режиме предприятия
//
Процедура КП_Предприятие(Кнопка)
	ПараметрыБД=ПолучитьПараметрыСоединенияССервера();
	Если  ПараметрыБД=ложь Тогда 
		Возврат;
	КонецЕсли;	
	WshShell = Новый COMОбъект("WScript.Shell");
	Запуск=WshShell.Run(""""+КаталогПрограммы()+"1cv8.exe"" ENTERPRISE /S  """+ПараметрыБД.Сервер+"\"+ПараметрыБД.База+""" /N """+Пользователь+""" /P """+Пароль+"""");
КонецПроцедуры

//Переходит к справке на сайте
//
Процедура ПерейтиКСправке(Кнопка)
	Если Не ПустаяСтрока(Кнопка.Пояснение) Тогда
		ЗапуститьПриложение(Кнопка.Пояснение);	
	КонецЕсли;	
КонецПроцедуры


//////////////////////////////////////////////////////////////////////////
//       ОБРАБОТЧИКИ СОБЫТИЙ КОНТЕКСТНОГО МЕНЮ        

//Обновляет текущую ТЧ
Процедура КМ_Обновить(Кнопка)
	ОбновитьТЧ(Кнопка.Пояснение);	
КонецПроцедуры

//переходим к объектам БД в основной форме 
Процедура КМ_Дерево_ПерейтиКОбъектамБД(Кнопка)
	Строка=ЭлементыФормы.ДеревоКонф.ТекущаяСтрока;
	Если Строка.Уровень()>=1 Тогда  
		Если ВладелецФормы.Дерево.Строки.Количество()=0 Тогда
			ВладелецФормы.Активизировать();
			ВладелецФормы.ЗаполнитьДерево();
		КонецЕсли;
			Пока Строка.Уровень()>1 Цикл 
				Строка=Строка.Родитель;	
			КонецЦикла;
			НайденнаяСтрока=ВладелецФормы.Дерево.Строки.Найти(Строка.Имя,"Имя",Истина);
			Если Не НайденнаяСтрока=Неопределено Тогда
				ВладелецФормы.Активизировать();
				ВладелецФормы.ЭлементыФормы.Дерево.ТекущаяСтрока=НайденнаяСтрока;
			Иначе
				ЭтаФорма.Активизировать();	
			КонецЕсли;	
	КонецЕсли;
КонецПроцедуры

Процедура КМ_Дерево_ОткрытьОбъект(Кнопка)
	СтрокаОбъекта = ЭлементыФормы.ДеревоКонф.ТекущаяСтрока;
	Если СтрокаОбъекта.Уровень()>=1 Тогда  
		Пока СтрокаОбъекта.Уровень()>1 Цикл 
			СтрокаОбъекта=СтрокаОбъекта.Родитель;	
		КонецЦикла;
		Формы.ОбщаяФорма.ОткрытьСписок(Метаданные.НайтиПоПолномуИмени(СтрокаОбъекта.Имя));
	КонецЕсли;
КонецПроцедуры

Процедура КМ_вКонструкторЗапроса(Кнопка)
	ДеревоДляОбработки=ДеревоКонф.Скопировать();
	ДеревоДляОбработки.Колонки.Удалить(ДеревоДляОбработки.Колонки["Brief_Name"]);
	ДеревоДляОбработки.Колонки.Удалить(ДеревоДляОбработки.Колонки["Картинка"]);
	ДеревоДляОбработки.Колонки.Удалить(ДеревоДляОбработки.Колонки["КартинкаЭлементов"]);
	ДеревоДляОбработки.Колонки.Удалить(ДеревоДляОбработки.Колонки["ИскатьИД"]);
	ПередатьТаблицуДляГрупповойОбработки(ДеревоДляОбработки);
КонецПроцедуры

//Выгружает текущую запись в файл
//
Процедура КМ_ВыгрузитьВФайл(Кнопка)
	Таблица=Нрег(Кнопка.Пояснение);
	ТекущиеДанные=ЭлементыФормы[Таблица].ТекущиеДанные;
	Если Не ТекущиеДанные=Неопределено Тогда
		Структура=Новый Структура("FileName,Modified,TableName,DBName",ТекущиеДанные.FileName,'19000101',Таблица,ПараметрыОкружения.DBName);
		Если Нрег(Таблица)="config" Тогда
			Структура.Вставить("DBName",ТекущиеДанные.DbName);
		ИначеЕсли Нрег(Таблица)="config_depot" Тогда
			Структура.Вставить("Modified",ТекущиеДанные.Modified);
		КонецЕсли;
		зСохранитьЗаписьВФайл(Структура);
	КонецЕсли;	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

//Проверяеи соединие только для клиент серверной версии
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	Если  ОбработкаСоединения() Тогда
		FeatureID 	= зОписаниеЛицензий.Индекс(зОписаниеЛицензий.НайтиПоЗначению(ПараметрыОкружения.ТипСУБД));
		HASPObject	= GetHASPObject(FeatureID);
		Если HASPObject = Неопределено Тогда
			Предупреждение("Не обнаружен ключ защиты с лицензией на "+ПараметрыОкружения.ТипСУБД,20,"HASP");
			Отказ = Истина;
		КонецЕсли;
	Иначе
		Предупреждение("Настройте соединение к СУБД в настройках на закладке ""Авторизация""",20,"Подключение к СУБД");
		Отказ = Истина;
	КонецЕсли;	
КонецПроцедуры

Процедура ПриОткрытии()
	ВосстановитьЗначенияПометок(ЭтаФорма,"КоманднаяПанель1");
	ИдМетаданных = ПолучитьИД_ИзСсылки(Метаданные,Ложь);
	вПолучитьДанныеДляТабличныхПолей();
	зОпределитьИспользованиеХранилища(ЭтаФорма);
КонецПроцедуры

Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	Отказ = (Вопрос("Закрыть форму Объектов конфигурации?",РежимДиалогаВопрос.ОКОтмена)=КодВозвратаДиалога.Отмена);
КонецПроцедуры



ТекущаяДата=ТекущаяДата(); 

Перетаскивание=Новый Структура();
Перетаскивание.Вставить("СписокВыбораДействия",Новый СписокЗначений);
	Перетаскивание.СписокВыбораДействия.Добавить(ДействиеПеретаскивания.Копирование,"Копировать");
	Перетаскивание.СписокВыбораДействия.Добавить(ДействиеПеретаскивания.Перемещение,"Переместить");
	Перетаскивание.СписокВыбораДействия.Добавить("Отмена",,,ЭлементыФормы.КМ.Кнопки.КартинкиПеремещения.Кнопки.Отмена.Картинка);
Перетаскивание.Вставить("ТаблицаИсточник","configsave");


ЗакрыватьПриЗакрытииВладельца	= Истина;
МетаданныеФормы					= "ОбъектыКонфигурации";
МаксимальныйРазмерЗаписи		= 600000;
РежимСравнения					= Ложь;
ПроверятьДинамическиеЗаписи		= Ложь;
