Перем сЗаголовокОписанияУИНФорм;
Перем ТабПолей,ТабСоединений;
Перем ПроверитьОбновление;
Перем мИндексКартинкиНазначенияТаблицы; //Сответсие между назначением таблицы и индексом картинки
Перем МетаданныеФормы Экспорт; 			//Содержим имя формы как оно указано в конфигураторе 

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

//Получает размеры таблиц в MSSQL 
//Параметры 
//	МассивТаблиц - Тип МассивЗначений Имена таблиц для которых нужно определить колличественные показатели
//Возвращаемое значение:
//	<ТаблицаЗначений>  _Name,Data,reserved,_index,Unused
Функция ПолучитьРазмерТаблиц(МассивТаблиц)
	СобытиеОтладки=Формы.Отладка.ДобавитьСобытие("Получение параметров таблиц СУБД","Объекты БД");
	Попытка
	    Таблица = Новый ТаблицаЗначений();
		Таблица.Колонки.Добавить("_Name");
		Если ОбработкаСоединения()=Истина Тогда  //может быть и неопределено
			Если ПараметрыОкружения.ТипСУБД="DBMSSQL" Тогда
				//установим видимость колонки Pined для SQL2005  она не нужна 
				Если ПараметрыОкружения.ВерсияСУБД>=9000 Тогда 
					ЭлементыФормы.Дерево.Колонки["_Rows"].ДанныеФлажка=Неопределено;
				КонецЕсли;
			КонецЕсли;
			зПолучитьПараметрыТаблиц(Таблица,МассивТаблиц);
		КонецЕсли;
	Исключение
		Формы.Отладка.ЗавершитьСобытие(СобытиеОтладки,"ОченьВажное",ИнформацияОбОшибке().Описание);
		ВызватьИсключение "Не удалось получить параметры таблиц СУБД";
	КонецПопытки;
	Формы.Отладка.ЗавершитьСобытие(СобытиеОтладки);	
	Возврат Таблица;
КонецФункции


//Процедура Выводит (Вставляет после основной таблицы)
//Дополнительные строки с описанием таблиц, таких как таблицы итогов и регистрации изменений
//Параметры:
//	СтрокаТаблицы		- <СтрокаДерваЗначений>. Строка в дере с основной таблицой
//	СтруктураМД			- <ТаблицаЗначений>. Результат Выполнения процедуры "ПолучитьСтруктуруХранения"
//	ПоказателиТаблиц	- <ТаблицаЗначений>. Размеры полей таблиц и индексов на сервере
//	Тип					- <Строка>. Тип полей структуры.
Процедура ВывестиДополнительныеТаблицы(СтрокаТаблицы,СтруктураМД,ПоказателиТаблиц,Тип);
	СобытиеОтладки=Формы.Отладка.ДобавитьСобытие("Получение допонительных(службных) таблиц для "+СтрокаТаблицы.Имя,"Объекты БД");
	Попытка
		ДопТаблицы=СтруктураМД.НайтиСтроки(Новый Структура("ИмяТаблицы,Метаданные","",СтрокаТаблицы.Имя));
		Для каждого ДопТаблица из ДопТаблицы Цикл
			//Ищем Строку 
			МассивСтрок=СтрокаТаблицы.Родитель.Строки.НайтиСтроки(Новый Структура("ЭтоТаблица,"+Тип,Истина,ДопТаблица.ИмяТаблицыХранения));
			Если МассивСтрок.Количество()=0 Тогда
				//не нашли тогда вставляем новую
				НоваяСтрока=СтрокаТаблицы.Родитель.Строки.Вставить(СтрокаТаблицы.Родитель.Строки.Индекс(СтрокаТаблицы)+1);	
				ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаТаблицы,,"Строки, Родитель, Назначение,Картинка, Пометка, Флаг,"+Тип);
				НоваяСтрока.Назначение	= ДопТаблица.Назначение;
				НоваяСтрока[Тип]			= ДопТаблица.ИмяТаблицыХранения;
				Если Не мИндексКартинкиНазначенияТаблицы.Получить(ДопТаблица.Назначение)=Неопределено Тогда
					НоваяСтрока.Картинка	= мИндексКартинкиНазначенияТаблицы.Получить(ДопТаблица.Назначение);
				Иначе
					НоваяСтрока.Картинка	= СтрокаТаблицы.Картинка;
				КонецЕсли;
				УдалятьПрочиеСтроки=Ложь;
				СкопироватьСтрокиДерева(СтрокаТаблицы,НоваяСтрока,Новый Структура("Пометка,Назначение,Флаг",0,ДопТаблица.Назначение,Ложь));
				УдалятьПрочиеСтроки=вПолучитьУточнениеТаблицыМетаданных(НоваяСтрока.Имя,НоваяСтрока.Назначение);
				Если  УдалятьПрочиеСтроки Тогда
					//удаляем все  подстроки кроме первой
					Для Ном=1 по НоваяСтрока.Строки.Количество()-1 Цикл
						НоваяСтрока.Строки.Удалить(НоваяСтрока.Строки[1]);			
					КонецЦикла;
				КонецЕсли;	
				КорректировкаРеквизитовДопТаблиц(СтрокаТаблицы[Тип],НоваяСтрока,ДопТаблица.Поля,Тип);
			Иначе
				НоваяСтрока=МассивСтрок[0];
			КонецЕсли;
			Если Тип="SQL" Тогда
				СтруктураПараметровТаблицы = ПоказателиТаблиц.Найти(ДопТаблица.ИмяТаблицыХранения, "_Name");
				Если НЕ СтруктураПараметровТаблицы = Неопределено Тогда
					ЗаполнитьЗначенияСвойств(НоваяСтрока, СтруктураПараметровТаблицы);
				КонецЕсли;
			КонецЕсли;	
		КонецЦикла;
	Исключение
		Формы.Отладка.ЗавершитьСобытие(СобытиеОтладки,"ОченьВажное",ИнформацияОбОшибке().Описание);
		ВызватьИсключение "Не удалось получить допонительные таблицы";
	КонецПопытки;
	Формы.Отладка.ЗавершитьСобытие(СобытиеОтладки);	
КонецПроцедуры

//Оставляет во вспомогательной таблицы только те данные которые там действительно присутсвуют
//удаляет реквизыты которых нет, добавляет прочие служебные реквизиты. а  так же производит
//изменение SQL таблицы для оставляемых полей.
//Параметры:
//	ИмяОсновнойТаблицы			-<Строка>. SQL Имя Основнйо таблицы хранения данных.
//	СтрокаДопТаблицы			-<СтрокаДереваЗначений>. Строка дополнитеольной таблицы.
//  ТаблицаСуществующихПолей	-<ТаблицаЗначений>. Таблица в которой перечислены действительные поля дополнительной таблицы
//	Тип							- <Строка>. Тип полей структуры.
Процедура КорректировкаРеквизитовДопТаблиц(ИмяОсновнойТаблицы,СтрокаДопТаблицы,ТаблицаСуществующихПолей,Тип);
	//Удаляем не нужные
	ОбрабатываемыеСтроки=СтрокаДопТаблицы.Строки.НайтиСтроки(Новый Структура("Таблица",ИмяОсновнойТаблицы),Истина);
	Для Каждого РеквизитДопТаблицы из ОбрабатываемыеСтроки Цикл
		Попытка 
			СтрокаПоля=ТаблицаСуществующихПолей.Найти(РеквизитДопТаблицы[Тип],"ИмяПоляХранения");
			Если СтрокаПоля=Неопределено Тогда
				РеквизитДопТаблицы.Родитель.Строки.Удалить(РеквизитДопТаблицы);
			Иначе
				РеквизитДопТаблицы.Таблица=СтрокаДопТаблицы[Тип];
			КонецЕсли;
		Исключение
		КонецПопытки;	
	КонецЦикла;
	//Теперь добавим служебные
	Для Каждого Поле из ТаблицаСуществующихПолей Цикл
		Если ПустаяСтрока(Поле.ИмяПоля) Тогда
			ОписаниеСлужебногоПоля=вОписаниеСлужебногоПоля(Поле.ИмяПоляХранения,,,Тип);
		Иначе
			ОписаниеСлужебногоПоля=Новый Структура("Имя,Представление",Поле.ИмяПоля,"",Тип);
		КонецЕсли;	
		ПолеТаблицы=СтрокаДопТаблицы.Строки.Найти(ОписаниеСлужебногоПоля.Имя,"Имя",Истина);
		Если ПолеТаблицы=Неопределено Тогда 
			ПолеТаблицы=СтрокаДопТаблицы.Строки[0].Строки.Добавить();
			ЗаполнитьЗначенияСвойств(ПолеТаблицы,ОписаниеСлужебногоПоля);
			ПолеТаблицы[Тип]				= Поле.ИмяПоляХранения;
			ПолеТаблицы.Картинка		= 61;
			ПолеТаблицы.Таблица			= СтрокаДопТаблицы[Тип];
		КонецЕсли;
	КонецЦикла;	
КонецПроцедуры	

//Запускает проверку новой версии
//если влаг снят но проверка новой версии в этом месяце еще не производилась .. проверка все равно будет иницированна однократно
//Параметры:
//	Нет.
Процедура ПроверкаНовойВерсии()
	Если ПроверятьВерсию  Тогда 
		СохранитьЗначение(""+Месяц(ТекущаяДата())+Год(ТекущаяДата()),ПроверитьОбновление);
		КонтекстОбновление();
	Иначе
		//проверяем запускалось ли обновление в этом месяце
		Ид_ПроверкиВерсии=""+Месяц(ТекущаяДата())+Год(ТекущаяДата());
		Если ВосстановитьЗначение(Ид_ПроверкиВерсии)<>Истина Тогда 
			//обновление в этом месяце не проверялось 
			//поставим флажок в истину  для проверки обновления ... если пользователь снимет флаг
			//так снимет ТОЛЬКО на месяц
			ПроверятьВерсию=Истина;                                                                                          
			СохранитьЗначение(Ид_ПроверкиВерсии,ПроверитьОбновление);
			КонтекстОбновление();
		КонецЕсли;	
	КонецЕсли;
КонецПроцедуры	


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

//Заполняем дерево на основе метаданных конфигурации
Процедура ДействияПрочитатьКонфигурацию(Кнопка)
	Если Вопрос("Заполнить дерево метаданными?",РежимДиалогаВопрос.ОКОтмена,20,,"Объекты базы данных")=КодВозвратаДиалога.ОК Тогда
		ЗаполнитьДерево(Дерево,Новый Структура);
	КонецЕсли;	
КонецПроцедуры

//Получаем параметры для выделенных строк
Процедура ДействияПолучитьПараметры(Кнопка)
	СобытиеОтладки=Формы.Отладка.ДобавитьСобытие("Получение параметров прикладных объектов в терминах "+Кнопка.Имя,"Объекты БД");
	Попытка
		ВыделенныеСтроки=Дерево.Строки.НайтиСтроки(Новый Структура("Флаг,ЭтоТаблица,Назначение",Истина,Истина,"Основная"),Истина);
		МассивМД=Новый Массив;
		Для каждого СтрокаДерева из ВыделенныеСтроки Цикл
			МассивМД.Добавить(СтрокаДерева.ПолноеИмя);
		КонецЦикла;
		ЭлементыФормы.Дерево.Колонки[Кнопка.Имя].Видимость = Истина;
		СтруктураМД=ПолучитьСтруктуруХраненияБазыДанных(МассивМД,Кнопка.Имя="SQL");
		//расчитаем размеры таблиц
		ПоказателиТаблиц = Неопределено;
		Если Кнопка.Имя="SQL" И ОбработкаСоединения()=Истина Тогда
			ВсеТаблицы			= СтруктураМД.ВыгрузитьКолонку("ИмяТаблицыХранения");
			МассивТаблиц		= Новый Массив();
			ПоказателиТаблиц	= Новый ТаблицаЗначений;
			Для Каждого ИмяТаблицы Из ВсеТаблицы Цикл
				МассивТаблиц.Добавить(ИмяТаблицы);
				Если МассивТаблиц.Количество()=30 ИЛИ ИмяТаблицы=ВсеТаблицы[ВсеТаблицы.Количество()-1] Тогда
					//не больше 30 таблиц а то запрос получается слишком длинным
					Если ПоказателиТаблиц.Колонки.Количество() = 0 Тогда
						ПоказателиТаблиц=ПолучитьРазмерТаблиц(МассивТаблиц);
					Иначе
						вСоединить(ПоказателиТаблиц,ПолучитьРазмерТаблиц(МассивТаблиц));
					КонецЕсли;	
					МассивТаблиц.Очистить();
				КонецЕсли;	
			КонецЦикла;	
		КонецЕсли;	
		//теперь выведем данные таблиц
		Для каждого СтрокаТаблицы Из ВыделенныеСтроки Цикл
			Если Не ПустаяСтрока(СтрокаТаблицы[?(Кнопка.Имя="SQL","SDBL","SQL")]) Тогда
				//видмо для другого  типа уже расчитывали
				Прервать;
			КонецЕсли;	
			СтруктураХраненияТаблицы=СтруктураМД.Найти(СтрокаТаблицы.Имя,"ИмяТаблицы");
			Если Не СтруктураХраненияТаблицы=Неопределено Тогда
				СтрокаТаблицы[Кнопка.Имя]=СтруктураХраненияТаблицы.ИмяТаблицыХранения;
				ПредыдущееИмяПоля="";
				//выводим SQL имена таблиц
				Для Каждого Поле из  СтруктураХраненияТаблицы.Поля Цикл
					Если ПустаяСтрока(Поле.ИмяПоля) Тогда
						ОписаниеСлужебногоПоля=вОписаниеСлужебногоПоля(Поле.ИмяПоляХранения,,Поле.ИмяПоля,Кнопка.Имя);
					Иначе
						ОписаниеСлужебногоПоля=Новый Структура("Имя,Представление",Поле.ИмяПоля,"");
					КонецЕсли;	
					ПолеТаблицы=СтрокаТаблицы.Строки.Найти(ОписаниеСлужебногоПоля.Имя,"Имя",Истина);
					Если ПолеТаблицы=Неопределено Тогда 
						ПолеТаблицы=СтрокаТаблицы.Строки[0].Строки.Добавить();
	                    ЗаполнитьЗначенияСвойств(ПолеТаблицы,ОписаниеСлужебногоПоля);
						ПолеТаблицы.Картинка		= 61;
					ИначеЕсли ПредыдущееИмяПоля=Поле.ИмяПоля Тогда
						ПолеТаблицы.Картинка=54;
						ОписаниеСлужебногоПоля=вОписаниеСлужебногоПоля(Поле.ИмяПоляХранения,Истина,Поле.ИмяПоля,Кнопка.Имя);
						СоставноеПолеТаблицы=ПолеТаблицы.Строки.Найти(ОписаниеСлужебногоПоля.Имя,"Имя",Истина);
						Если СоставноеПолеТаблицы=Неопределено Тогда 
							//новое поле составного типа
							ПолеТаблицы=ПолеТаблицы.Строки.Добавить();
							ЗаполнитьЗначенияСвойств(ПолеТаблицы,ОписаниеСлужебногоПоля,,Кнопка.Имя);
							ПолеТаблицы.Картинка		= 55;
						КонецЕсли;	
					КонецЕсли;
					ПолеТаблицы[Кнопка.Имя]		= Поле.ИмяПоляХранения;
		            ПолеТаблицы.Таблица = СтрокаТаблицы[Кнопка.Имя];
					ПредыдущееИмяПоля=Поле.ИмяПоля;
				КонецЦикла;	
				//выведем параметры таблицы
				Если Кнопка.Имя="SQL" И ТипЗнч(ПоказателиТаблиц) = Тип("ТаблицаЗначений") Тогда
	    			СтруктураПараметровТаблицы = ПоказателиТаблиц.Найти(СтруктураХраненияТаблицы.ИмяТаблицыХранения, "_Name");
					Если НЕ СтруктураПараметровТаблицы = Неопределено Тогда
						ЗаполнитьЗначенияСвойств(СтрокаТаблицы, СтруктураПараметровТаблицы);
					КонецЕсли;
				КонецЕсли;	
				ВывестиДополнительныеТаблицы(СтрокаТаблицы,СтруктураМД,ПоказателиТаблиц,Кнопка.Имя);
			КонецЕсли;	
		КонецЦикла;
	Исключение
		Формы.Отладка.ЗавершитьСобытие(СобытиеОтладки,"ОченьВажное",ИнформацияОбОшибке().Описание);
		ВызватьИсключение "Не удалось получить параметры прикладных объектов";
	КонецПопытки;
	Формы.Отладка.ЗавершитьСобытие(СобытиеОтладки);	
КонецПроцедуры	

//Открывает конфигуратор текущего соединеия
Процедура ДействияКонфигуратор(Кнопка)
	ЗапуститьСистему("DESIGNER");
КонецПроцедуры

//Открывает форму встроенного языка
Процедура ДействияВстроенныйЯзык(Кнопка)
	ОкноТекста=ПолучитьФорму("ОбработкаРезультата_ПроизвольныйАлгоритм",,ЭтаФорма);
	ОкноТекста.Открыть();
КонецПроцедуры

//Открывает форму конструктора представлений
Процедура ДействияКонструкторПредставления()
	Если Не Формы.Свойство("КонструкторЗапроса") Тогда
		Формы.Вставить("КонструкторЗапроса",ПолучитьФорму("КонструкторПредставления",ЭтаФорма));
	Иначе
		Формы.КонструкторЗапроса.мФормаПараметров = ПолучитьФорму("ФормаПараметров", Формы.КонструкторЗапроса);
	КонецЕсли;
    Формы.КонструкторЗапроса.Открыть();
КонецПроцедуры

//Открываем настройки
Процедура ДействияНастройка(Кнопка)
	ОкноНастройки=ПолучитьФорму("Настройка",Этаформа);
	ОкноНастройки.Открыть();
КонецПроцедуры

//Открыте формы объектов конфигурации
Процедура ДействияОбъектыКонфигурации()
	Если ПараметрыОкружения.СерверныйРежим И Не V8Storage=Неопределено Тогда
		Формы.ОбъектыКонфигурации.Открыть();
	КонецЕсли;	
КонецПроцедуры

//Функция выбирает один тип из множества
//Значение:
//	Описание				-<ОписаниеТипов>. Тип из которого нужно выбрать.
//  ВернутьОписаниеТипов    -<Булево>. Определят возвращаемы Тип
//Возвращаемое значение:
//	Если тип выбран тогда ОписаниеТипов или Массив типов
Функция ВыбратьТипИзМножества(Описание,ВернутьОписаниеТипов=Истина)
	Если ТипЗнч(Описание)=Тип("ОписаниеТипов") Тогда
		МассивТипов=Описание.Типы();
		Если МассивТипов.Количество()>0 Тогда
			Если МассивТипов.Количество()>1 Тогда
				Сз=Новый СписокЗначений();
				Сз.ЗагрузитьЗначения(МассивТипов);
				Элемент=ВыбратьИзМеню(Сз);
				Если Элемент=Неопределено Тогда
					Возврат Неопределено;
				ИначеЕсли Не ВернутьОписаниеТипов Тогда
					Возврат Элемент.Значение;
				КонецЕсли;
				МассивТипов=Новый массив;
				МассивТипов.Добавить(Элемент.Значение);
				НовеОписание=Новый Описаниетипов(МассивТипов);
			Иначе
				Если Не ВернутьОписаниеТипов Тогда
					Возврат МассивТипов[0];		
				КонецЕсли;	
				НовеОписание=Описание;	
			КонецЕсли;
			Возврат НовеОписание
		КонецЕсли;	
	Иначе
		Возврат Неопределено;
	КонецЕсли;	
КонецФункции	

//Осуществляет переход к типу данных который установлен у текущего реквизита
Процедура ДействияПереходКТипуДанных(Кнопка)
	Стр=ЭлементыФормы.Дерево.ТекущаяСтрока;
	ТипЗнач=ВыбратьТипИзМножества(Стр.Тип);
	Если Не ТипЗнач=Неопределено Тогда
		Назначения=Дерево.Строки.НайтиСтроки(Новый Структура("Тип,ЭтоТаблица",ТипЗнач,Истина),Истина);
		Если Назначения.Количество()>0 Тогда
			ЭлементыФормы.Дерево.ТекущаяСтрока=Назначения[0];	
		КонецЕсли;
	КонецЕсли;	
КонецПроцедуры

//Находит в дереве все упоминаня выбранного типа. В конфигураторе обрабатыватся только простоые типы
//Результат выводится в Строку состояния
Процедура КонтекстНайти(Кнопка)
	Стр=ЭлементыФормы.Дерево.ТекущаяСтрока;
	ТипЗнач=ВыбратьТипИзМножества(Стр.Тип,Ложь);
	Если Не ТипЗнач=Неопределено Тогда
		СтрокиПоиска=Дерево.Строки.НайтиСтроки(Новый Структура("ЭтоТаблица",Ложь),Истина);
		ИнициализацияОкнаИсполнения("Поиск типа",СтрокиПоиска.Количество());
		Сообщить("Поиск вхождения типа: "+ТипЗнач);
		Для каждого Строка из СтрокиПоиска Цикл
			Формы.ОкноИсполнения.Индикация();
			Если ТипЗнч(Строка.Тип)=Тип("ОписаниеТипов") Тогда
				Если Не ПустаяСтрока(Строка.ПолноеИмя) И Строка.Тип.СодержитТип(ТипЗнач) Тогда
					Сообщить(Символы.Таб+"- "+Строка.ПолноеИмя,СтатусСообщения.Информация);
				КонецЕсли;	
			КонецЕсли;	
		КонецЦикла;
		ОстановкаОкнаИсполнения();
	КонецЕсли;	
КонецПроцедуры

//Открывает форму выбора текущего типа данных для того чтобы знать какие данные содержит
Процедура ДействияВыбратьТипДанных(Кнопка)
	Стр=ЭлементыФормы.Дерево.ТекущиеДанные;
	ТипЗнач=ВыбратьТипИзМножества(Стр.Тип);
	Если Не ТипЗнач=Неопределено Тогда
		Типы=ТипЗнач.Типы();
		Формы.ОбщаяФорма.ОткрытьСписок(Метаданные.НайтиПоТипу(Типы[0]));
		//ВвестиЗначение(null,Метаданные.НайтиПоТипу(Типы[0]).ПолноеИмя(), ТипЗнач);
	КонецЕсли;
КонецПроцедуры

//Открывает форму "Объекты конфигурации" и позицируется на строке, соответствующей метаданным текущей строки
//дерева "Объектов БД"
Процедура ДействияПерейтиКОбъектуКонфигурации(Кнопка)
	ТекСтрока = ЭлементыФормы.Дерево.ТекущаяСтрока;
	Если ТекСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Если ТекСтрока.Уровень()>=1 Тогда  
		Пока ТекСтрока.Уровень()>1 Цикл 
			ТекСтрока=ТекСтрока.Родитель;	
		КонецЦикла;
		Если Не Формы.ОбъектыКонфигурации.Открыта() Тогда
			Формы.ОбъектыКонфигурации.Открыть();
		КонецЕсли;	
		НайденнаяСтрока=Формы.ОбъектыКонфигурации.ДеревоКонф.Строки.Найти(ТекСтрока.Имя,"Имя",Истина);
		Если Не НайденнаяСтрока=Неопределено Тогда
			Формы.ОбъектыКонфигурации.Активизировать();
			Формы.ОбъектыКонфигурации.ЭлементыФормы.ДеревоКонф.ТекущаяСтрока=НайденнаяСтрока;
		Иначе
			ЭтаФорма.Активизировать();	
		КонецЕсли;	
	КонецЕсли;
КонецПроцедуры

//Открывает описание таблиц БД с возможностью редактирования
Процедура ДействияОткрытьОписаниеМетаданных(Кнопка)
	Если Не ОбработкаСоединения() Тогда
    	Возврат;
	КонецЕсли;	
	Формы.ОбъектыКонфигурации.ОткрытьЗапись(Новый Структура("FileName","DBNames"),"Params");
КонецПроцедуры

//Устанавливает все влажки для дерева значений
Процедура ДействияУстановитьФлажкиДействие(Кнопка)
	ИзменениеФлажков(Дерево,Истина,,"Пометка");
	ИзменениеФлажков(Дерево,Истина,,"Флаг");
КонецПроцедуры

//Снимает  все влажки для дерева значений
Процедура ДействияСнятьФлажкиДействие(Кнопка)
	ИзменениеФлажков(Дерево,Ложь,,"Пометка");
	ИзменениеФлажков(Дерево,Ложь,,"Флаг");
КонецПроцедуры

// Передает дерево объектов базы данных в конструктор запроса, для последующей обработки
//
Процедура ДействияВКонструкторЗапроса()
	ДеревоДляОбработки=Дерево.Скопировать();
	ДеревоДляОбработки.Колонки.Удалить(ДеревоДляОбработки.Колонки["КартинкаЭлементов"]);
	ДеревоДляОбработки.Колонки.Удалить(ДеревоДляОбработки.Колонки["Пометка"]);
	ДеревоДляОбработки.Колонки.Удалить(ДеревоДляОбработки.Колонки["Картинка"]);
	ДеревоДляОбработки.Колонки.Удалить(ДеревоДляОбработки.Колонки["ПометкаСоединения"]);
	ПередатьТаблицуДляГрупповойОбработки(ДеревоДляОбработки);
КонецПроцедуры	

//Открывает форму отладки если оны была закрыта
Процедура ДействияОткрытьФормуОтладки(Кнопка)
	Если Не Формы.Отладка.Открыта() Тогда
		Формы.Отладка.Открыть();	
	КонецЕсли;	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ, ВЫЗЫВАЕМЫЕ ИЗ ЭЛЕМЕНТОВ ФОРМЫ

//Скрываем эмблему
Процедура ДеревоПриПолученииДанных(Элемент, ОформленияСтрок)
	ЭлементыФормы.ПолеКартинки.Видимость							= Ложь;
	ЭлементыФормы.ПолеHTMLДокумента.Видимость						= Ложь;
	ЭлементыФормы.ПолеHTMLДокумента.Видимость						= Ложь;
    ЭлементыФормы.ПанельЗащиты.Видимость							= Ложь;
	ЭлементыФормы.Действия.Кнопки.Получить.Кнопки.SQL.Доступность	= ПараметрыОкружения.СерверныйРежим;
	ЭлементыФормы.Действия.Кнопки.Получить.Кнопки.SDBL.Доступность	= Истина;
КонецПроцедуры

Процедура ДеревоПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	ОформлениеСтроки.Ячейки.Представление.УстановитьКартинку(ПолучитьОбщуюКартинку(ДанныеСтроки.Картинка,"КартинкиМетаданных"));
	Если ДанныеСтроки.Строки.Количество()>0 Тогда
		ОформлениеСтроки.Ячейки.SQL.ОтображатьФлажок = ДанныеСтроки.ЭтоТаблица;
	КонецЕсли;
	Если ЭлементыФормы.Дерево.Колонки.Тип.Видимость  Тогда
		СформироватьКартинкуНаОсновеТипов(ОформлениеСтроки.Ячейки.Тип);
		ОформлениеСтроки.Ячейки.Тип.ОтображатьКартинку=истина;
	КонецЕсли;	
КонецПроцедуры

//Фиксирует таблицы в Памяти для определенных колонк и 
Процедура ДеревоПриИзмененииФлажка(Элемент, Колонка)
	Если Колонка.Имя="_Rows" Тогда
		
	ИначеЕсли Колонка.Имя="Sql" Тогда
		
	Иначе	
		ИзменениеФлажка(Элемент.ТекущиеДанные,Колонка.ДанныеФлажка,Колонка.Данные,,"Флаг");	
	КонецЕсли;	
КонецПроцедуры

//Открываем Сайт
Процедура ЭмблемаНажатие(Элемент)
	ТекущийЭлемент=ЭлементыФормы.Дерево;
	ЗапуститьПриложение("http://main.1c-ei.ru");
КонецПроцедуры

//Процедура проверят наличие ключа
//
Процедура ПроверитьКлюч(Элемент = Неопределено)
	Если Не GetHASPObject() = Неопределено Тогда
		ЭлементыФормы.ПанельЗащиты.Видимость							= Ложь;
	КонецЕсли;	
КонецПроцедуры

//Провера обновелния
Процедура КонтекстОбновление()
	Обновление=ПолучитьФорму("Обновление",ЭтаФорма);
	Обновление.Открыть();	
КонецПроцедуры

//При клике на картинке в карте
//
Процедура ПолеHTMLДокументаonclick(Элемент, pEvtObj)
	Попытка
		Ссылка=Нрег(pEvtObj.srcElement.href);
	Исключение
		Ссылка="";
	КонецПопытки;	
	Если 		Найти(Ссылка,"image/query")>0 Тогда
		ДействияКонструкторПредставления();		
	ИначеЕсли 	Найти(Ссылка,"image/conf")>0 Тогда
		ДействияОбъектыКонфигурации();
	ИначеЕсли 	Найти(Ссылка,"image/main")>0 Тогда
		ДействияПрочитатьКонфигурацию(Неопределено);
	КонецЕсли;	
КонецПроцедуры

//Переходит к справке на сайте
//
Процедура ПерейтиКСправке(Кнопка)
	Если Не ПустаяСтрока(Кнопка.Пояснение) Тогда
		ЗапуститьПриложение(Кнопка.Пояснение);	
	КонецЕсли;	
КонецПроцедуры

// При нажати на ссылку как получить ключ
//
Процедура КупитьНажатие(Элемент)
Если Не ПустаяСтрока(Элемент.Подсказка) Тогда
		ЗапуститьПриложение(Элемент.Подсказка);	
	КонецЕсли;	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

//Востановление всех настроек по умолчанию, при открытии загрузятся все сохраненные настройки, тем саммым перезатрут умолчания
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	Инициализация();
	Заголовок="Enterprise Integrator® "+Формат(ПараметрыОкружения.ВерсияОбработки,"ЧДЦ=2; ЧС=0; ЧРД=.")+"  Объекты базы данных";
	Настройка_Умолчания_Все();
КонецПроцедуры

//Процедура определят проверяет наличие новой версии, так же устанавливает видимость основыных разделов учета
//Связанных с SQL Сервером или Сервером 1С.(изменять видимость смысла нет, все равно работать не будет)
Процедура ПриОткрытии()
	//Востановим сохраненные настроки
	ОкноНастройки=ПолучитьФорму("Настройка",Этаформа);
	ОкноНастройки.СпособОтображенияОкна = ВариантСпособаОтображенияОкна.Минимизированное;
	ОкноНастройки.ВосстанавливатьЗначенияПриОткрытии = Истина;
	ОкноНастройки.Открыть();
	ОкноНастройки.Закрыть();
	
	Если Не МодальныйРежим Тогда
		ПодключитьОбработчикОжидания("ПроверкаНовойВерсии",300,Истина);
	КонецЕсли;
	Если НЕ ПараметрыОкружения.СерверныйРежим или МодальныйРежим Тогда
		ПодключитьОбработчикОжидания("ДействияКонструкторПредставления",0.1,Истина);
	КонецЕсли;
	//заблокируем кнопки если это для фаловой версии или отсутсвия установленной ВК 
	ЭлементыФормы.Действия.Кнопки.Подменю.Кнопки.ОбъектыКонфигурации.Доступность								 = ПараметрыОкружения.СерверныйРежим И Не V8Storage=Неопределено;
	ЭлементыФормы.Контекст.Кнопки.Дерево.Кнопки.ПерейтиКОбъектуКонфигурации.Доступность							 = ПараметрыОкружения.СерверныйРежим И Не V8Storage=Неопределено;
	ЭлементыФормы.Действия.Кнопки.Подменю.Кнопки.ПроверкаПараметров.Кнопки.ОткрытьОписаниеМетаданных.Доступность = ПараметрыОкружения.СерверныйРежим И Не V8Storage=Неопределено;
	
	ЭлементыФормы.Действия.Кнопки.Получить.Доступность															 = ПараметрыОкружения.СерверныйРежим;
	
	//скрываем некоторые колонки 
	ЭлементыФормы.Дерево.Колонки.reserved.Видимость																 = ПараметрыОкружения.СерверныйРежим;
	ЭлементыФормы.Дерево.Колонки._Rows.Видимость																 = ПараметрыОкружения.СерверныйРежим;
	ЭлементыФормы.Дерево.Колонки._index.Видимость																 = ПараметрыОкружения.СерверныйРежим;
	ЭлементыФормы.Дерево.Колонки.SQL.Видимость																 	 = ПараметрыОкружения.СерверныйРежим;
	ЭлементыФормы.Дерево.Колонки.SDBL.Видимость																 	 = Не ПараметрыОкружения.СерверныйРежим;
	
	//открывалась форма отладки, закроем ее 
	Если Не РежимОтладки Тогда
		Формы.Отладка.Закрыть();	
	КонецЕсли;
	
	//покажем карту 
	ЭлементыФормы.ПолеHTMLДокумента.Перейти("File:///"+СтрЗаменить(ПараметрыОкружения.КаталогОбработки," ","%20")+"Map/index.html");
	
	ПроверитьКлюч();
КонецПроцедуры

//Удаляем все временные файлы которые понасоздавали, и структуру форм .. открытых.
Процедура ПриЗакрытии()
	Формы=Неопределено;
	Попытка 
		УдалитьФайлы(КаталогВременныхФайлов(),"$Ei"+ПараметрыОкружения.ИдентификаторЗапуска+"*");
	Исключение	
	КонецПопытки;	
КонецПроцедуры




сЗаголовокОписанияУИНФорм=Новый Соответствие();

ТабПолей=Новый ТаблицаЗначений();
ТабПолей.Колонки.Добавить("Активность");
ТабПолей.Колонки.Добавить("Таблица");
ТабПолей.Колонки.Добавить("Столбец");
ТабПолей.Колонки.Добавить("Псевдоним");
ТабПолей.Колонки.Добавить("Вывод");
ТабПолей.Колонки.Добавить("Условие");
ТабПолей.Колонки.Добавить("Тип");
ТабПолей.Колонки.Добавить("ТипСортировки");
ТабПолей.Колонки.Добавить("ПорядокСортировки");

ТабСоединений=Новый ТаблицаЗначений();
ТабСоединений.Колонки.Добавить("Активность");
ТабСоединений.Колонки.Добавить("Таблица");
ТабСоединений.Колонки.Добавить("Псевдоним");
ТабСоединений.Колонки.Добавить("Условие");

мИндексКартинкиНазначенияТаблицы=Новый Соответствие();
мИндексКартинкиНазначенияТаблицы.Вставить("Итоги",69);
мИндексКартинкиНазначенияТаблицы.Вставить("ИтогиПоСчетам",69);
мИндексКартинкиНазначенияТаблицы.Вставить("ИтогиПоСчетамССубконто1",69);
мИндексКартинкиНазначенияТаблицы.Вставить("ИтогиПоСчетамССубконто2",69);
мИндексКартинкиНазначенияТаблицы.Вставить("ИтогиПоСчетамССубконто3",69);
мИндексКартинкиНазначенияТаблицы.Вставить("ИтогиПоСчетамССубконто4",69);
мИндексКартинкиНазначенияТаблицы.Вставить("ИтогиПоСчетамССубконто5",69);
мИндексКартинкиНазначенияТаблицы.Вставить("ИтогиМеждуСчетами",69);
мИндексКартинкиНазначенияТаблицы.Вставить("ВидыСубконто",45);
мИндексКартинкиНазначенияТаблицы.Вставить("ЗначенияСубконто",70);
мИндексКартинкиНазначенияТаблицы.Вставить("ТочкиМаршрута",47);
мИндексКартинкиНазначенияТаблицы.Вставить("РегистрацияИзменений",68);
мИндексКартинкиНазначенияТаблицы.Вставить("РегистрацияИзмененийКонстант",68);
мИндексКартинкиНазначенияТаблицы.Вставить("РегистрацияИзмененийКонфигурации",68);
мИндексКартинкиНазначенияТаблицы.Вставить("РегистрацияИзмененийВнешнихСвойствКонфигурации",68);

ПроверитьОбновление=Ложь;
Формы.Вставить("ОбъектыКонфигурации",	ПолучитьФорму("ОбъектыКонфигурации",Этаформа));
Формы.Вставить("ОбъектыБазыДанных",		Этаформа);
Формы.Вставить("Отладка",				ПолучитьФорму("ФормаОтладки",Этаформа));
МетаданныеФормы="Основная";
